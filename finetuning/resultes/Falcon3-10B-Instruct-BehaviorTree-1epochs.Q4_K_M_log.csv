SYSTEM,INSTRUCTIONS,USER COMMAND,Ground Truth BT,Prompt Type,Time,Behavior Tree,Model Name
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {CheckBattery: Condition Node: Check if the agent's battery level is above a threshold. Returns SUCCESS if above, FAILURE otherwise.; Recharge: Action Node: Initiate the charging process. Always returns SUCCESS.; NavigateTo: Action Node: Navigate to a specified location. Always returns SUCCESS.; ReportStatus: Action Node: Report the current status. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""check battery level, if sufficient navigate to the target location, else recharge, and report the status after moving or recharging"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryCheckTree"">
  <BehaviorTree ID=""BatteryCheckTree"">
    <Fallback>
      <Sequence>
        <CheckBattery/>
        <NavigateTo location=""{TargetLocation}""/>
        <ReportStatus message=""Arrived at target location.""/>
      </Sequence>
      <Sequence>
        <Recharge/>
        <ReportStatus message=""Recharging completed.""/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""CheckBattery"" editable=""true"">
    </Condition>
    <Action ID=""Recharge"" editable=""true"">
    </Action>
    <Action ID=""NavigateTo"" editable=""true"">
      <input_port name=""location""/>
    </Action>
    <Action ID=""ReportStatus"" editable=""true"">
      <input_port name=""message""/>
    </Action>
  </TreeNodesModel>
</root>",zero,70.33502840995789,"<root BTCPP_format=""3"" main_tree_to_execute=""MainTree"">
        <BehaviorTree name=""MainTree"">
            <Fallback>
                <Sequence>
                    <CheckBattery/>
                    <NavigateTo location=""target""/>
                </Sequence>
                <Sequence>
                    <Recharge/>
                    <ReportStatus/>
                </Sequence>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition Node=""CheckBattery""/>
            <Action Node=""NavigateTo""/>
            <Action Node=""Recharge""/>
            <Action Node=""ReportStatus""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below 20%. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the robot back to its base. Always returns SUCCESS.; continue_mission: Action Node: Continue with the current mission. Always returns SUCCESS.; recharge_battery: Action Node: Start the battery recharging process. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""If the battery is low, return to base and recharge; otherwise, continue with the mission"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Fallback name=""Battery Check"">
      <Sequence>
        <is_battery_low/>
        <return_to_base/>
        <recharge_battery/>
      </Sequence>
      <continue_mission/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_battery_low""/>
    <Action ID=""return_to_base""/>
    <Action ID=""recharge_battery""/>
    <Action ID=""continue_mission""/>
  </TreeNodesModel>
</root>",zero,66.83366465568542,"<root BTCPP_format=""3"" main_tree_to_execute=""MainTree"">
        <BehaviorTree name=""MainTree"">
            <Fallback>
                <Sequence>
                    <is_battery_low/>
                    <return_to_base/>
                    <recharge_battery/>
                </Sequence>
                <continue_mission/>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_battery_low""/>
            <Action name=""return_to_base""/>
            <Action name=""recharge_battery""/>
            <Action name=""continue_mission""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  patrol_area: Action Node: Patrol the designated area. Always returns SUCCESS.;
  detect_intruder: Condition: Detect if an intruder is present. Returns SUCCESS if detected, FAILURE otherwise.;
  alert_security: Action Node: Send an alert to the security team. Always returns SUCCESS.;
  investigate_area: Action Node: Investigate the suspicious activity. Always returns SUCCESS.;
  return_to_patrol: Action Node: Resume patrolling the area. Always returns SUCCESS.;
  is_area_clear: Condition: Check if the area is clear of intruders. Returns SUCCESS if clear, FAILURE otherwise.;
}. 
To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""Patrol the area. If an intruder is detected, alert security and investigate before returning to patrol."" Ensure the behavior tree follows a logical flow.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""PatrolIntrusionResponse"">
  <BehaviorTree ID=""PatrolIntrusionResponse"">
    <Sequence name=""Main Sequence"">
      <patrol_area/>
      <Fallback name=""Intruder Handling"">
        <Sequence name=""Intruder Detected"">
          <detect_intruder/>
          <Sequence name=""Alert and Investigate"">
            <alert_security/>
            <investigate_area/>
          </Sequence>
        </Sequence>
        <Sequence name=""No Intruder"">
          <is_area_clear/>
        </Sequence>
      </Fallback>
      <return_to_patrol/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID=""alert_security""/>
    <Action ID=""detect_intruder""/>
    <Action ID=""investigate_area""/>
    <Action ID=""patrol_area""/>
    <Action ID=""return_to_patrol""/>
    <Condition ID=""is_area_clear""/>
  </TreeNodesModel>
</root>",zero,77.2761881351471,"<?xml version=""1.0"" encoding=""UTF-8""?>
    <BehaviorTree main_tree_to_execute=""PatrolAndAlert"">
        <Sequence name=""PatrolAndAlert"">
            <Fallback name=""Patrol"">
                <patrol_area/>
            </Fallback>
            <detect_intruder/>
            <Sequence name=""AlertAndInvestigate"">
                <alert_security/>
                <investigate_area/>
            </Sequence>
            <return_to_patrol/>
        </Sequence>
        <TreeNodesModel>
            <ActionNode name=""patrol_area""/>
            <Condition name=""detect_intruder""/>
            <ActionNode name=""alert_security""/>
            <ActionNode name=""investigate_area""/>
            <ActionNode name=""return_to_patrol""/>
        </TreeNodesModel>
    </BehaviorTree>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_comm_available: Condition node: Check if communication is available. Returns SUCCESS if available, FAILURE otherwise.; send_status_update: Action Node: Send a status update to the base station. Always returns SUCCESS.; receive_commands: Action Node: Receive and process commands from the base station. Always returns SUCCESS.; enter_sleep_mode: Action Node: Enter low-power sleep mode. Always returns SUCCESS.; wake_up: Action Node: Wake up from sleep mode. Always returns SUCCESS.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""if communication is available then send a status update and receive commands, otherwise enter sleep mode and wake up after a specified duration"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""CommunicationHandler"">
  <BehaviorTree ID=""CommunicationHandler"">
    <Fallback name=""Communication Fallback"">
      <Sequence name=""Active Communication"">
        <is_comm_available/>
        <send_status_update/>
        <receive_commands/>
      </Sequence>
      <Sequence name=""Sleep Sequence"">
        <enter_sleep_mode/>
        <wake_up/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_comm_available""/>
    <Action ID=""send_status_update""/>
    <Action ID=""receive_commands""/>
    <Action ID=""enter_sleep_mode""/>
    <Action ID=""wake_up""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence"" name=""Active Communication""/>
    <Control ID=""Sequence"" name=""Sleep Sequence""/>
  </TreeNodesModel>
</root>",zero,72.78083753585815,"<root BTCPP_format=""3"" main_tree_to_execute=""main"">
    <BehaviorTree name=""main"">
        <Fallback>
            <Sequence>
                <is_comm_available/>
                <send_status_update/>
                <receive_commands/>
            </Sequence>
            <enter_sleep_mode/>
            <wake_up/>
        </Fallback>
    </BehaviorTree>
    <TreeNodesModel>
        <Condition name=""is_comm_available""/>
        <Action name=""send_status_update""/>
        <Action name=""receive_commands""/>
        <Action name=""enter_sleep_mode""/>
        <Action name=""wake_up""/>
    </TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:  
{
  `is_temperature_high`: Condition node: Check if the temperature exceeds the threshold. Returns SUCCESS if high, FAILURE otherwise.;  
  `activate_cooling_system`: Action Node: Turn on the cooling mechanisms. Always returns SUCCESS.;  
  `monitor_temperature`: Action Node: Continuously monitor the temperature. Always returns SUCCESS.
}.  
To construct a behavior tree in XML format for the following command, including any behavior outside the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if the temperature is high then activate the cooling system, otherwise continue monitoring the temperature"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""TemperatureControl"">
  <BehaviorTree ID=""TemperatureControl"">
    <Fallback name=""Temperature Fallback"">
      <Sequence name=""Cooling Sequence"">
        <is_temperature_high/>
        <activate_cooling_system/>
      </Sequence>
      <monitor_temperature/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Action ID=""activate_cooling_system""/>
    <Action ID=""monitor_temperature""/>
    <Condition ID=""is_temperature_high""/>
  </TreeNodesModel>
</root>


These tasks cover a variety of scenarios, ensuring that the LLM model can handle different conditions and actions while adhering strictly to the provided behavior dictionaries. Each behavior tree is structured logically in XML format, maintaining clarity and consistency for effective evaluation.",zero,69.20278072357178,"<root BTCPP_format=""3"" main_tree_to_execute=""TemperatureControl"">
        <BehaviorTree name=""TemperatureControl"">
            <Sequence>
                <Fallback>
                    <Condition behavior=""is_temperature_high""/>
                    <Fallback>
                        <Action behavior=""activate_cooling_system""/>
                        <Monitor behavior=""monitor_temperature""/>
                    </Fallback>
                </Fallback>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition behavior=""is_temperature_high""/>
            <Action behavior=""activate_cooling_system""/>
            <Action behavior=""monitor_temperature""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {collect_resources: Action Node: Collect available resources in the area. Always returns SUCCESS.; store_resources: Action Node: Store collected resources in the base. Always returns SUCCESS.; is_resource_available: Condition Node: Check if resources are available for collection. Returns SUCCESS if available, FAILURE otherwise.; is_storage_full: Condition Node: Check if storage is full. Returns SUCCESS if full, FAILURE otherwise.; report_collection_complete: Action Node: Report that resource collection is complete. Always returns SUCCESS.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to 'Collect resources if available and store them, else report completion' Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
  <BehaviorTree ID=""ResourceCollection"">
    <Sequence name=""Main Sequence"">
      <Fallback name=""Check Resources and Storage"">
        <Sequence>
          <is_resource_available/>
          <Fallback name=""Storage Status"">
            <Sequence>
              <is_storage_full/>
              <report_collection_complete/>
            </Sequence>
            <collect_resources/>
            <store_resources/>
          </Fallback>
        </Sequence>
        <report_collection_complete/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID=""collect_resources""/>
    <Action ID=""store_resources""/>
    <Action ID=""report_collection_complete""/>
    <Condition ID=""is_resource_available""/>
    <Condition ID=""is_storage_full""/>
  </TreeNodesModel>
</root>",zero,70.63512635231018,"<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
        <BehaviorTree>
            <Sequence name=""ResourceCollection"">
                <Fallback name=""CollectAndStore"">
                    <Sequence>
                        <is_resource_available/>
                        <collect_resources/>
                        <store_resources/>
                    </Sequence>
                    <report_collection_complete/>
                </Fallback>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_resource_available""/>
            <Action name=""collect_resources""/>
            <Action name=""store_resources""/>
            <Action name=""report_collection_complete""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {
    detect_obstacle: Condition: Detect if there is an obstacle ahead. Returns True if detected, False otherwise.;
    avoid_obstacle: Action: Perform obstacle avoidance maneuvers. Always returns True.;
    move_forward: Action: Move the agent forward. Always returns True.;
    stop_motion: Action: Stop all movement. Always returns True.;
    report_obstacle: Action: Send an obstacle detected report. Always returns True.;
    is_path_clear: Condition: Check if the path is clear. Returns True if clear, False otherwise.;
    resume_movement: Action: Resume movement after obstacle avoidance. Always returns True.
}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""avoid obstacles when detected and continue moving forward"". Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">
  <BehaviorTree ID=""ObstacleAvoidance"">
    <Fallback name=""Obstacle Fallback"">
      <Sequence name=""Obstacle Detected Sequence"">
        <detect_obstacle/>
        <Sequence name=""Avoid and Report"">
          <avoid_obstacle/>
          <report_obstacle/>
        </Sequence>
      </Sequence>
      <move_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""detect_obstacle""/>
    <Action ID=""avoid_obstacle""/>
    <Action ID=""report_obstacle""/>
    <Action ID=""move_forward""/>
    <Control ID=""Fallback"" name=""Obstacle Fallback""/>
    <Control ID=""Sequence"" name=""Obstacle Detected Sequence""/>
    <Control ID=""Sequence"" name=""Avoid and Report""/>
  </TreeNodesModel>
</root>",zero,68.26460218429565,"<root BTCPP_format=""3"" main_tree_to_execute=""AvoidObstaclesAndMoveForward"">
        <BehaviorTree>
            <Sequence name=""AvoidObstaclesAndMoveForward"">
                <Fallback name=""DetectAndAvoidObstacle"">
                    <Condition name=""detect_obstacle""/>
                    <Action name=""avoid_obstacle""/>
                </Fallback>
                <Action name=""move_forward""/>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""detect_obstacle""/>
            <Action name=""avoid_obstacle""/>
            <Action name=""move_forward""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below 20%. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the robot back to the base station. Always returns SUCCESS.; continue_operation: Condition node: Check if operations can continue. Returns SUCCESS if yes, FAILURE otherwise.; perform_task: Action Node: Execute the assigned task. Always returns SUCCESS.; notify_operator: Action Node: Send a notification to the operator. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the battery is low then return to base and notify the operator; otherwise, if operations can continue, perform the task"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Fallback name=""Battery Fallback"">
      <Sequence name=""Handle Low Battery"">
        <is_battery_low/>
        <return_to_base/>
        <notify_operator/>
      </Sequence>
      <Sequence name=""Continue Operations"">
        <continue_operation/>
        <perform_task/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_battery_low""/>
    <Action ID=""return_to_base""/>
    <Action ID=""notify_operator""/>
    <Condition ID=""continue_operation""/>
    <Action ID=""perform_task""/>
  </TreeNodesModel>
</root>",zero,77.21268630027771,"<root BTCPP_format=""3"" main_tree_to_execute=""MainTree"">
        <BehaviorTree name=""MainTree"">
            <Fallback>
                <Sequence>
                    <is_battery_low/>
                    <return_to_base/>
                    <notify_operator/>
                </Sequence>
                <Sequence>
                    <continue_operation/>
                    <perform_task/>
                </Sequence>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_battery_low""/>
            <Action name=""return_to_base""/>
            <Action name=""notify_operator""/>
            <Condition name=""continue_operation""/>
            <Action name=""perform_task""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {collect_item: Action Node: Gather an item from the environment. Always returns SUCCESS.; is_storage_full: Condition node: Check if the storage capacity is reached. Returns SUCCESS if full, FAILURE otherwise.; return_to_deposit: Action Node: Navigate back to the deposit location. Always returns SUCCESS.; deposit_items: Action Node: Deposit collected items. Always returns SUCCESS.; explore_area: Action Node: Explore a new area. Always returns SUCCESS.; notify_deposit_full: Action Node: Send a notification that storage is full. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""Explore the area and collect items. If storage is full, return to deposit location, deposit items, and notify that storage is full"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>  
<root BTCPP_format=""3"" main_tree_to_execute=""ItemCollection"">  
  <BehaviorTree ID=""ItemCollection"">  
    <Sequence name=""Main Sequence"">  
      <explore_area/>  
      <collect_item/>  
      <Fallback name=""Storage Check"">  
        <Sequence>  
          <is_storage_full/>  
          <return_to_deposit/>  
          <deposit_items/>  
          <notify_deposit_full/>  
        </Sequence>  
        <!-- Continue collecting items if storage not full -->  
      </Fallback>  
    </Sequence>  
  </BehaviorTree>  
  <TreeNodesModel>  
    <Action ID=""collect_item""/>  
    <Condition ID=""is_storage_full""/>  
    <Action ID=""return_to_deposit""/>  
    <Action ID=""deposit_items""/>  
    <Action ID=""explore_area""/>  
    <Action ID=""notify_deposit_full""/>  
  </TreeNodesModel>  
</root>",zero,82.791268825531,"<root BTCPP_format=""3"" main_tree_to_execute=""main"">
        <BehaviorTree name=""main"">
            <Sequence>
                <explore_area/>
                <collect_item/>
                <Fallback>
                    <is_storage_full/>
                    <Sequence>
                        <return_to_deposit/>
                        <deposit_items/>
                        <notify_deposit_full/>
                    </Sequence>
                </Fallback>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <ActionNode name=""explore_area""/>
            <ActionNode name=""collect_item""/>
            <ConditionNode name=""is_storage_full""/>
            <ActionNode name=""return_to_deposit""/>
            <ActionNode name=""deposit_items""/>
            <ActionNode name=""notify_deposit_full""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_enemy: Condition node: Check if an enemy is detected. Returns SUCCESS if detected, FAILURE otherwise.; patrol_area: Action Node: Patrol the designated area. Always returns SUCCESS.; engage_enemy: Action Node: Engage the detected enemy. Always returns SUCCESS.; retreat: Action Node: Retreat to a safe location. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if an enemy is detected, engage the enemy; otherwise, patrol the area and retreat if an enemy appears"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EnemyResponse"">
  <BehaviorTree ID=""EnemyResponse"">
    <Fallback name=""Main Fallback"">
      <Sequence name=""Engage Sequence"">
        <detect_enemy/>
        <engage_enemy/>
      </Sequence>
      <Sequence name=""Patrol and Monitor"">
        <patrol_area/>
        <detect_enemy/>
        <retreat/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""detect_enemy""/>
    <Action ID=""patrol_area""/>
    <Action ID=""engage_enemy""/>
    <Action ID=""retreat""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence"" name=""Engage Sequence""/>
    <Control ID=""Sequence"" name=""Patrol and Monitor""/>
  </TreeNodesModel>
</root>",zero,65.54071521759033,"<root BTCPP_format=""3"" main_tree_to_execute=""main"">
        <BehaviorTree name=""main"">
            <Fallback>
                <Sequence>
                    <detect_enemy/>
                    <engage_enemy/>
                </Sequence>
                <Sequence>
                    <patrol_area/>
                    <retreat/>
                </Sequence>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition detect_enemy/>
            <Action patrol_area/>
            <Action engage_enemy/>
            <Action retreat/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
is_battery_low: Condition node: Check if the battery level is low. Returns SUCCESS if low, FAILURE otherwise.
recharge_battery: Action Node: Recharge the robot's battery. Always returns SUCCESS.
perform_maintenance: Action Node: Perform maintenance tasks. Always returns SUCCESS.
is_maintenance_due: Condition node: Check if maintenance is due. Returns SUCCESS if due, FAILURE otherwise.
continue_operations: Action Node: Continue regular operations. Always returns SUCCESS.
report_status: Action Node: Report current status. Always returns SUCCESS.

Including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if the battery is low, recharge it; then check if maintenance is due, perform maintenance if needed, and finally continue operations while reporting status"". Take a step back and think deeply about the behavior tree.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""MaintenanceTask"">
  <BehaviorTree ID=""MaintenanceTask"">
    <Sequence name=""Maintenance Sequence"">
      <Fallback name=""Battery Check"">
        <Sequence>
          <is_battery_low/>
          <recharge_battery/>
        </Sequence>
        <continue_operations/>
      </Fallback>
      <Fallback name=""Maintenance Check"">
        <Sequence>
          <is_maintenance_due/>
          <perform_maintenance/>
        </Sequence>
        <continue_operations/>
      </Fallback>
      <report_status/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_battery_low""/>
    <Condition ID=""is_maintenance_due""/>
    <Action ID=""recharge_battery""/>
    <Action ID=""perform_maintenance""/>
    <Action ID=""continue_operations""/>
    <Action ID=""report_status""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",zero,84.15774011611938,"<?xml version=""1.0"" encoding=""UTF-8""?>
    <BehaviorTree main_tree_to_execute=""BatteryMaintenance"">
        <TreeNodesModel>
            <ConditionModel name=""is_battery_low""/>
            <ActionModel name=""recharge_battery""/>
            <ConditionModel name=""is_maintenance_due""/>
            <ActionModel name=""perform_maintenance""/>
            <ActionModel name=""continue_operations""/>
            <ActionModel name=""report_status""/>
        </TreeNodesModel>
        <Sequence name=""BatteryMaintenance"">
            <Fallback>
                <Condition name=""is_battery_low""/>
                <Action name=""recharge_battery""/>
            </Fallback>
            <Fallback>
                <Condition name=""is_maintenance_due""/>
                <Action name=""perform_maintenance""/>
            </Fallback>
            <Action name=""continue_operations""/>
            <Action name=""report_status""/>
        </Sequence>
    </BehaviorTree>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_obstacle_detected: Condition node: Check if there is an obstacle in the path. Returns SUCCESS if obstacle is detected, FAILURE otherwise.; avoid_obstacle: Action Node: Perform obstacle avoidance maneuvers. Always returns SUCCESS.; proceed_forward: Action Node: Move the robot forward. Always returns SUCCESS.; send_alert: Action Node: Send an alert message. Always returns SUCCESS}. Construct the behavior tree in XML format for the following command. Including any behavior not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if an obstacle is detected then avoid it and send an alert, otherwise proceed forward"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleHandling"">
  <BehaviorTree ID=""ObstacleHandling"">
    <Fallback name=""Obstacle Fallback"">
      <Sequence name=""Handle Obstacle"">
        <is_obstacle_detected/>
        <avoid_obstacle/>
        <send_alert/>
      </Sequence>
      <proceed_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_obstacle_detected""/>
    <Action ID=""avoid_obstacle""/>
    <Action ID=""send_alert""/>
    <Action ID=""proceed_forward""/>
  </TreeNodesModel>
</root>",zero,72.6632308959961,"<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">
    <BehaviorTree>
        <Sequence name=""ObstacleAvoidance"">
            <Fallback name=""ObstacleCheck"">
                <Condition name=""is_obstacle_detected""/>
            </Fallback>
            <Sequence name=""ObstacleHandling"">
                <Action name=""avoid_obstacle""/>
                <Action name=""send_alert""/>
            </Sequence>
            <Action name=""proceed_forward""/>
        </Sequence>
        <TreeNodesModel>
            <Condition name=""is_obstacle_detected""/>
            <Action name=""avoid_obstacle""/>
            <Action name=""send_alert""/>
            <Action name=""proceed_forward""/>
        </TreeNodesModel>
    </BehaviorTree>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
`is_object_found`: Condition node: Determine if a specific object has been located. Returns SUCCESS if found, FAILURE otherwise.
`grasp_object`: Action Node: Engage the mechanism to grasp the object. Always returns SUCCESS.
`place_object`: Action Node: Move and place the object at the designated location. Always returns SUCCESS.
`search_area`: Action Node: Conduct a search within the specified area. Always returns SUCCESS.
`alert_team`: Action Node: Notify the team about the object status. Always returns SUCCESS.

To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""if an object is found then grasp and place the object and alert the team, otherwise search the area"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObjectHandling"">
  <BehaviorTree ID=""ObjectHandling"">
    <Fallback name=""Object Fallback"">
      <Sequence name=""Handling Sequence"">
        <is_object_found/>
        <grasp_object/>
        <place_object/>
        <alert_team/>
      </Sequence>
      <search_area/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Action ID=""grasp_object""/>
    <Action ID=""place_object""/>
    <Action ID=""search_area""/>
    <Action ID=""alert_team""/>
    <Condition ID=""is_object_found""/>
  </TreeNodesModel>
</root>",zero,72.72706961631775,"<root BTCPP_format=""3"" main_tree_to_execute=""ObjectHandling"">
        <BehaviorTree name=""ObjectHandling"">
            <Fallback>
                <Sequence>
                    <is_object_found/>
                    <grasp_object/>
                    <place_object/>
                    <alert_team/>
                </Sequence>
                <search_area/>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_object_found""/>
            <Action name=""grasp_object""/>
            <Action name=""place_object""/>
            <Action name=""alert_team""/>
            <Action name=""search_area""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {rotate_in_circle: Action Node: Rotate the robot in a circle. Always returns SUCCESS.; is_robot_in_range: Condition node: Check if the robot is within 6 inches of its starting location. Returns SUCCESS if within range, FAILURE otherwise.; wander: Action Node: Perform a wandering action. Always returns SUCCESS.; task_completed: Action Node: Indicate task completion. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""Rotate in a circle within 6 inches of current location"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""RotateCircle"">
  <BehaviorTree ID=""RotateCircle"">
    <Sequence name=""Main Sequence"">
      <Fallback name=""Rotation Decision"">
        <Sequence>
          <is_robot_in_range/>
          <rotate_in_circle/>
          <task_completed/>
        </Sequence>
        <wander/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_robot_in_range""/>
    <Action ID=""rotate_in_circle""/>
    <Action ID=""task_completed""/>
    <Action ID=""wander""/>
  </TreeNodesModel>
</root>",zero,63.31016421318054,"<root BTCPP_format=""3"" main_tree_to_execute=""main"">
    <BehaviorTree name=""main"">
        <Fallback>
            <Sequence>
                <rotate_in_circle/>
                <is_robot_in_range/>
            </Sequence>
            <wander/>
        </Fallback>
        <TreeNodesModel>
            <ConditionModel name=""is_robot_in_range""/>
            <ActionModel name=""rotate_in_circle""/>
            <ActionModel name=""wander""/>
            <ActionModel name=""task_completed""/>
        </TreeNodesModel>
    </BehaviorTree>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_obstacle_ahead: Condition node: Detect if there is an obstacle in the robot's path. Returns SUCCESS if an obstacle is detected, FAILURE otherwise.; stop: Action Node: Stop the robot's movement. Always returns SUCCESS.; navigate_around: Action Node: Maneuver the robot around the detected obstacle. Always returns SUCCESS.; proceed_forward: Action Node: Continue moving forward. Always returns SUCCESS.; sound_alarm: Action Node: Emit an alarm sound. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if an obstacle is detected then stop, sound an alarm, and navigate around it; otherwise, proceed forward"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">
  <BehaviorTree ID=""ObstacleAvoidance"">
    <Fallback name=""Obstacle Fallback"">
      <Sequence name=""Handle Obstacle"">
        <is_obstacle_ahead/>
        <stop/>
        <sound_alarm/>
        <navigate_around/>
      </Sequence>
      <proceed_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_obstacle_ahead""/>
    <Action ID=""stop""/>
    <Action ID=""sound_alarm""/>
    <Action ID=""navigate_around""/>
    <Action ID=""proceed_forward""/>
  </TreeNodesModel>
</root>",zero,72.0606369972229,"<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleHandling"">
        <BehaviorTree name=""ObstacleHandling"">
            <Fallback>
                <Sequence>
                    <is_obstacle_ahead/>
                    <stop/>
                    <sound_alarm/>
                    <navigate_around/>
                </Sequence>
                <proceed_forward/>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_obstacle_ahead""/>
            <Action name=""stop""/>
            <Action name=""sound_alarm""/>
            <Action name=""navigate_around""/>
            <Action name=""proceed_forward""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_intruder_detected: Condition node: Check if an intruder is detected. Returns SUCCESS if detected, FAILURE otherwise.; alert_security: Action Node: Send an alert to the security team. Always returns SUCCESS.; patrol_area: Action Node: Continue patrolling the area. Always returns SUCCESS.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""if an intruder is detected then alert security, otherwise continue patrolling the area"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""IntruderResponse"">
  <BehaviorTree ID=""IntruderResponse"">
    <Fallback name=""Intruder Fallback"">
      <Sequence name=""Intruder Sequence"">
        <is_intruder_detected/>
        <alert_security/>
      </Sequence>
      <patrol_area/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_intruder_detected""/>
    <Action ID=""alert_security""/>
    <Action ID=""patrol_area""/>
  </TreeNodesModel>
</root>",zero,59.60215997695923,"<?xml version=""1.0"" encoding=""UTF-8""?>
<BehaviorTree main_tree_to_execute=""IntruderHandling"">
    <Sequence name=""IntruderHandling"">
        <Fallback name=""IntruderCheck"">
            <Condition name=""is_intruder_detected""/>
        </Fallback>
        <Action name=""alert_security""/>
        <Action name=""patrol_area""/>
    </Sequence>
</BehaviorTree>
<TreeNodesModel>
    <Condition name=""is_intruder_detected""/>
    <Action name=""alert_security""/>
    <Action name=""patrol_area""/>
</TreeNodesModel>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_task_assigned: Condition node: Check if a new task has been assigned. Returns SUCCESS if a task is present, FAILURE otherwise.; accept_task: Action Node: Accept the newly assigned task. Always returns SUCCESS.; review_task: Action Node: Review the details of the current task. Always returns SUCCESS.; execute_task: Action Node: Execute the assigned task. Always returns SUCCESS.; idle: Action Node: Remain idle and monitor for new tasks. Always returns SUCCESS.}. To construct behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if a task is assigned, accept and execute it; otherwise, review previous tasks and remain idle."" Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""TaskManagement"">
  <BehaviorTree ID=""TaskManagement"">
    <Fallback name=""Task Fallback"">
      <Sequence name=""Handle New Task"">
        <is_task_assigned/>
        <Sequence>
          <accept_task/>
          <execute_task/>
        </Sequence>
      </Sequence>
      <Sequence name=""Handle No New Task"">
        <review_task/>
        <idle/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_task_assigned""/>
    <Action ID=""accept_task""/>
    <Action ID=""execute_task""/>
    <Action ID=""review_task""/>
    <Action ID=""idle""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",zero,80.59990549087524,"<root BTCPP_format=""3"" main_tree_to_execute=""main"">
        <BehaviorTree name=""main"">
            <Sequence name=""TaskExecution"">
                <Fallback name=""TaskManagement"">
                    <is_task_assigned/>
                    <accept_task/>
                </Fallback>
                <execute_task/>
            </Sequence>
            <Fallback name=""IdleAndReview"">
                <review_task/>
                <idle/>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_task_assigned""/>
            <Action name=""accept_task""/>
            <Action name=""execute_task""/>
            <Action name=""review_task""/>
            <Action name=""idle""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_capacity_full: Condition node: Check if the storage capacity is full. Returns SUCCESS if full, FAILURE otherwise.; unload_resources: Action Node: Unload collected resources. Always returns SUCCESS.; search_for_resources: Action Node: Search the environment for resources. Always returns SUCCESS.; collect_resource: Action Node: Collect a resource from the environment. Always returns SUCCESS.; return_to_base: Action Node: Return to the base for unloading resources. Always returns SUCCESS.; scan_environment: Action Node: Scan the surrounding environment for potential resources. Always returns SUCCESS.; report_status: Action Node: Report the current status to the central system. Always returns SUCCESS.;}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if storage is full, unload resources and return to base; otherwise, search for resources, collect them, scan the environment, and report status"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
  <BehaviorTree ID=""ResourceCollection"">
    <Sequence>
      <Fallback>
        <Sequence>
          <is_capacity_full/>
          <unload_resources/>
          <return_to_base/>
        </Sequence>
        <Sequence>
          <search_for_resources/>
          <collect_resource/>
          <scan_environment/>
          <report_status/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
    <Condition ID=""is_capacity_full""/>
    <Action ID=""unload_resources""/>
    <Action ID=""return_to_base""/>
    <Action ID=""search_for_resources""/>
    <Action ID=""collect_resource""/>
    <Action ID=""scan_environment""/>
    <Action ID=""report_status""/>
  </TreeNodesModel>
</root>",zero,105.17688322067261,"<root BTCPP_format=""3"" main_tree_to_execute=""main_behavior_tree"">
        <BehaviorTree name=""main_behavior_tree"">
            <Fallback>
                <Sequence>
                    <is_capacity_full/>
                    <unload_resources/>
                    <return_to_base/>
                </Sequence>
                <Sequence>
                    <search_for_resources/>
                    <collect_resource/>
                    <scan_environment/>
                    <report_status/>
                </Sequence>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_capacity_full""/>
            <Action name=""unload_resources""/>
            <Action name=""return_to_base""/>
            <Action name=""search_for_resources""/>
            <Action name=""collect_resource""/>
            <Action name=""scan_environment""/>
            <Action name=""report_status""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_weather_clear: Condition node: Check if the current weather is clear. Returns SUCCESS if clear, FAILURE otherwise.; proceed_with_operation: Action Node: Continue with the current operation. Always returns SUCCESS.; wait_for_clear_weather: Action Node: Pause operations until weather improves. Always returns SUCCESS.; deploy_weather_protection: Action Node: Activate weather protection mechanisms. Always returns SUCCESS.; report_weather_status: Action Node: Send weather status report to base. Always returns SUCCESS.; evaluate_weather_severity: Condition node: Assess the severity of the current weather conditions. Returns SUCCESS if severe, FAILURE otherwise.; initiate_emergency_protocol: Action Node: Start emergency procedures due to severe weather. Always returns SUCCESS.; maintain_operational_readiness: Action Node: Ensure systems are ready for operation post-weather. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""check weather; if clear, proceed with operation; if not clear and severe, initiate emergency protocol; otherwise, wait for clear weather"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""WeatherResponse"">
  <BehaviorTree ID=""WeatherResponse"">
    <Sequence>
      <is_weather_clear/>
      <proceed_with_operation/>
      <Fallback>
        <evaluate_weather_severity/>
        <Sequence>
          <initiate_emergency_protocol/>
          <maintain_operational_readiness/>
        </Sequence>
        <wait_for_clear_weather/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Sequence""/>
    <Condition ID=""is_weather_clear""/>
    <Action ID=""proceed_with_operation""/>
    <Control ID=""Fallback""/>
    <Condition ID=""evaluate_weather_severity""/>
    <Action ID=""initiate_emergency_protocol""/>
    <Action ID=""maintain_operational_readiness""/>
    <Action ID=""wait_for_clear_weather""/>
  </TreeNodesModel>
</root>",zero,80.28519558906555,"<BehaviorTree BTCPP_format=""3"" main_tree_to_execute=""WeatherOperation"">
        <Sequence name=""WeatherOperation"">
            <Condition name=""is_weather_clear""/>
            <Action name=""proceed_with_operation""/>
            <Fallback>
                <Condition name=""evaluate_weather_severity""/>
                <Action name=""initiate_emergency_protocol""/>
                <Action name=""wait_for_clear_weather""/>
            </Fallback>
        </Sequence>
        <TreeNodesModel>
            <Condition name=""is_weather_clear""/>
            <Action name=""proceed_with_operation""/>
            <Condition name=""evaluate_weather_severity""/>
            <Action name=""initiate_emergency_protocol""/>
            <Action name=""wait_for_clear_weather""/>
        </TreeNodesModel>
    </BehaviorTree>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_dirty: Condition node: Determine if the current area requires cleaning. Returns SUCCESS if dirty, FAILURE otherwise.; clean_area: Action Node: Perform cleaning operations in the area. Always returns SUCCESS.; move_to_next_area: Action Node: Navigate to the next area designated for cleaning. Always returns SUCCESS.; check_battery: Condition node: Verify if the battery level is sufficient for cleaning tasks. Returns SUCCESS if sufficient, FAILURE otherwise.; recharge_battery: Action Node: Recharge the robot's battery. Always returns SUCCESS.; report_cleaning_status: Action Node: Report the status of cleaning operations. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the area is dirty and battery is sufficient, clean the area; otherwise, recharge the battery"". Structure the behavior tree to handle these conditions appropriately.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""CleaningBehavior"">
  <BehaviorTree ID=""CleaningBehavior"">
    <Sequence name=""Cleaning Sequence"">
      <is_area_dirty/>
      <check_battery/>
      <clean_area/>
    </Sequence>
    <recharge_battery/>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Sequence""/>
    <Condition ID=""is_area_dirty""/>
    <Condition ID=""check_battery""/>
    <Action ID=""clean_area""/>
    <Action ID=""recharge_battery""/>
    <Action ID=""move_to_next_area""/>
    <Action ID=""report_cleaning_status""/>
  </TreeNodesModel>
</root>",zero,92.43690729141235,"<root BTCPP_format=""3"" main_tree_to_execute=""CleaningBehaviorTree"">
        <BehaviorTree name=""CleaningBehaviorTree"">
            <Sequence>
                <Fallback>
                    <Condition behavior=""is_area_dirty""/>
                    <Condition behavior=""check_battery""/>
                </Fallback>
                <Sequence>
                    <Action behavior=""clean_area""/>
                    <Action behavior=""move_to_next_area""/>
                </Sequence>
                <Fallback>
                    <Action behavior=""recharge_battery""/>
                    <Action behavior=""report_cleaning_status""/>
                </Fallback>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition behavior=""is_area_dirty""/>
            <Action behavior=""clean_area""/>
            <Action behavior=""move_to_next_area""/>
            <Condition behavior=""check_battery""/>
            <Action behavior=""recharge_battery""/>
            <Action behavior=""report_cleaning_status""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  `IsBatteryCritical`: Condition node: Check if the battery level is critical. Returns SUCCESS if critical, FAILURE otherwise.;
  `ReturnToBase`: Action Node: Navigate back to the base station. Always returns SUCCESS.;
  `RechargeBattery`: Action Node: Recharge the battery. Always returns SUCCESS.;
  `PerformTask`: Action Node: Execute the assigned task. Always returns SUCCESS.;
  `MonitorBattery`: Condition node: Continuously monitor the battery level. Returns SUCCESS if monitoring is active, RUNNING otherwise.;
  `Parallel`: Control Node: Executes all children simultaneously.
}
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Create a behavior tree where the robot performs its assigned task while continuously monitoring the battery. If the battery becomes critical, it should return to base and recharge before resuming the task.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""TaskWithBatteryMonitoring"">
  <BehaviorTree ID=""TaskWithBatteryMonitoring"">
    <Parallel>
      <PerformTask/>
      <Sequence>
        <MonitorBattery/>
        <Fallback>
          <Sequence>
            <IsBatteryCritical/>
            <ReturnToBase/>
            <RechargeBattery/>
            <PerformTask/>
          </Sequence>
        </Fallback>
      </Sequence>
    </Parallel>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""IsBatteryCritical""/>
    <Condition ID=""MonitorBattery""/>
    <Action ID=""ReturnToBase""/>
    <Action ID=""RechargeBattery""/>
    <Action ID=""PerformTask""/>
    <Control ID=""Parallel""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",zero,75.15859699249268,"<root BTCPP_format=""3"" main_tree_to_execute=""TaskMonitoringTree"">
  <BehaviorTree name=""TaskMonitoringTree"">
    <TreeNodesModel>
      <Condition name=""IsBatteryCritical""/>
      <Action name=""ReturnToBase""/>
      <Action name=""RechargeBattery""/>
      <Action name=""PerformTask""/>
      <Condition name=""MonitorBattery""/>
      <Control name=""Parallel""/>
    </TreeNodesModel>
    <Sequence>
      <MonitorBattery/>
      <Fallback>
        <IsBatteryCritical/>
        <ReturnToBase/>
        <RechargeBattery/>
        <PerformTask/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_light_available: Condition node: Check if there is sufficient lighting in the area. Returns SUCCESS if sufficient, FAILURE otherwise.; turn_on_lights: Action Node: Activate the lighting system. Always returns SUCCESS.; perform_task: Action Node: Execute the designated task in the area. Always returns SUCCESS.; adjust_lighting: Action Node: Modify the lighting to optimal levels. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if light is available then perform the task, else turn on lights and adjust lighting"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""LightingControl"">
  <BehaviorTree ID=""LightingControl"">
    <Fallback name=""Lighting Fallback"">
      <Sequence name=""Light Available Sequence"">
        <is_light_available/>
        <perform_task/>
      </Sequence>
      <Sequence name=""Lighting Adjustment"">
        <turn_on_lights/>
        <adjust_lighting/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_light_available""/>
    <Action ID=""perform_task""/>
    <Action ID=""turn_on_lights""/>
    <Action ID=""adjust_lighting""/>
  </TreeNodesModel>
</root>",zero,73.9812433719635,"<root BTCPP_format=""3"" main_tree_to_execute=""main"">
        <BehaviorTree name=""main"">
            <Fallback>
                <Sequence>
                    <is_light_available/>
                    <perform_task/>
                </Sequence>
                <Sequence>
                    <turn_on_lights/>
                    <adjust_lighting/>
                </Sequence>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_light_available""/>
            <Action name=""turn_on_lights""/>
            <Action name=""perform_task""/>
            <Action name=""adjust_lighting""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  is_patrol_complete: Condition node: Check if the patrol route is complete. Returns SUCCESS if complete, FAILURE otherwise.;
  return_to_base: Action Node: Navigate the robot back to the base. Always returns SUCCESS.;
  initiate_charging: Action Node: Start the charging process. Always returns SUCCESS.;
  is_battery_low: Condition node: Check if the battery level is low. Returns SUCCESS if low, FAILURE otherwise.;
  continue_patrolling: Action Node: Continue patrolling the area. Always returns SUCCESS.;
  send_status_update: Action Node: Send a status update to the control center. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""if patrol is complete then return to base and initiate charging; if battery is low, send status update, otherwise continue patrolling"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""PatrolManagement"">
  <BehaviorTree ID=""PatrolManagement"">
    <Sequence>
      <is_patrol_complete/>
      <Fallback>
        <Sequence>
          <return_to_base/>
          <initiate_charging/>
          <Fallback>
            <Sequence>
              <is_battery_low/>
              <send_status_update/>
            </Sequence>
            <continue_patrolling/>
          </Fallback>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Action ID=""initiate_charging""/>
    <Condition ID=""is_patrol_complete""/>
    <Condition ID=""is_battery_low""/>
    <Action ID=""return_to_base""/>
    <Action ID=""send_status_update""/>
    <Action ID=""continue_patrolling""/>
  </TreeNodesModel>
</root>",zero,74.57071900367737,"<root BTCPP_format=""3"" main_tree_to_execute=""PatrolBehaviorTree"">
      <BehaviorTree name=""PatrolBehaviorTree"">
        <TreeNodesModel>
          <Sequence name=""PatrolSequence"">
            <Condition name=""IsPatrolComplete""/>
            <Fallback name=""ReturnAndCharge"">
              <Action name=""ReturnToBase""/>
              <Action name=""InitiateCharging""/>
            </Fallback>
          </Sequence>
          <Sequence name=""BatteryCheck"">
            <Condition name=""IsBatteryLow""/>
            <Action name=""SendStatusUpdate""/>
          </Sequence>
          <Action name=""ContinuePatrolling""/>
        </TreeNodesModel>
      </BehaviorTree>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  `is_delivery_available`: Condition node: Check if a delivery task is available. Returns SUCCESS if available, FAILURE otherwise.;
  `accept_delivery`: Action Node: Accept the delivery task. Always returns SUCCESS.;
  `navigate_to_destination`: Action Node: Navigate to the delivery destination. Always returns SUCCESS.;
  `deliver_package`: Action Node: Deliver the package. Always returns SUCCESS.;
  `is_destination_reachable`: Condition node: Check if the destination is reachable. Returns SUCCESS if reachable, FAILURE otherwise.;
  `report_failure`: Action Node: Report delivery failure. Always returns SUCCESS.;
  `idle`: Action Node: Remain idle awaiting tasks. Always returns SUCCESS.;
}
to construct a behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if a delivery is available then accept it and check if destination is reachable; if reachable, navigate and deliver the package; otherwise, report failure; else remain idle"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""DeliveryTask"">
  <BehaviorTree ID=""DeliveryTask"">
    <Fallback name=""Delivery Fallback"">
      <Sequence name=""Handle Delivery"">
        <is_delivery_available/>
        <accept_delivery/>
        <Fallback name=""Destination Check"">
          <Sequence name=""Reachable Destination"">
            <is_destination_reachable/>
            <navigate_to_destination/>
            <deliver_package/>
          </Sequence>
          <report_failure/>
        </Fallback>
      </Sequence>
      <idle/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Sequence ID=""Handle Delivery""/>
    <Fallback ID=""Destination Check""/>
    <Sequence ID=""Reachable Destination""/>
    <Condition ID=""is_delivery_available""/>
    <Condition ID=""is_destination_reachable""/>
    <Action ID=""accept_delivery""/>
    <Action ID=""navigate_to_destination""/>
    <Action ID=""deliver_package""/>
    <Action ID=""report_failure""/>
    <Action ID=""idle""/>
  </TreeNodesModel>
</root>",zero,91.04617047309875,"<root BTCPP_format=""3"" main_tree_to_execute=""main_behavior"">
        <BehaviorTree name=""main_behavior"">
            <Fallback>
                <Sequence>
                    <is_delivery_available/>
                    <accept_delivery/>
                    <Fallback>
                        <is_destination_reachable/>
                        <navigate_to_destination/>
                        <deliver_package/>
                        <report_failure/>
                    </Fallback>
                </Sequence>
                <idle/>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_delivery_available""/>
            <Action name=""accept_delivery""/>
            <Condition name=""is_destination_reachable""/>
            <Action name=""navigate_to_destination""/>
            <Action name=""deliver_package""/>
            <Action name=""report_failure""/>
            <Action name=""idle""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_energy_full: Condition node: Check if the energy level is full. Returns SUCCESS if full, FAILURE otherwise.; recharge_energy: Action Node: Initiate energy recharging process. Always returns SUCCESS.; perform_task: Action Node: Execute the designated task. Always returns SUCCESS.; monitor_energy: Action Node: Continuously monitor energy levels. Always returns SUCCESS.; notify_manager: Action Node: Notify the manager about energy status. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if energy is not full, recharge energy and notify the manager; otherwise, perform the task"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EnergyManagement"">
  <BehaviorTree ID=""EnergyManagement"">
    <Fallback name=""Energy Fallback"">
      <Sequence name=""Recharge and Notify"">
        <is_energy_full/>
        <perform_task/>
      </Sequence>
      <Sequence name=""Handle Low Energy"">
        <monitor_energy/>
        <recharge_energy/>
        <notify_manager/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_energy_full""/>
    <Action ID=""perform_task""/>
    <Action ID=""monitor_energy""/>
    <Action ID=""recharge_energy""/>
    <Action ID=""notify_manager""/>
  </TreeNodesModel>
</root>",zero,76.55772042274475,"<root BTCPP_format=""3"" main_tree_to_execute=""EnergyManagementTree"">
        <BehaviorTree name=""EnergyManagementTree"">
            <Fallback>
                <Sequence>
                    <Condition behavior=""is_energy_full""/>
                    <Action behavior=""perform_task""/>
                </Sequence>
                <Sequence>
                    <Condition behavior=""is_energy_full""/>
                    <Action behavior=""recharge_energy""/>
                    <Action behavior=""notify_manager""/>
                </Sequence>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition behavior=""is_energy_full""/>
            <Action behavior=""perform_task""/>
            <Action behavior=""recharge_energy""/>
            <Action behavior=""notify_manager""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_charge_needed: Condition node: Check if the robot needs to charge. Returns SUCCESS if charging is needed, FAILURE otherwise.; navigate_to_charging_station: Action Node: Move the robot to the charging station. Always returns SUCCESS.; start_charging: Action Node: Begin the charging process. Always returns SUCCESS.; monitor_battery: Condition node: Continuously monitor the battery level. Returns SUCCESS if sufficient, FAILURE otherwise.; perform_task: Action Node: Execute the primary task. Always returns SUCCESS.; notify_low_battery: Action Node: Send a low battery notification. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""monitor the battery level continuously, perform tasks when battery is sufficient, and if charging is needed, navigate to the charging station and start charging"". Ensure the robot prioritizes charging when necessary.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Fallback name=""Battery Fallback"">
      <Sequence name=""Charging Sequence"">
        <is_charge_needed/>
        <notify_low_battery/>
        <navigate_to_charging_station/>
        <start_charging/>
      </Sequence>
      <Sequence name=""Task Execution"">
        <monitor_battery/>
        <perform_task/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_charge_needed""/>
    <Action ID=""navigate_to_charging_station""/>
    <Action ID=""start_charging""/>
    <Condition ID=""monitor_battery""/>
    <Action ID=""perform_task""/>
    <Action ID=""notify_low_battery""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence""/>
  </TreeNodesModel>
</root>",zero,74.437344789505,"<root BTCPP_format=""3"" main_tree_to_execute=""main"">
        <BehaviorTree name=""main"">
            <Fallback>
                <Sequence>
                    <monitor_battery/>
                    <perform_task/>
                </Sequence>
                <Sequence>
                    <is_charge_needed/>
                    <navigate_to_charging_station/>
                    <start_charging/>
                </Sequence>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_charge_needed""/>
            <Action name=""navigate_to_charging_station""/>
            <Action name=""start_charging""/>
            <Condition name=""monitor_battery""/>
            <Action name=""perform_task""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_temperature_high: Condition node: Check if the environment temperature is above the safe limit. Returns SUCCESS if high, FAILURE otherwise.;  
activate_cooling_system: Action Node: Turn on the cooling system. Always returns SUCCESS.;  
is_fire_detected: Condition node: Detect the presence of fire. Returns SUCCESS if detected, FAILURE otherwise.;  
call_fire_fighters: Action Node: Notify fire fighters. Always returns SUCCESS.;  
monitor_environment: Action Node: Continuously monitor environmental conditions. Always returns SUCCESS.;  
shutdown_systems: Action Node: Safely shutdown all systems. Always returns SUCCESS.;  
}

To construct a behavior tree in XML format for the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if temperature is high then activate cooling system; if fire is detected, call fire fighters and shutdown systems; otherwise, continue monitoring the environment.""","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EmergencyResponse"">
  <BehaviorTree ID=""EmergencyResponse"">
    <Fallback name=""Main Fallback"">
      <Sequence name=""High Temperature Sequence"">
        <is_temperature_high/>
        <activate_cooling_system/>
      </Sequence>
      <Sequence name=""Fire Detection Sequence"">
        <is_fire_detected/>
        <call_fire_fighters/>
        <shutdown_systems/>
      </Sequence>
      <monitor_environment/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_temperature_high""/>
    <Action ID=""activate_cooling_system""/>
    <Condition ID=""is_fire_detected""/>
    <Action ID=""call_fire_fighters""/>
    <Action ID=""shutdown_systems""/>
    <Action ID=""monitor_environment""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence""/>
  </TreeNodesModel>
</root>",zero,76.37964510917664,"<root BTCPP_format=""3"" main_tree_to_execute=""main"">
  <BehaviorTree name=""main"">
    <Fallback>
      <Sequence>
        <is_temperature_high/>
        <activate_cooling_system/>
      </Sequence>
      <Sequence>
        <is_fire_detected/>
        <call_fire_fighters/>
        <shutdown_systems/>
      </Sequence>
      <monitor_environment/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition name=""is_temperature_high""/>
    <Action name=""activate_cooling_system""/>
    <Condition name=""is_fire_detected""/>
    <Action name=""call_fire_fighters""/>
    <Action name=""shutdown_systems""/>
    <Action name=""monitor_environment""/>
  </TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  survey_area: Action Node: Survey the designated area. Always returns SUCCESS.;
  take_picture: Action Node: Capture an image of the area. Always returns SUCCESS.;
  return_home: Action Node: Return to the home base. Always returns SUCCESS
}
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""survey an area, take a picture, and then return home"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""DroneSurvey"">
  <BehaviorTree ID=""DroneSurvey"">
    <Sequence name=""Mission Sequence"">
      <survey_area/>
      <take_picture/>
      <return_home/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID=""return_home""/>
    <Action ID=""survey_area""/>
    <Action ID=""take_picture""/>
  </TreeNodesModel>
</root>",zero,49.38087844848633,"<?xml version=""1.0"" encoding=""UTF-8""?>
<BehaviorTree main_tree_to_execute=""SurveyAndReturn"">
  <TreeNodesModel>
    <Condition name=""IsAreaSurveyed""/>
    <Action name=""survey_area""/>
    <Action name=""take_picture""/>
    <Action name=""return_home""/>
  </TreeNodesModel>
  <Sequence name=""SurveyAndReturn"">
    <survey_area/>
    <take_picture/>
    <return_home/>
  </Sequence>
</BehaviorTree>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{is_humidity_high: Condition node: Check if humidity level is high. Returns SUCCESS if high, FAILURE otherwise.;
activate_dehumidifier: Action Node: Turn on the dehumidifier. Always returns SUCCESS.;
deactivate_dehumidifier: Action Node: Turn off the dehumidifier. Always returns SUCCESS.;
monitor_conditions: Action Node: Continuously monitor environmental conditions. Always returns SUCCESS.}

To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""if humidity is high, activate dehumidifier, else deactivate it while monitoring conditions"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""HumidityControl"">
  <BehaviorTree ID=""HumidityControl"">
    <Sequence name=""Main Sequence"">
      <Fallback name=""Humidity Check"">
        <is_humidity_high/>
        <activate_dehumidifier/>
      </Fallback>
      <deactivate_dehumidifier/>
      <monitor_conditions/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_humidity_high""/>
    <Action ID=""activate_dehumidifier""/>
    <Action ID=""deactivate_dehumidifier""/>
    <Action ID=""monitor_conditions""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",zero,69.61888885498047,"<root BTCPP_format=""3"" main_tree_to_execute=""HumidityControl"">
        <BehaviorTree name=""HumidityControl"">
            <Sequence>
                <Fallback>
                    <Condition behavior=""is_humidity_high""/>
                    <Fallback>
                        <Action behavior=""deactivate_dehumidifier""/>
                        <Monitor behavior=""monitor_conditions""/>
                    </Fallback>
                </Fallback>
                <Action behavior=""activate_dehumidifier""/>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition behavior=""is_humidity_high""/>
            <Action behavior=""activate_dehumidifier""/>
            <Action behavior=""deactivate_dehumidifier""/>
            <Monitor behavior=""monitor_conditions""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_item_available: Condition node: Check if the target item is available for collection. Returns SUCCESS if available, FAILURE otherwise.; collect_item: Action Node: Collect the available item. Always returns SUCCESS.; search_for_item: Action Node: Search the environment for the item. Always returns SUCCESS; store_item: Action Node: Store the collected item in the inventory. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""if the target item is available then collect and store it, otherwise search for the item"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behaviors you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ItemCollection"">
  <BehaviorTree ID=""ItemCollection"">
    <Fallback name=""Item Availability Fallback"">
      <Sequence name=""Collect Sequence"">
        <is_item_available/>
        <collect_item/>
        <store_item/>
      </Sequence>
      <search_for_item/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_item_available""/>
    <Action ID=""collect_item""/>
    <Action ID=""store_item""/>
    <Action ID=""search_for_item""/>
  </TreeNodesModel>
</root>",zero,61.87456035614014,"<root BTCPP_format=""3"" main_tree_to_execute=""main"">
    <BehaviorTree name=""main"">
        <Fallback>
            <Sequence>
                <is_item_available/>
                <collect_item/>
                <store_item/>
            </Sequence>
            <search_for_item/>
        </Fallback>
    </BehaviorTree>
    <TreeNodesModel>
        <Condition name=""is_item_available""/>
        <Action name=""collect_item""/>
        <Action name=""search_for_item""/>
        <Action name=""store_item""/>
    </TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_intrusion_detected: Condition node: Check if an intrusion is detected. Returns SUCCESS if detected, FAILURE otherwise.; patrol_route: Action Node: Follow the designated patrol route. Always returns SUCCESS.; report_intrusion: Action Node: Send an intrusion alert to the base. Always returns SUCCESS.; update_patrol_status: Action Node: Update the patrol status in the system. Always returns SUCCESS.; idle: Action Node: Remain stationary and monitor the environment. Always returns SUCCESS.; return_to_base: Action Node: Navigate back to the base station. Always returns SUCCESS.; } To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""Patrol the perimeter and report any intrusion"". Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""PerimeterPatrol"">
  <BehaviorTree ID=""PerimeterPatrol"">
    <Fallback name=""Intrusion Handler"">
      <Sequence name=""Intrusion Detection and Reporting"">
        <is_intrusion_detected/>
        <report_intrusion/>
        <update_patrol_status/>
      </Sequence>
      <patrol_route/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_intrusion_detected""/>
    <Action ID=""report_intrusion""/>
    <Action ID=""update_patrol_status""/>
    <Action ID=""patrol_route""/>
    <Action ID=""idle""/>
    <Action ID=""return_to_base""/>
  </TreeNodesModel>
</root>",zero,72.46715211868286,"<root BTCPP_format=""3"">
            <Sequence name=""PatrolAndReport"">
                <Fallback name=""Patrol"">
                    <Sequence>
                        <patrol_route/>
                        <idle/>
                    </Sequence>
                    <return_to_base/>
                </Fallback>
                <report_intrusion/>
            </Sequence>
        </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","Use only the following behaviors structured as a dictionary: {MonitorTemperature: Condition Node: Check if the temperature is within acceptable limits. Returns SUCCESS if normal, FAILURE otherwise.; ActivateCoolingSystem: Action Node: Turn on the cooling system. Always returns SUCCESS.; DeactivateCoolingSystem: Action Node: Turn off the cooling system. Always returns SUCCESS.; LogTemperature: Action Node: Log the current temperature reading. Always returns SUCCESS.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.; SubTree: Special Node: Execute a referenced BehaviorTree as a subtree}. Including any behavior not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""continuously monitor temperature, activate cooling if high, log the temperature, and ensure the cooling system is deactivated when temperature is normal.""","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""TemperatureControl"">
  <BehaviorTree ID=""ActivateCooling"">
    <Sequence>
      <ActivateCoolingSystem/>
      <LogTemperature message=""Cooling system activated due to high temperature.""/>
    </Sequence>
  </BehaviorTree>
  <BehaviorTree ID=""DeactivateCooling"">
    <Sequence>
      <DeactivateCoolingSystem/>
      <LogTemperature message=""Cooling system deactivated as temperature is normal.""/>
    </Sequence>
  </BehaviorTree>
  <BehaviorTree ID=""TemperatureControl"">
    <Sequence>
      <MonitorTemperature/>
      <Fallback>
        <SubTree ID=""ActivateCooling""/>
        <SubTree ID=""DeactivateCooling""/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""MonitorTemperature""/>
    <Action ID=""ActivateCoolingSystem""/>
    <Action ID=""DeactivateCoolingSystem""/>
    <Action ID=""LogTemperature"" editable=""true"">
      <input_port name=""message""/>
    </Action>
  </TreeNodesModel>
</root>",zero,68.18609762191772,"<root BTCPP_format=""3"" main_tree_to_execute=""TemperatureControl"">
        <BehaviorTree name=""TemperatureControl"">
            <Sequence>
                <MonitorTemperature/>
                <Fallback>
                    <ActivateCoolingSystem/>
                    <ForceSuccess/>
                </Fallback>
                <LogTemperature/>
                <DeactivateCoolingSystem/>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition Node name=""MonitorTemperature""/>
            <Action Node name=""ActivateCoolingSystem""/>
            <Action Node name=""LogTemperature""/>
            <Action Node name=""DeactivateCoolingSystem""/>
            <Decorator Node name=""ForceSuccess""/>
            <SubTree Node name=""SubTree""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the robot's battery is low. Returns SUCCESS if low, FAILURE otherwise.; navigate_to_charging_station: Action Node: Navigate to the charging station. Always returns SUCCESS.; charge_battery: Action Node: Begin charging the battery. Always returns SUCCESS.; monitor_battery: Condition node: Continuously monitor the battery status. Returns SUCCESS while charging, FAILURE when fully charged.; resume_tasks: Action Node: Resume previous tasks after charging. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the battery is low, navigate to the charging station and begin charging; monitor the battery, and once fully charged, resume previous tasks"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Sequence>
      <is_battery_low/>
      <Fallback>
        <Sequence>
          <navigate_to_charging_station/>
          <charge_battery/>
          <monitor_battery/>
          <resume_tasks/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_battery_low""/>
    <Control ID=""Fallback""/>
    <Action ID=""navigate_to_charging_station""/>
    <Action ID=""charge_battery""/>
    <Condition ID=""monitor_battery""/>
    <Action ID=""resume_tasks""/>
  </TreeNodesModel>
</root>",zero,73.03303098678589,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
        <BehaviorTree name=""BatteryManagement"">
            <Fallback>
                <Sequence>
                    <is_battery_low/>
                    <navigate_to_charging_station/>
                    <charge_battery/>
                </Sequence>
                <monitor_battery/>
                <resume_tasks/>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_battery_low""/>
            <Action name=""navigate_to_charging_station""/>
            <Action name=""charge_battery""/>
            <Condition name=""monitor_battery""/>
            <Action name=""resume_tasks""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_obstacle: Condition node: Check if an obstacle is detected. Returns SUCCESS if detected, FAILURE otherwise.; avoid_obstacle: Action Node: Maneuver to avoid the detected obstacle. Always returns SUCCESS.; proceed_forward: Action Node: Move forward towards the goal. Always returns SUCCESS.; scan_area: Action Node: Perform a 360-degree scan of the surroundings. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if an obstacle is detected then avoid it and proceed forward, otherwise scan the area"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">
  <BehaviorTree ID=""ObstacleAvoidance"">
    <Fallback name=""Obstacle Fallback"">
      <Sequence name=""Navigate Path"">
        <detect_obstacle/>
        <avoid_obstacle maneuver=""""/>
        <proceed_forward speed=""""/>
      </Sequence>
      <scan_area/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""detect_obstacle""/>
    <Action ID=""avoid_obstacle"" editable=""true"">
      <input_port name=""maneuver""/>
    </Action>
    <Action ID=""proceed_forward"" editable=""true"">
      <input_port name=""speed""/>
    </Action>
    <Action ID=""scan_area""/>
  </TreeNodesModel>
</root>",zero,60.48477554321289,"<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">
        <BehaviorTree name=""ObstacleAvoidance"">
            <Fallback>
                <Sequence>
                    <detect_obstacle/>
                    <avoid_obstacle/>
                    <proceed_forward/>
                </Sequence>
                <scan_area/>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition detect_obstacle/>
            <Action avoid_obstacle/>
            <Action proceed_forward/>
            <Action scan_area/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {
  is_object_collected: Condition node: Check if the object has been collected. Returns SUCCESS if collected, FAILURE otherwise.;
  move_to_object: Action Node: Move to the object's location. Always returns SUCCESS.;
  collect_object: Action Node: Collect the object. Always returns SUCCESS.;
  report_status: Action Node: Report the current status. Always returns SUCCESS.;
  Sequence: Control Node: Executes its children in order.
  Fallback: Control Node: Selects the first child that returns SUCCESS.
}. 
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the object is not collected, move to the object and collect it; then report status"". Ensure proper use of Sequence and Fallback nodes.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObjectCollection"">
  <BehaviorTree ID=""ObjectCollection"">
    <Sequence name=""Collection Sequence"">
      <Fallback name=""Check and Collect"">
        <is_object_collected/>
        <Sequence>
          <move_to_object/>
          <collect_object/>
        </Sequence>
      </Fallback>
      <report_status/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_object_collected""/>
    <Action ID=""move_to_object""/>
    <Action ID=""collect_object""/>
    <Action ID=""report_status""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",zero,68.56843042373657,"<root BTCPP_format=""3"" main_tree_to_execute=""ObjectCollectionTree"">
    <BehaviorTree name=""ObjectCollectionTree"">
    <TreeNodesModel>
    <Condition name=""is_object_collected""/>
    <Action name=""move_to_object""/>
    <Action name=""collect_object""/>
    <Action name=""report_status""/>
    </TreeNodesModel>
    <Sequence name=""CollectionSequence"">
    <Fallback>
    <Condition ref=""is_object_collected""/>
    <Sequence>
    <Action ref=""move_to_object""/>
    <Action ref=""collect_object""/>
    <Action ref=""report_status""/>
    </Sequence>
    </Fallback>
    </Sequence>
    </BehaviorTree>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_obstacle: Condition node: Check for obstacles in the path. Returns SUCCESS if obstacle detected, FAILURE otherwise.; avoid_obstacle: Action Node: Maneuver to avoid the detected obstacle. Always returns SUCCESS.; follow_path: Action Node: Follow the predefined path. Always returns SUCCESS.; report_status: Action Node: Report current status to the control center. Always returns SUCCESS.; wait_for_command: Action Node: Wait for further instructions. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""continuously follow the path; if an obstacle is detected, avoid it and report the status; otherwise wait for the next command."" Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""PathFollowing"">
  <BehaviorTree ID=""PathFollowing"">
    <Sequence>
      <follow_path/>
      <Fallback>
        <Sequence>
          <detect_obstacle/>
          <avoid_obstacle/>
          <report_status/>
        </Sequence>
        <wait_for_command/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""detect_obstacle""/>
    <Action ID=""avoid_obstacle""/>
    <Action ID=""follow_path""/>
    <Action ID=""report_status""/>
    <Action ID=""wait_for_command""/>
  </TreeNodesModel>
</root>",zero,71.94076776504517,"<root BTCPP_format=""3"" main_tree_to_execute=""main"">
        <BehaviorTree name=""main"">
            <Sequence name=""main_sequence"">
                <Fallback name=""follow_path_fallback"">
                    <detect_obstacle/>
                    <follow_path/>
                </Fallback>
                <avoid_obstacle/>
                <report_status/>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""detect_obstacle""/>
            <Action name=""avoid_obstacle""/>
            <Action name=""follow_path""/>
            <Action name=""report_status""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_illuminated: Condition node: Check if the operational area is sufficiently illuminated. Returns SUCCESS if illuminated, FAILURE otherwise.; activate_lights: Action Node: Turn on additional lights. Always returns SUCCESS.; begin_operation: Action Node: Start the main operational tasks. Always returns SUCCESS.; halt_operations: Action Node: Stop all operational activities. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the area is illuminated, begin operation; otherwise, activate additional lights and halt operations"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""IlluminationControl"">
  <BehaviorTree ID=""IlluminationControl"">
    <Fallback name=""Illumination Check"">
      <Sequence name=""Operate Area"">
        <is_area_illuminated/>
        <begin_operation/>
      </Sequence>
      <Sequence name=""Light Adjustment and Halt"">
        <activate_lights/>
        <halt_operations/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_area_illuminated""/>
    <Action ID=""activate_lights""/>
    <Action ID=""begin_operation""/>
    <Action ID=""halt_operations""/>
  </TreeNodesModel>
</root>",zero,66.64294600486755,"<root BTCPP_format=""3"" main_tree_to_execute=""main_tree"">
        <BehaviorTree name=""main_tree"">
            <Fallback>
                <Sequence>
                    <is_area_illuminated/>
                    <begin_operation/>
                </Sequence>
                <Sequence>
                    <activate_lights/>
                    <halt_operations/>
                </Sequence>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_area_illuminated""/>
            <Action name=""activate_lights""/>
            <Action name=""begin_operation""/>
            <Action name=""halt_operations""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  BatteryLow: Condition node: Check if the battery level is below a threshold. Returns SUCCESS if low, FAILURE otherwise.; 
  ReturnToBase: Action Node: Navigate the agent back to the base station. Always returns SUCCESS.; 
  ChargeBattery: Action Node: Begin charging the battery. Always returns SUCCESS.; 
  NotifyOperator: Action Node: Send a notification to the operator. Always returns SUCCESS.; 
  Wait: Action Node: Pause for a specified duration. Always returns SUCCESS.; 
  Sequence: Control Node: Executes child nodes in sequence.;
  Fallback: Control Node: Executes child nodes until one succeeds.
}. 
To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if battery is low, then return to base and charge; if charging is successful, notify the operator, otherwise wait"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Sequence>
      <BatteryLow/>
      <Fallback>
        <Sequence>
          <ReturnToBase/>
          <ChargeBattery/>
          <NotifyOperator/>
        </Sequence>
        <Wait/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""BatteryLow""/>
    <Action ID=""ReturnToBase""/>
    <Action ID=""ChargeBattery""/>
    <Action ID=""NotifyOperator""/>
    <Action ID=""Wait""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",zero,87.64070987701416,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryLowSequence"">
        <BehaviorTree>
            <TreeNodesModel>
                <Fallback name=""BatteryLowSequence""/>
                <Sequence name=""ReturnToBaseAndCharge""/>
                <Sequence name=""NotifyOperatorAndWait""/>
                <Condition name=""BatteryLow""/>
                <Action name=""ReturnToBase""/>
                <Action name=""ChargeBattery""/>
                <Action name=""NotifyOperator""/>
                <Action name=""Wait""/>
            </TreeNodesModel>
            <Fallback name=""BatteryLowSequence"">
                <Sequence name=""ReturnToBaseAndCharge"">
                    <Condition name=""BatteryLow""/>
                    <Action name=""ReturnToBase""/>
                    <Action name=""ChargeBattery""/>
                </Sequence>
                <Sequence name=""NotifyOperatorAndWait"">
                    <Action name=""NotifyOperator""/>
                    <Action name=""Wait""/>
                </Sequence>
            </Fallback>
        </BehaviorTree>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below the threshold. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the robot back to the charging station. Always returns SUCCESS.; charge_battery: Action Node: Charge the robot's battery. Always returns SUCCESS.; continue_task: Action Node: Continue performing the current task. Always returns SUCCESS.; notify_operator: Action Node: Send a notification to the operator about the low battery status. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the battery is low then return to base and charge; otherwise, continue the current task and notify the operator if battery becomes low during the task"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Sequence>
      <Fallback>
        <Sequence>
          <is_battery_low/>
          <Sequence>
            <return_to_base/>
            <charge_battery/>
          </Sequence>
        </Sequence>
        <Sequence>
          <continue_task/>
          <Fallback>
            <is_battery_low/>
            <notify_operator/>
          </Fallback>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
    <Condition ID=""is_battery_low""/>
    <Action ID=""return_to_base""/>
    <Action ID=""charge_battery""/>
    <Action ID=""continue_task""/>
    <Action ID=""notify_operator""/>
  </TreeNodesModel>
</root>",zero,76.76765823364258,"<root BTCPP_format=""3"" main_tree_to_execute=""main"">
        <BehaviorTree name=""main"">
            <Fallback>
                <Sequence>
                    <is_battery_low/>
                    <return_to_base/>
                    <charge_battery/>
                </Sequence>
                <Sequence>
                    <continue_task/>
                    <is_battery_low/>
                    <notify_operator/>
                </Sequence>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""is_battery_low""/>
            <Action name=""return_to_base""/>
            <Action name=""charge_battery""/>
            <Action name=""continue_task""/>
            <Action name=""notify_operator""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_resource_available: Condition node: Check if the desired resource is available. Returns SUCCESS if available, FAILURE otherwise.;  
collect_resource: Action Node: Collect the available resource. Always returns SUCCESS.;  
notify_teammates: Action Node: Send a notification to team members about resource status. Always returns SUCCESS.;  
search_alternate_source: Action Node: Search for an alternate resource source. Always returns SUCCESS.;  
}.  
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if the resource is available, collect it and notify teammates; otherwise, search for an alternate source"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
  <BehaviorTree ID=""ResourceCollection"">
    <Fallback>
      <Sequence>
        <is_resource_available/>
        <Sequence>
          <collect_resource/>
          <notify_teammates/>
        </Sequence>
      </Sequence>
      <search_alternate_source/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_resource_available""/>
    <Action ID=""collect_resource""/>
    <Action ID=""notify_teammates""/>
    <Action ID=""search_alternate_source""/>
  </TreeNodesModel>
</root>",zero,64.74733996391296,"<root BTCPP_format=""3"" main_tree_to_execute=""ResourceManagement"">
  <BehaviorTree name=""ResourceManagement"">
    <Fallback>
      <Sequence>
        <is_resource_available/>
        <collect_resource/>
        <notify_teammates/>
      </Sequence>
      <search_alternate_source/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition name=""is_resource_available""/>
    <Action name=""collect_resource""/>
    <Action name=""notify_teammates""/>
    <Action name=""search_alternate_source""/>
  </TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {MoveForward: Action Node: Move the robot forward. Always returns SUCCESS.; TurnLeft: Action Node: Turn the robot to the left. Always returns SUCCESS.; CheckBattery: Condition Node: Check if the battery level is above a threshold. Returns SUCCESS if true, FAILURE otherwise.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""check the battery level, if sufficient move forward three times, then turn left"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryCheckTree"">
  <BehaviorTree ID=""BatteryCheckTree"">
    <Sequence>
      <CheckBattery threshold=""50%""/>
      <Sequence>
        <MoveForward times=""3""/>
        <TurnLeft/>
      </Sequence>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID=""MoveForward"" editable=""true"">
      <input_port name=""times""/>
    </Action>
    <Action ID=""TurnLeft""/>
    <Condition ID=""CheckBattery"" editable=""true"">
      <input_port name=""threshold""/>
    </Condition>
  </TreeNodesModel>
</root>",zero,58.28468704223633,"<root BTCPP_format=""3"" main_tree_to_execute=""MainBehaviorTree"">
        <BehaviorTree name=""MainBehaviorTree"">
            <Sequence>
                <CheckBattery>
                    <Fallback>
                        <MoveForward/>
                        <MoveForward/>
                        <MoveForward/>
                    </Fallback>
                </CheckBattery>
                <TurnLeft/>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition Node=""CheckBattery""/>
            <Action Node=""MoveForward""/>
            <Action Node=""TurnLeft""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_energy_full: Condition node: Check if energy is full. Returns SUCCESS if full, FAILURE otherwise.; is_charge_needed: Condition node: Check if charging is needed. Returns SUCCESS if needed, FAILURE otherwise.; move_to_charge_station: Action Node: Move to the charging station. Always returns SUCCESS.; start_charging: Action Node: Begin charging. Always returns SUCCESS.; monitor_energy: Action Node: Monitor energy levels. Always returns SUCCESS.; resume_operations: Action Node: Resume normal operations. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""if energy is full, monitor energy; if charging is needed, move to charge station and start charging; otherwise, resume operations."" Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EnergyManagement"">
  <BehaviorTree ID=""EnergyManagement"">
    <Fallback>
      <Sequence name=""Energy Full"">
        <is_energy_full/>
        <monitor_energy/>
      </Sequence>
      <Sequence name=""Charging Needed"">
        <is_charge_needed/>
        <move_to_charge_station/>
        <start_charging/>
      </Sequence>
      <resume_operations/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_energy_full""/>
    <Condition ID=""is_charge_needed""/>
    <Action ID=""move_to_charge_station""/>
    <Action ID=""start_charging""/>
    <Action ID=""monitor_energy""/>
    <Action ID=""resume_operations""/>
  </TreeNodesModel>
</root>",zero,92.71923446655273,"<?xml version=""1.0"" encoding=""UTF-8""?>
    <BehaviorTree main_tree_to_execute=""EnergyManagement"">
        <Sequence name=""EnergyManagement"">
            <Fallback name=""CheckEnergyStatus"">
                <Condition name=""is_energy_full""/>
                <Condition name=""is_charge_needed""/>
            </Fallback>
            <Sequence name=""EnergyActions"">
                <Action name=""monitor_energy""/>
                <Fallback name=""ChargeAndResume"">
                    <Sequence name=""MoveAndCharge"">
                        <Action name=""move_to_charge_station""/>
                        <Action name=""start_charging""/>
                    </Sequence>
                    <Action name=""resume_operations""/>
                </Fallback>
            </Sequence>
        </Sequence>
    </BehaviorTree>
    <TreeNodesModel>
        <Condition name=""is_energy_full""/>
        <Condition name=""is_charge_needed""/>
        <Action name=""monitor_energy""/>
        <Action name=""move_to_charge_station""/>
        <Action name=""start_charging""/>
        <Action name=""resume_operations""/>
    </TreeNodesModel>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {IsEnemyVisible: Condition node: Check if an enemy is currently visible. Returns SUCCESS if visible, FAILURE otherwise.; MoveToEnemy: Action Node: Navigate towards the detected enemy. Always returns SUCCESS.; AttackEnemy: Action Node: Engage and attack the enemy. Always returns SUCCESS.; Evade: Action Node: Perform evasive maneuvers. Always returns SUCCESS.; PatrolArea: Action Node: Continue patrolling the designated area. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if an enemy is visible, move to the enemy and attack; if no enemy is visible, evade and continue patrolling"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EnemyEngagement"">
  <BehaviorTree ID=""EnemyEngagement"">
    <Fallback>
      <Sequence>
        <IsEnemyVisible/>
        <Sequence>
          <MoveToEnemy/>
          <AttackEnemy/>
        </Sequence>
      </Sequence>
      <Sequence>
        <Evade/>
        <PatrolArea/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""IsEnemyVisible""/>
    <Action ID=""MoveToEnemy""/>
    <Action ID=""AttackEnemy""/>
    <Action ID=""Evade""/>
    <Action ID=""PatrolArea""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence""/>
  </TreeNodesModel>
</root>",zero,68.1813895702362,"<root BTCPP_format=""3"" main_tree_to_execute=""EnemyBehavior"">
        <BehaviorTree name=""EnemyBehavior"">
            <Fallback>
                <Sequence>
                    <IsEnemyVisible/>
                    <MoveToEnemy/>
                    <AttackEnemy/>
                </Sequence>
                <Sequence>
                    <Evade/>
                    <PatrolArea/>
                </Sequence>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""IsEnemyVisible""/>
            <Action name=""MoveToEnemy""/>
            <Action name=""AttackEnemy""/>
            <Action name=""Evade""/>
            <Action name=""PatrolArea""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","Use only the following behaviors structured as a dictionary: {DetectIntruder: Condition node: Detects presence of an intruder. Returns SUCCESS if detected, FAILURE otherwise.; SoundAlarm: Action Node: Sounds an alarm to alert the area. Always returns SUCCESS.; CallSecurity: Action Node: Initiates a call to security personnel. Always returns SUCCESS.; PatrolArea: Action Node: Begins or continues patrolling the area. Always returns SUCCESS.}. Including any behavior not in this dictionary will result in failure, so avoid using them.","generate behavior tree to ""continuously patrol the area, but if an intruder is detected, sound the alarm and call security"". Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""SecurityPatrol"">
  <BehaviorTree ID=""SecurityPatrol"">
    <Fallback>
      <Sequence>
        <DetectIntruder/>
        <SoundAlarm/>
        <CallSecurity/>
      </Sequence>
      <PatrolArea/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""DetectIntruder""/>
    <Action ID=""SoundAlarm""/>
    <Action ID=""CallSecurity""/>
    <Action ID=""PatrolArea""/>
  </TreeNodesModel>
</root>",zero,72.12376022338867,"<root BTCPP_format=""3"">
            <Fallback name=""PatrolAndAlert"">
                <Sequence name=""ContinuousPatrol"">
                    <PatrolArea/>
                </Sequence>
                <Condition name=""DetectIntruder"">
                    <DetectIntruder/>
                </Condition>
                <Fallback>
                    <SoundAlarm/>
                    <CallSecurity/>
                </Fallback>
            </Fallback>
        </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:  
{
  `is_intruder_detected`: Condition node: Check if an intruder is present. Returns SUCCESS if detected, FAILURE otherwise.;  
  `lock_doors`: Action Node: Secure all entry points by locking doors. Always returns SUCCESS.;  
  `maintain_patrol`: Action Node: Continue patrolling the area. Always returns SUCCESS.
}.  
To construct a behavior tree in XML format for the following command, including any behavior outside the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if an intruder is detected then lock the doors, otherwise maintain patrol"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""SecurityProtocol"">
  <BehaviorTree ID=""SecurityProtocol"">
    <Fallback name=""Security Fallback"">
      <Sequence name=""Intrusion Sequence"">
        <is_intruder_detected/>
        <lock_doors/>
      </Sequence>
      <maintain_patrol/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Action ID=""lock_doors""/>
    <Action ID=""maintain_patrol""/>
    <Condition ID=""is_intruder_detected""/>
  </TreeNodesModel>
</root>",zero,68.76712679862976,"<root BTCPP_format=""3"" main_tree_to_execute=""IntruderResponse"">
        <BehaviorTree>
            <Sequence name=""IntruderResponse"">
                <Fallback name=""IntruderCheck"">
                    <ConditionModel name=""is_intruder_detected""/>
                </Fallback>
                <ActionModel name=""lock_doors""/>
                <Fallback name=""PatrolMaintenance"">
                    <ActionModel name=""maintain_patrol""/>
                </Fallback>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <ConditionModel name=""is_intruder_detected""/>
            <ActionModel name=""lock_doors""/>
            <ActionModel name=""maintain_patrol""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_intruder: Condition node: Identify if an intruder is present. Returns SUCCESS if detected, FAILURE otherwise.; activate_alarm: Action Node: Trigger the security alarm. Always returns SUCCESS.; investigate_area: Action Node: Investigate the area for intruders. Always returns SUCCESS.; return_to_patrol: Action Node: Resume regular patrol duties. Always returns SUCCESS.; log_event: Action Node: Log the detected event. Always returns SUCCESS; call_security: Action Node: Contact security personnel. Always returns SUCCESS}. To construct a behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""Detect intruder, if detected activate alarm and call security, else continue patrol"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""IntrusionResponse"">
  <BehaviorTree ID=""IntrusionResponse"">
    <Sequence name=""Main Sequence"">
      <detect_intruder/>
      <Fallback name=""Intrusion Handling"">
        <Sequence>
          <detect_intruder/>
          <activate_alarm/>
          <call_security/>
          <log_event/>
        </Sequence>
        <return_to_patrol/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""detect_intruder""/>
    <Action ID=""activate_alarm""/>
    <Action ID=""call_security""/>
    <Action ID=""log_event""/>
    <Action ID=""return_to_patrol""/>
    <Action ID=""investigate_area"" editable=""false""/>
  </TreeNodesModel>
</root>",zero,66.7959771156311,"<root BTCPP_format=""3"" main_tree_to_execute=""IntruderDetection"">
        <BehaviorTree>
            <Sequence name=""IntruderDetection"">
                <Fallback name=""DetectIntruder"">
                    <Condition behavior=""detect_intruder""/>
                </Fallback>
                <Sequence name=""ResponseToIntruder"">
                    <Action behavior=""activate_alarm""/>
                    <Action behavior=""call_security""/>
                </Sequence>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition behavior=""detect_intruder""/>
            <Action behavior=""activate_alarm""/>
            <Action behavior=""call_security""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  is_area_mapped: Condition node: Check if the area is mapped. Returns SUCCESS if mapped, FAILURE otherwise.;
  is_path_blocked: Condition node: Check if the path is blocked. Returns SUCCESS if blocked, FAILURE otherwise.;
  turn_left: Action Node: Turn the agent left. Always returns SUCCESS.;
  turn_right: Action Node: Turn the agent right. Always returns SUCCESS.;
  move_forward: Action Node: Move the agent forward. Always returns SUCCESS.;
  update_map: Action Node: Update the mapping data. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if area is mapped, then if the path is blocked, turn left or right; otherwise, move forward and update the map"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""MapArea"">
  <BehaviorTree ID=""MapArea"">
    <Sequence>
      <is_area_mapped/>
      <Fallback>
        <Sequence>
          <is_path_blocked/>
          <Fallback>
            <turn_left/>
            <turn_right/>
          </Fallback>
        </Sequence>
        <Sequence>
          <move_forward/>
          <update_map/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_area_mapped""/>
    <Condition ID=""is_path_blocked""/>
    <Action ID=""move_forward""/>
    <Action ID=""turn_left""/>
    <Action ID=""turn_right""/>
    <Action ID=""update_map""/>
  </TreeNodesModel>
</root>",zero,82.91749286651611,"<root BTCPP_format=""3"" main_tree_to_execute=""main"">
    <BehaviorTree name=""main"">
    <TreeNodesModel>
    <Fallback name=""turn_left_or_right""/>
    <Sequence name=""move_and_update_map""/>
    <Condition name=""is_area_mapped""/>
    <Condition name=""is_path_blocked""/>
    <Action name=""turn_left""/>
    <Action name=""turn_right""/>
    <Action name=""move_forward""/>
    <Action name=""update_map""/>
    </TreeNodesModel>
    <Sequence name=""main_sequence"">
    <is_area_mapped/>
    <Fallback name=""turn_left_or_right""/>
    <Sequence name=""move_and_update_map"">
    <move_forward/>
    <update_map/>
    </Sequence>
    </Sequence>
    </BehaviorTree>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","Use only the following behaviors structured as a dictionary: {IsBatteryLow: Condition node: Checks if the battery level is below threshold. Returns SUCCESS if low, FAILURE otherwise.; GoToChargingStation: Action Node: Navigates the robot to the charging station. Always returns SUCCESS.; ChargeBattery: Action Node: Initiates battery charging. Always returns SUCCESS.; ResumeTask: Action Node: Resumes the previous task after charging. Always returns SUCCESS.}. Including any behavior not in this dictionary will result in failure, so avoid using them.","generate behavior tree to ""if the battery is low, go to the charging station, charge the battery, and then resume the previous task"". Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Sequence>
      <IsBatteryLow/>
      <GoToChargingStation/>
      <ChargeBattery/>
      <ResumeTask/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""IsBatteryLow""/>
    <Action ID=""GoToChargingStation""/>
    <Action ID=""ChargeBattery""/>
    <Action ID=""ResumeTask""/>
  </TreeNodesModel>
</root>",zero,60.15496492385864,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
        <BehaviorTree name=""BatteryManagement"">
            <Sequence name=""MainSequence"">
                <Fallback name=""CheckBattery"">
                    <IsBatteryLow/>
                </Fallback>
                <GoToChargingStation/>
                <ChargeBattery/>
                <ResumeTask/>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <Condition name=""IsBatteryLow""/>
            <Action name=""GoToChargingStation""/>
            <Action name=""ChargeBattery""/>
            <Action name=""ResumeTask""/>
        </TreeNodesModel>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_clear: Condition node: Check if the designated area is clear of obstacles. Returns SUCCESS if clear, FAILURE otherwise.; start_cleaning: Action Node: Begin the cleaning process. Always returns SUCCESS.; alert_obstruction: Action Node: Alert the system of an obstruction. Always returns SUCCESS.; navigate_to_area: Action Node: Navigate to the designated cleaning area. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. Including any behavior not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""if the area is clear then start cleaning, otherwise navigate to area and alert obstruction"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""CleaningProcess"">
  <BehaviorTree ID=""CleaningProcess"">
    <Fallback name=""Cleaning Fallback"">
      <Sequence name=""Start Cleaning Sequence"">
        <is_area_clear/>
        <start_cleaning/>
      </Sequence>
      <Sequence name=""Handle Obstruction Sequence"">
        <navigate_to_area/>
        <alert_obstruction/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_area_clear""/>
    <Action ID=""start_cleaning""/>
    <Action ID=""navigate_to_area""/>
    <Action ID=""alert_obstruction""/>
  </TreeNodesModel>
</root>",zero,67.32241582870483,"<root BTCPP_format=""3"" main_tree_to_execute=""CleaningBehaviorTree"">
    <BehaviorTree name=""CleaningBehaviorTree"">
        <Fallback>
            <Sequence>
                <is_area_clear/>
                <start_cleaning/>
            </Sequence>
            <Sequence>
                <navigate_to_area/>
                <alert_obstruction/>
            </Sequence>
        </Fallback>
        <TreeNodesModel>
            <Condition name=""is_area_clear""/>
            <Action name=""start_cleaning""/>
            <Action name=""navigate_to_area""/>
            <Action name=""alert_obstruction""/>
        </TreeNodesModel>
    </BehaviorTree>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_clear: Condition node: Verify that the area is free of obstacles. Returns SUCCESS if clear, FAILURE otherwise.; scan_for_resources: Action Node: Perform a scan to locate resources in the area. Always returns SUCCESS.; collect_resource: Action Node: Gather the identified resource. Always returns SUCCESS.; alert_obstacle: Action Node: Notify the system of any detected obstacle. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the area is clear then scan for resources and collect them, else alert obstacle"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
  <BehaviorTree ID=""ResourceCollection"">
    <Sequence name=""Collection Sequence"">
      <is_area_clear/>
      <Sequence name=""Scan and Collect"">
        <scan_for_resources/>
        <collect_resource/>
      </Sequence>
    </Sequence>
    <alert_obstacle/>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_area_clear""/>
    <Action ID=""scan_for_resources""/>
    <Action ID=""collect_resource""/>
    <Action ID=""alert_obstacle""/>
  </TreeNodesModel>
</root>",zero,68.12338495254517,"<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
    <BehaviorTree name=""ResourceCollection"">
    <TreeNodesModel>
    <Fallback name=""Fallback""/>
    <Sequence name=""ScanAndCollect""/>
    <Condition name=""IsAreaClear""/>
    <Action name=""ScanForResources""/>
    <Action name=""CollectResource""/>
    <Action name=""AlertObstacle""/>
    </TreeNodesModel>
    <Fallback name=""Fallback"">
    <IsAreaClear/>
    <ScanAndCollect/>
    <AlertObstacle/>
    </Fallback>
    <Sequence name=""ScanAndCollect"">
    <ScanForResources/>
    <CollectResource/>
    </Sequence>
    </BehaviorTree>
    </root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {CheckBattery: Condition Node: Check if the agent's battery level is above a threshold. Returns SUCCESS if above, FAILURE otherwise.; Recharge: Action Node: Initiate the charging process. Always returns SUCCESS.; NavigateTo: Action Node: Navigate to a specified location. Always returns SUCCESS.; ReportStatus: Action Node: Report the current status. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""check battery level, if sufficient navigate to the target location, else recharge, and report the status after moving or recharging"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryCheckTree"">
  <BehaviorTree ID=""BatteryCheckTree"">
    <Fallback>
      <Sequence>
        <CheckBattery/>
        <NavigateTo location=""{TargetLocation}""/>
        <ReportStatus message=""Arrived at target location.""/>
      </Sequence>
      <Sequence>
        <Recharge/>
        <ReportStatus message=""Recharging completed.""/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""CheckBattery"" editable=""true"">
    </Condition>
    <Action ID=""Recharge"" editable=""true"">
    </Action>
    <Action ID=""NavigateTo"" editable=""true"">
      <input_port name=""location""/>
    </Action>
    <Action ID=""ReportStatus"" editable=""true"">
      <input_port name=""message""/>
    </Action>
  </TreeNodesModel>
</root>",one,137.29543495178223,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""Battery and Navigation Management"">      
			<Sequence name=""Sufficient Battery Sequence"">        
				<CheckBattery/>        
				<NavigateTo/>      
			</Sequence>      
			<Sequence name=""Insufficient Battery Sequence"">        
				<Recharge/>        
				<ReportStatus/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""CheckBattery""/>    
		<Action ID=""Recharge""/>    
		<Action ID=""NavigateTo""/>    
		<Action ID=""ReportStatus""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below 20%. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the robot back to its base. Always returns SUCCESS.; continue_mission: Action Node: Continue with the current mission. Always returns SUCCESS.; recharge_battery: Action Node: Start the battery recharging process. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""If the battery is low, return to base and recharge; otherwise, continue with the mission"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Fallback name=""Battery Check"">
      <Sequence>
        <is_battery_low/>
        <return_to_base/>
        <recharge_battery/>
      </Sequence>
      <continue_mission/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_battery_low""/>
    <Action ID=""return_to_base""/>
    <Action ID=""recharge_battery""/>
    <Action ID=""continue_mission""/>
  </TreeNodesModel>
</root>",one,85.68361711502075,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""Battery Management"">      
			<Sequence name=""Low Battery Sequence"">        
				<is_battery_low/>        
				<return_to_base/>      
				<recharge_battery/>    
			</Sequence>      
			<Sequence name=""Normal Operation Sequence"">        
				<continue_mission/>    
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_battery_low""/>    
		<Action ID=""return_to_base""/>    
		<Action ID=""continue_mission""/>    
		<Action ID=""recharge_battery""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  patrol_area: Action Node: Patrol the designated area. Always returns SUCCESS.;
  detect_intruder: Condition: Detect if an intruder is present. Returns SUCCESS if detected, FAILURE otherwise.;
  alert_security: Action Node: Send an alert to the security team. Always returns SUCCESS.;
  investigate_area: Action Node: Investigate the suspicious activity. Always returns SUCCESS.;
  return_to_patrol: Action Node: Resume patrolling the area. Always returns SUCCESS.;
  is_area_clear: Condition: Check if the area is clear of intruders. Returns SUCCESS if clear, FAILURE otherwise.;
}. 
To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""Patrol the area. If an intruder is detected, alert security and investigate before returning to patrol."" Ensure the behavior tree follows a logical flow.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""PatrolIntrusionResponse"">
  <BehaviorTree ID=""PatrolIntrusionResponse"">
    <Sequence name=""Main Sequence"">
      <patrol_area/>
      <Fallback name=""Intruder Handling"">
        <Sequence name=""Intruder Detected"">
          <detect_intruder/>
          <Sequence name=""Alert and Investigate"">
            <alert_security/>
            <investigate_area/>
          </Sequence>
        </Sequence>
        <Sequence name=""No Intruder"">
          <is_area_clear/>
        </Sequence>
      </Fallback>
      <return_to_patrol/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID=""alert_security""/>
    <Action ID=""detect_intruder""/>
    <Action ID=""investigate_area""/>
    <Action ID=""patrol_area""/>
    <Action ID=""return_to_patrol""/>
    <Condition ID=""is_area_clear""/>
  </TreeNodesModel>
</root>",one,120.10873746871948,"<root BTCPP_format=""3"" main_tree_to_execute=""AreaPatrolling"">  
	<BehaviorTree ID=""AreaPatrolling"">    
		<Sequence name=""Patrolling Sequence"">      
			<patrol_area/>      
			<Fallback name=""Intruder Handling"">        
				<Sequence name=""Intruder Detected"">          
					<detect_intruder/>          
					<alert_security/>          
					<investigate_area/>      
				</Sequence>        
				<Sequence name=""Area Clear"">          
					<is_area_clear/>          
					<return_to_patrol/>      
				</Sequence>    
			</Fallback>  
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Action ID=""patrol_area""/>    
		<Condition ID=""detect_intruder""/>    
		<Action ID=""alert_security""/>    
		<Action ID=""investigate_area""/>    
		<Action ID=""return_to_patrol""/>    
		<Condition ID=""is_area_clear""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_comm_available: Condition node: Check if communication is available. Returns SUCCESS if available, FAILURE otherwise.; send_status_update: Action Node: Send a status update to the base station. Always returns SUCCESS.; receive_commands: Action Node: Receive and process commands from the base station. Always returns SUCCESS.; enter_sleep_mode: Action Node: Enter low-power sleep mode. Always returns SUCCESS.; wake_up: Action Node: Wake up from sleep mode. Always returns SUCCESS.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""if communication is available then send a status update and receive commands, otherwise enter sleep mode and wake up after a specified duration"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""CommunicationHandler"">
  <BehaviorTree ID=""CommunicationHandler"">
    <Fallback name=""Communication Fallback"">
      <Sequence name=""Active Communication"">
        <is_comm_available/>
        <send_status_update/>
        <receive_commands/>
      </Sequence>
      <Sequence name=""Sleep Sequence"">
        <enter_sleep_mode/>
        <wake_up/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_comm_available""/>
    <Action ID=""send_status_update""/>
    <Action ID=""receive_commands""/>
    <Action ID=""enter_sleep_mode""/>
    <Action ID=""wake_up""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence"" name=""Active Communication""/>
    <Control ID=""Sequence"" name=""Sleep Sequence""/>
  </TreeNodesModel>
</root>",one,109.48086953163147,"<root BTCPP_format=""3"" main_tree_to_execute=""CommunicationManagement"">  
	<BehaviorTree ID=""CommunicationManagement"">    
		<Fallback name=""High-Level Decision"">      
			<Sequence name=""Active Communication Sequence"">        
				<is_comm_available/>        
				<send_status_update/>        
				<receive_commands/>      
			</Sequence>      
			<Sequence name=""Sleep Mode Sequence"">        
				<enter_sleep_mode/>        
				<wait_for_duration/>      
				<wake_up/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_comm_available""/>    
		<Action ID=""send_status_update""/>    
		<Action ID=""receive_commands""/>    
		<Action ID=""enter_sleep_mode""/>    
		<Action ID=""wake_up""/>    
		<Action ID=""wait_for_duration"" editable=""true"">
      	<input_port name=""duration""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:  
{
  `is_temperature_high`: Condition node: Check if the temperature exceeds the threshold. Returns SUCCESS if high, FAILURE otherwise.;  
  `activate_cooling_system`: Action Node: Turn on the cooling mechanisms. Always returns SUCCESS.;  
  `monitor_temperature`: Action Node: Continuously monitor the temperature. Always returns SUCCESS.
}.  
To construct a behavior tree in XML format for the following command, including any behavior outside the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if the temperature is high then activate the cooling system, otherwise continue monitoring the temperature"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""TemperatureControl"">
  <BehaviorTree ID=""TemperatureControl"">
    <Fallback name=""Temperature Fallback"">
      <Sequence name=""Cooling Sequence"">
        <is_temperature_high/>
        <activate_cooling_system/>
      </Sequence>
      <monitor_temperature/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Action ID=""activate_cooling_system""/>
    <Action ID=""monitor_temperature""/>
    <Condition ID=""is_temperature_high""/>
  </TreeNodesModel>
</root>


These tasks cover a variety of scenarios, ensuring that the LLM model can handle different conditions and actions while adhering strictly to the provided behavior dictionaries. Each behavior tree is structured logically in XML format, maintaining clarity and consistency for effective evaluation.",one,77.8270480632782,"<root BTCPP_format=""3"" main_tree_to_execute=""TemperatureControl"">  
	<BehaviorTree ID=""TemperatureControl"">    
		<Fallback name=""Temperature Management"">      
			<Sequence name=""High Temperature Sequence"">        
				<is_temperature_high/>        
				<activate_cooling_system/>      
			</Sequence>      
			<Sequence name=""Normal Temperature Monitoring"">        
				<monitor_temperature/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_temperature_high""/>    
		<Action ID=""activate_cooling_system""/>    
		<Action ID=""monitor_temperature""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {collect_resources: Action Node: Collect available resources in the area. Always returns SUCCESS.; store_resources: Action Node: Store collected resources in the base. Always returns SUCCESS.; is_resource_available: Condition Node: Check if resources are available for collection. Returns SUCCESS if available, FAILURE otherwise.; is_storage_full: Condition Node: Check if storage is full. Returns SUCCESS if full, FAILURE otherwise.; report_collection_complete: Action Node: Report that resource collection is complete. Always returns SUCCESS.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to 'Collect resources if available and store them, else report completion' Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
  <BehaviorTree ID=""ResourceCollection"">
    <Sequence name=""Main Sequence"">
      <Fallback name=""Check Resources and Storage"">
        <Sequence>
          <is_resource_available/>
          <Fallback name=""Storage Status"">
            <Sequence>
              <is_storage_full/>
              <report_collection_complete/>
            </Sequence>
            <collect_resources/>
            <store_resources/>
          </Fallback>
        </Sequence>
        <report_collection_complete/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID=""collect_resources""/>
    <Action ID=""store_resources""/>
    <Action ID=""report_collection_complete""/>
    <Condition ID=""is_resource_available""/>
    <Condition ID=""is_storage_full""/>
  </TreeNodesModel>
</root>",one,78.9225389957428,"<root BTCPP_format=""3"" main_tree_to_execute=""ResourceManagement"">  
	<BehaviorTree ID=""ResourceManagement"">    
		<Fallback name=""Resource Collection and Reporting"">      
			<Sequence name=""Collect and Store Resources"">        
				<is_resource_available/>        
				<collect_resources/>        
				<store_resources/>      
			</Sequence>      
			<report_collection_complete/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_resource_available""/>    
		<Action ID=""collect_resources""/>    
		<Action ID=""store_resources""/>    
		<Action ID=""report_collection_complete""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {
    detect_obstacle: Condition: Detect if there is an obstacle ahead. Returns True if detected, False otherwise.;
    avoid_obstacle: Action: Perform obstacle avoidance maneuvers. Always returns True.;
    move_forward: Action: Move the agent forward. Always returns True.;
    stop_motion: Action: Stop all movement. Always returns True.;
    report_obstacle: Action: Send an obstacle detected report. Always returns True.;
    is_path_clear: Condition: Check if the path is clear. Returns True if clear, False otherwise.;
    resume_movement: Action: Resume movement after obstacle avoidance. Always returns True.
}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""avoid obstacles when detected and continue moving forward"". Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">
  <BehaviorTree ID=""ObstacleAvoidance"">
    <Fallback name=""Obstacle Fallback"">
      <Sequence name=""Obstacle Detected Sequence"">
        <detect_obstacle/>
        <Sequence name=""Avoid and Report"">
          <avoid_obstacle/>
          <report_obstacle/>
        </Sequence>
      </Sequence>
      <move_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""detect_obstacle""/>
    <Action ID=""avoid_obstacle""/>
    <Action ID=""report_obstacle""/>
    <Action ID=""move_forward""/>
    <Control ID=""Fallback"" name=""Obstacle Fallback""/>
    <Control ID=""Sequence"" name=""Obstacle Detected Sequence""/>
    <Control ID=""Sequence"" name=""Avoid and Report""/>
  </TreeNodesModel>
</root>",one,96.3742036819458,"<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">  
	<BehaviorTree ID=""ObstacleAvoidance"">    
		<Fallback name=""Obstacle Handling"">      
			<Sequence name=""Obstacle Detected"">        
				<detect_obstacle/>        
				<avoid_obstacle/>      
			</Sequence>      
			<Sequence name=""Normal Movement"">        
				<move_forward/>        
				<report_obstacle/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""detect_obstacle""/>    
		<Action ID=""avoid_obstacle""/>    
		<Action ID=""move_forward""/>    
		<Action ID=""report_obstacle""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below 20%. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the robot back to the base station. Always returns SUCCESS.; continue_operation: Condition node: Check if operations can continue. Returns SUCCESS if yes, FAILURE otherwise.; perform_task: Action Node: Execute the assigned task. Always returns SUCCESS.; notify_operator: Action Node: Send a notification to the operator. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the battery is low then return to base and notify the operator; otherwise, if operations can continue, perform the task"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Fallback name=""Battery Fallback"">
      <Sequence name=""Handle Low Battery"">
        <is_battery_low/>
        <return_to_base/>
        <notify_operator/>
      </Sequence>
      <Sequence name=""Continue Operations"">
        <continue_operation/>
        <perform_task/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_battery_low""/>
    <Action ID=""return_to_base""/>
    <Action ID=""notify_operator""/>
    <Condition ID=""continue_operation""/>
    <Action ID=""perform_task""/>
  </TreeNodesModel>
</root>",one,93.57733249664307,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""High-Level Decision"">      
			<Sequence name=""Low Battery Sequence"">        
				<is_battery_low/>        
				<return_to_base/>        
				<notify_operator/>      
			</Sequence>      
			<Sequence name=""Normal Operation Sequence"">        
				<continue_operation/>        
				<perform_task/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_battery_low""/>    
		<Action ID=""return_to_base""/>    
		<Condition ID=""continue_operation""/>    
		<Action ID=""perform_task""/>    
		<Action ID=""notify_operator""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {collect_item: Action Node: Gather an item from the environment. Always returns SUCCESS.; is_storage_full: Condition node: Check if the storage capacity is reached. Returns SUCCESS if full, FAILURE otherwise.; return_to_deposit: Action Node: Navigate back to the deposit location. Always returns SUCCESS.; deposit_items: Action Node: Deposit collected items. Always returns SUCCESS.; explore_area: Action Node: Explore a new area. Always returns SUCCESS.; notify_deposit_full: Action Node: Send a notification that storage is full. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""Explore the area and collect items. If storage is full, return to deposit location, deposit items, and notify that storage is full"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>  
<root BTCPP_format=""3"" main_tree_to_execute=""ItemCollection"">  
  <BehaviorTree ID=""ItemCollection"">  
    <Sequence name=""Main Sequence"">  
      <explore_area/>  
      <collect_item/>  
      <Fallback name=""Storage Check"">  
        <Sequence>  
          <is_storage_full/>  
          <return_to_deposit/>  
          <deposit_items/>  
          <notify_deposit_full/>  
        </Sequence>  
        <!-- Continue collecting items if storage not full -->  
      </Fallback>  
    </Sequence>  
  </BehaviorTree>  
  <TreeNodesModel>  
    <Action ID=""collect_item""/>  
    <Condition ID=""is_storage_full""/>  
    <Action ID=""return_to_deposit""/>  
    <Action ID=""deposit_items""/>  
    <Action ID=""explore_area""/>  
    <Action ID=""notify_deposit_full""/>  
  </TreeNodesModel>  
</root>",one,122.92022776603699,"<root BTCPP_format=""3"" main_tree_to_execute=""ExplorationAndCollection"">  
	<BehaviorTree ID=""ExplorationAndCollection"">    
		<Fallback name=""Main Operation"">      
			<Sequence name=""Collection and Notification"">        
				<explore_area/>        
				<collect_item/>        
				<is_storage_full/>        
				<Fallback name=""Storage Full Handling"">              
					<Sequence name=""Deposit and Notify"">                    
						<return_to_deposit/>                    
						<deposit_items/>                    
						<notify_deposit_full/>                  
					</Sequence>                
					<Sequence name=""Continue Collection"">                    
						<explore_area/>                    
						<collect_item/>                  
					</Sequence>              
				</Fallback>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Action ID=""explore_area""/>    
		<Action ID=""collect_item""/>    
		<Condition ID=""is_storage_full""/>    
		<Action ID=""return_to_deposit""/>    
		<Action ID=""deposit_items""/>    
		<Action ID=""notify_deposit_full""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_enemy: Condition node: Check if an enemy is detected. Returns SUCCESS if detected, FAILURE otherwise.; patrol_area: Action Node: Patrol the designated area. Always returns SUCCESS.; engage_enemy: Action Node: Engage the detected enemy. Always returns SUCCESS.; retreat: Action Node: Retreat to a safe location. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if an enemy is detected, engage the enemy; otherwise, patrol the area and retreat if an enemy appears"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EnemyResponse"">
  <BehaviorTree ID=""EnemyResponse"">
    <Fallback name=""Main Fallback"">
      <Sequence name=""Engage Sequence"">
        <detect_enemy/>
        <engage_enemy/>
      </Sequence>
      <Sequence name=""Patrol and Monitor"">
        <patrol_area/>
        <detect_enemy/>
        <retreat/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""detect_enemy""/>
    <Action ID=""patrol_area""/>
    <Action ID=""engage_enemy""/>
    <Action ID=""retreat""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence"" name=""Engage Sequence""/>
    <Control ID=""Sequence"" name=""Patrol and Monitor""/>
  </TreeNodesModel>
</root>",one,97.35710048675537,"<root BTCPP_format=""3"" main_tree_to_execute=""EnemyDetection"">  
	<BehaviorTree ID=""EnemyDetection"">    
		<Fallback name=""Enemy Handling"">      
			<Sequence name=""Engage Enemy"">        
				<detect_enemy/>        
				<engage_enemy/>      
			</Sequence>      
			<Sequence name=""Patrol and Retreat"">        
				<patrol_area/>        
				<Fallback name=""Retreat if Enemy Appears"">          
					<detect_enemy/>          
					<retreat/>        
				</Fallback>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""detect_enemy""/>    
		<Action ID=""engage_enemy""/>    
		<Action ID=""patrol_area""/>    
		<Action ID=""retreat""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
is_battery_low: Condition node: Check if the battery level is low. Returns SUCCESS if low, FAILURE otherwise.
recharge_battery: Action Node: Recharge the robot's battery. Always returns SUCCESS.
perform_maintenance: Action Node: Perform maintenance tasks. Always returns SUCCESS.
is_maintenance_due: Condition node: Check if maintenance is due. Returns SUCCESS if due, FAILURE otherwise.
continue_operations: Action Node: Continue regular operations. Always returns SUCCESS.
report_status: Action Node: Report current status. Always returns SUCCESS.

Including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if the battery is low, recharge it; then check if maintenance is due, perform maintenance if needed, and finally continue operations while reporting status"". Take a step back and think deeply about the behavior tree.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""MaintenanceTask"">
  <BehaviorTree ID=""MaintenanceTask"">
    <Sequence name=""Maintenance Sequence"">
      <Fallback name=""Battery Check"">
        <Sequence>
          <is_battery_low/>
          <recharge_battery/>
        </Sequence>
        <continue_operations/>
      </Fallback>
      <Fallback name=""Maintenance Check"">
        <Sequence>
          <is_maintenance_due/>
          <perform_maintenance/>
        </Sequence>
        <continue_operations/>
      </Fallback>
      <report_status/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_battery_low""/>
    <Condition ID=""is_maintenance_due""/>
    <Action ID=""recharge_battery""/>
    <Action ID=""perform_maintenance""/>
    <Action ID=""continue_operations""/>
    <Action ID=""report_status""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",one,97.49281549453735,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryAndMaintenanceManagement"">  
	<BehaviorTree ID=""BatteryAndMaintenanceManagement"">    
		<Sequence name=""Main Sequence"">      
			<is_battery_low/>      
			<recharge_battery/>      
			<Fallback name=""Maintenance Decision"">        
				<is_maintenance_due/>        
				<perform_maintenance/>      
			</Fallback>      
			<continue_operations/>      
			<report_status/>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_battery_low""/>    
		<Action ID=""recharge_battery""/>    
		<Condition ID=""is_maintenance_due""/>    
		<Action ID=""perform_maintenance""/>    
		<Action ID=""continue_operations""/>    
		<Action ID=""report_status""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_obstacle_detected: Condition node: Check if there is an obstacle in the path. Returns SUCCESS if obstacle is detected, FAILURE otherwise.; avoid_obstacle: Action Node: Perform obstacle avoidance maneuvers. Always returns SUCCESS.; proceed_forward: Action Node: Move the robot forward. Always returns SUCCESS.; send_alert: Action Node: Send an alert message. Always returns SUCCESS}. Construct the behavior tree in XML format for the following command. Including any behavior not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if an obstacle is detected then avoid it and send an alert, otherwise proceed forward"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleHandling"">
  <BehaviorTree ID=""ObstacleHandling"">
    <Fallback name=""Obstacle Fallback"">
      <Sequence name=""Handle Obstacle"">
        <is_obstacle_detected/>
        <avoid_obstacle/>
        <send_alert/>
      </Sequence>
      <proceed_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_obstacle_detected""/>
    <Action ID=""avoid_obstacle""/>
    <Action ID=""send_alert""/>
    <Action ID=""proceed_forward""/>
  </TreeNodesModel>
</root>",one,92.97613859176636,"<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">  
	<BehaviorTree ID=""ObstacleAvoidance"">    
		<Fallback name=""Obstacle Handling"">      
			<Sequence name=""Obstacle Detected"">        
				<is_obstacle_detected/>        
				<avoid_obstacle/>        
				<send_alert/>      
			</Sequence>      
			<Sequence name=""No Obstacle"">        
				<proceed_forward/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_obstacle_detected""/>    
		<Action ID=""avoid_obstacle""/>    
		<Action ID=""proceed_forward""/>    
		<Action ID=""send_alert""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
`is_object_found`: Condition node: Determine if a specific object has been located. Returns SUCCESS if found, FAILURE otherwise.
`grasp_object`: Action Node: Engage the mechanism to grasp the object. Always returns SUCCESS.
`place_object`: Action Node: Move and place the object at the designated location. Always returns SUCCESS.
`search_area`: Action Node: Conduct a search within the specified area. Always returns SUCCESS.
`alert_team`: Action Node: Notify the team about the object status. Always returns SUCCESS.

To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""if an object is found then grasp and place the object and alert the team, otherwise search the area"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObjectHandling"">
  <BehaviorTree ID=""ObjectHandling"">
    <Fallback name=""Object Fallback"">
      <Sequence name=""Handling Sequence"">
        <is_object_found/>
        <grasp_object/>
        <place_object/>
        <alert_team/>
      </Sequence>
      <search_area/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Action ID=""grasp_object""/>
    <Action ID=""place_object""/>
    <Action ID=""search_area""/>
    <Action ID=""alert_team""/>
    <Condition ID=""is_object_found""/>
  </TreeNodesModel>
</root>",one,105.61556363105774,"<root BTCPP_format=""3"" main_tree_to_execute=""ObjectHandling"">  
	<BehaviorTree ID=""ObjectHandling"">    
		<Fallback name=""Object Handling Fallback"">      
			<Sequence name=""Object Found Sequence"">        
				<is_object_found/>        
				<grasp_object/>        
				<place_object/>        
				<alert_team/>      
			</Sequence>      
			<Sequence name=""Search Area Sequence"">        
				<search_area/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_object_found""/>    
		<Action ID=""grasp_object""/>    
		<Action ID=""place_object""/>    
		<Action ID=""search_area""/>    
		<Action ID=""alert_team""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {rotate_in_circle: Action Node: Rotate the robot in a circle. Always returns SUCCESS.; is_robot_in_range: Condition node: Check if the robot is within 6 inches of its starting location. Returns SUCCESS if within range, FAILURE otherwise.; wander: Action Node: Perform a wandering action. Always returns SUCCESS.; task_completed: Action Node: Indicate task completion. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""Rotate in a circle within 6 inches of current location"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""RotateCircle"">
  <BehaviorTree ID=""RotateCircle"">
    <Sequence name=""Main Sequence"">
      <Fallback name=""Rotation Decision"">
        <Sequence>
          <is_robot_in_range/>
          <rotate_in_circle/>
          <task_completed/>
        </Sequence>
        <wander/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_robot_in_range""/>
    <Action ID=""rotate_in_circle""/>
    <Action ID=""task_completed""/>
    <Action ID=""wander""/>
  </TreeNodesModel>
</root>",one,95.66565322875977,"<root BTCPP_format=""3"" main_tree_to_execute=""NavigationControl"">  
	<BehaviorTree ID=""NavigationControl"">    
		<Sequence name=""Navigation Sequence"">      
			<is_robot_in_range/>      
			<rotate_in_circle/>    
		</Sequence>      
		<Fallback name=""Wander Fallback"">        
			<Sequence name=""Wander Sequence"">          
				<wander/>          
				<task_completed/>        
			</Sequence>      
		</Fallback>    
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_robot_in_range""/>    
		<Action ID=""rotate_in_circle""/>    
		<Action ID=""wander""/>    
		<Action ID=""task_completed""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_obstacle_ahead: Condition node: Detect if there is an obstacle in the robot's path. Returns SUCCESS if an obstacle is detected, FAILURE otherwise.; stop: Action Node: Stop the robot's movement. Always returns SUCCESS.; navigate_around: Action Node: Maneuver the robot around the detected obstacle. Always returns SUCCESS.; proceed_forward: Action Node: Continue moving forward. Always returns SUCCESS.; sound_alarm: Action Node: Emit an alarm sound. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if an obstacle is detected then stop, sound an alarm, and navigate around it; otherwise, proceed forward"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">
  <BehaviorTree ID=""ObstacleAvoidance"">
    <Fallback name=""Obstacle Fallback"">
      <Sequence name=""Handle Obstacle"">
        <is_obstacle_ahead/>
        <stop/>
        <sound_alarm/>
        <navigate_around/>
      </Sequence>
      <proceed_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_obstacle_ahead""/>
    <Action ID=""stop""/>
    <Action ID=""sound_alarm""/>
    <Action ID=""navigate_around""/>
    <Action ID=""proceed_forward""/>
  </TreeNodesModel>
</root>",one,99.31810188293457,"<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">  
	<BehaviorTree ID=""ObstacleAvoidance"">    
		<Fallback name=""Obstacle Handling"">      
			<Sequence name=""Obstacle Detected"">        
				<is_obstacle_ahead/>        
				<stop/>        
				<sound_alarm/>        
				<navigate_around/>      
			</Sequence>      
			<Sequence name=""No Obstacle"">        
				<proceed_forward/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_obstacle_ahead""/>    
		<Action ID=""stop""/>    
		<Action ID=""sound_alarm""/>    
		<Action ID=""navigate_around""/>    
		<Action ID=""proceed_forward""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_intruder_detected: Condition node: Check if an intruder is detected. Returns SUCCESS if detected, FAILURE otherwise.; alert_security: Action Node: Send an alert to the security team. Always returns SUCCESS.; patrol_area: Action Node: Continue patrolling the area. Always returns SUCCESS.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""if an intruder is detected then alert security, otherwise continue patrolling the area"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""IntruderResponse"">
  <BehaviorTree ID=""IntruderResponse"">
    <Fallback name=""Intruder Fallback"">
      <Sequence name=""Intruder Sequence"">
        <is_intruder_detected/>
        <alert_security/>
      </Sequence>
      <patrol_area/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_intruder_detected""/>
    <Action ID=""alert_security""/>
    <Action ID=""patrol_area""/>
  </TreeNodesModel>
</root>",one,82.67073178291321,"<root BTCPP_format=""3"" main_tree_to_execute=""IntruderManagement"">  
	<BehaviorTree ID=""IntruderManagement"">    
		<Fallback name=""Intruder Handling"">      
			<Sequence name=""Intruder Detected"">        
				<is_intruder_detected/>        
				<alert_security/>      
			</Sequence>      
			<Sequence name=""Normal Operation"">        
				<patrol_area/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_intruder_detected""/>    
		<Action ID=""alert_security""/>    
		<Action ID=""patrol_area""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_task_assigned: Condition node: Check if a new task has been assigned. Returns SUCCESS if a task is present, FAILURE otherwise.; accept_task: Action Node: Accept the newly assigned task. Always returns SUCCESS.; review_task: Action Node: Review the details of the current task. Always returns SUCCESS.; execute_task: Action Node: Execute the assigned task. Always returns SUCCESS.; idle: Action Node: Remain idle and monitor for new tasks. Always returns SUCCESS.}. To construct behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if a task is assigned, accept and execute it; otherwise, review previous tasks and remain idle."" Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""TaskManagement"">
  <BehaviorTree ID=""TaskManagement"">
    <Fallback name=""Task Fallback"">
      <Sequence name=""Handle New Task"">
        <is_task_assigned/>
        <Sequence>
          <accept_task/>
          <execute_task/>
        </Sequence>
      </Sequence>
      <Sequence name=""Handle No New Task"">
        <review_task/>
        <idle/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_task_assigned""/>
    <Action ID=""accept_task""/>
    <Action ID=""execute_task""/>
    <Action ID=""review_task""/>
    <Action ID=""idle""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",one,88.51234745979309,"<root BTCPP_format=""3"" main_tree_to_execute=""TaskManagement"">  
	<BehaviorTree ID=""TaskManagement"">    
		<Fallback name=""Task Handling"">      
			<Sequence name=""Task Assigned Sequence"">        
				<is_task_assigned/>        
				<accept_task/>        
				<execute_task/>      
			</Sequence>      
			<Sequence name=""Idle and Review Sequence"">        
				<review_task/>        
				<idle/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_task_assigned""/>    
		<Action ID=""accept_task""/>    
		<Action ID=""review_task""/>    
		<Action ID=""execute_task""/>    
		<Action ID=""idle""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_capacity_full: Condition node: Check if the storage capacity is full. Returns SUCCESS if full, FAILURE otherwise.; unload_resources: Action Node: Unload collected resources. Always returns SUCCESS.; search_for_resources: Action Node: Search the environment for resources. Always returns SUCCESS.; collect_resource: Action Node: Collect a resource from the environment. Always returns SUCCESS.; return_to_base: Action Node: Return to the base for unloading resources. Always returns SUCCESS.; scan_environment: Action Node: Scan the surrounding environment for potential resources. Always returns SUCCESS.; report_status: Action Node: Report the current status to the central system. Always returns SUCCESS.;}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if storage is full, unload resources and return to base; otherwise, search for resources, collect them, scan the environment, and report status"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
  <BehaviorTree ID=""ResourceCollection"">
    <Sequence>
      <Fallback>
        <Sequence>
          <is_capacity_full/>
          <unload_resources/>
          <return_to_base/>
        </Sequence>
        <Sequence>
          <search_for_resources/>
          <collect_resource/>
          <scan_environment/>
          <report_status/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
    <Condition ID=""is_capacity_full""/>
    <Action ID=""unload_resources""/>
    <Action ID=""return_to_base""/>
    <Action ID=""search_for_resources""/>
    <Action ID=""collect_resource""/>
    <Action ID=""scan_environment""/>
    <Action ID=""report_status""/>
  </TreeNodesModel>
</root>",one,106.9389762878418,"<root BTCPP_format=""3"" main_tree_to_execute=""ResourceManagement"">  
	<BehaviorTree ID=""ResourceManagement"">    
		<Fallback name=""Resource Handling"">      
			<Sequence name=""Full Capacity Sequence"">        
				<is_capacity_full/>        
				<unload_resources/>        
				<return_to_base/>      
			</Sequence>      
			<Sequence name=""Normal Operation Sequence"">        
				<search_for_resources/>        
				<collect_resource/>        
				<scan_environment/>        
				<report_status/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_capacity_full""/>    
		<Action ID=""unload_resources""/>    
		<Action ID=""search_for_resources""/>    
		<Action ID=""collect_resource""/>    
		<Action ID=""scan_environment""/>    
		<Action ID=""return_to_base""/>    
		<Action ID=""report_status""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_weather_clear: Condition node: Check if the current weather is clear. Returns SUCCESS if clear, FAILURE otherwise.; proceed_with_operation: Action Node: Continue with the current operation. Always returns SUCCESS.; wait_for_clear_weather: Action Node: Pause operations until weather improves. Always returns SUCCESS.; deploy_weather_protection: Action Node: Activate weather protection mechanisms. Always returns SUCCESS.; report_weather_status: Action Node: Send weather status report to base. Always returns SUCCESS.; evaluate_weather_severity: Condition node: Assess the severity of the current weather conditions. Returns SUCCESS if severe, FAILURE otherwise.; initiate_emergency_protocol: Action Node: Start emergency procedures due to severe weather. Always returns SUCCESS.; maintain_operational_readiness: Action Node: Ensure systems are ready for operation post-weather. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""check weather; if clear, proceed with operation; if not clear and severe, initiate emergency protocol; otherwise, wait for clear weather"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""WeatherResponse"">
  <BehaviorTree ID=""WeatherResponse"">
    <Sequence>
      <is_weather_clear/>
      <proceed_with_operation/>
      <Fallback>
        <evaluate_weather_severity/>
        <Sequence>
          <initiate_emergency_protocol/>
          <maintain_operational_readiness/>
        </Sequence>
        <wait_for_clear_weather/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Sequence""/>
    <Condition ID=""is_weather_clear""/>
    <Action ID=""proceed_with_operation""/>
    <Control ID=""Fallback""/>
    <Condition ID=""evaluate_weather_severity""/>
    <Action ID=""initiate_emergency_protocol""/>
    <Action ID=""maintain_operational_readiness""/>
    <Action ID=""wait_for_clear_weather""/>
  </TreeNodesModel>
</root>",one,113.26486229896545,"<root BTCPP_format=""3"" main_tree_to_execute=""WeatherManagement"">  
	<BehaviorTree ID=""WeatherManagement"">    
		<Fallback name=""Weather Decision"">      
			<Sequence name=""Clear Weather Sequence"">        
				<is_weather_clear/>        
				<proceed_with_operation/>      
			</Sequence>      
			<Sequence name=""Severe Weather Sequence"">        
				<evaluate_weather_severity/>        
				<initiate_emergency_protocol/>      
			</Sequence>      
			<wait_for_clear_weather/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_weather_clear""/>    
		<Action ID=""proceed_with_operation""/>    
		<Action ID=""wait_for_clear_weather""/>    
		<Action ID=""deploy_weather_protection""/>    
		<Action ID=""report_weather_status""/>    
		<Condition ID=""evaluate_weather_severity""/>    
		<Action ID=""initiate_emergency_protocol""/>    
		<Action ID=""maintain_operational_readiness""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_dirty: Condition node: Determine if the current area requires cleaning. Returns SUCCESS if dirty, FAILURE otherwise.; clean_area: Action Node: Perform cleaning operations in the area. Always returns SUCCESS.; move_to_next_area: Action Node: Navigate to the next area designated for cleaning. Always returns SUCCESS.; check_battery: Condition node: Verify if the battery level is sufficient for cleaning tasks. Returns SUCCESS if sufficient, FAILURE otherwise.; recharge_battery: Action Node: Recharge the robot's battery. Always returns SUCCESS.; report_cleaning_status: Action Node: Report the status of cleaning operations. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the area is dirty and battery is sufficient, clean the area; otherwise, recharge the battery"". Structure the behavior tree to handle these conditions appropriately.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""CleaningBehavior"">
  <BehaviorTree ID=""CleaningBehavior"">
    <Sequence name=""Cleaning Sequence"">
      <is_area_dirty/>
      <check_battery/>
      <clean_area/>
    </Sequence>
    <recharge_battery/>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Sequence""/>
    <Condition ID=""is_area_dirty""/>
    <Condition ID=""check_battery""/>
    <Action ID=""clean_area""/>
    <Action ID=""recharge_battery""/>
    <Action ID=""move_to_next_area""/>
    <Action ID=""report_cleaning_status""/>
  </TreeNodesModel>
</root>",one,100.00491094589233,"<root BTCPP_format=""3"" main_tree_to_execute=""CleaningRoutine"">  
	<BehaviorTree ID=""CleaningRoutine"">    
		<Fallback name=""High-Level Decision"">      
			<Sequence name=""Clean Area Sequence"">        
				<is_area_dirty/>        
				<check_battery/>        
				<clean_area/>      
			</Sequence>      
			<Sequence name=""Recharge Battery Sequence"">        
				<is_area_dirty/>        
				<check_battery/>        
				<recharge_battery/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_area_dirty""/>    
		<Condition ID=""check_battery""/>    
		<Action ID=""clean_area""/>    
		<Action ID=""recharge_battery""/>    
		<Action ID=""move_to_next_area""/>    
		<Action ID=""report_cleaning_status""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  `IsBatteryCritical`: Condition node: Check if the battery level is critical. Returns SUCCESS if critical, FAILURE otherwise.;
  `ReturnToBase`: Action Node: Navigate back to the base station. Always returns SUCCESS.;
  `RechargeBattery`: Action Node: Recharge the battery. Always returns SUCCESS.;
  `PerformTask`: Action Node: Execute the assigned task. Always returns SUCCESS.;
  `MonitorBattery`: Condition node: Continuously monitor the battery level. Returns SUCCESS if monitoring is active, RUNNING otherwise.;
  `Parallel`: Control Node: Executes all children simultaneously.
}
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Create a behavior tree where the robot performs its assigned task while continuously monitoring the battery. If the battery becomes critical, it should return to base and recharge before resuming the task.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""TaskWithBatteryMonitoring"">
  <BehaviorTree ID=""TaskWithBatteryMonitoring"">
    <Parallel>
      <PerformTask/>
      <Sequence>
        <MonitorBattery/>
        <Fallback>
          <Sequence>
            <IsBatteryCritical/>
            <ReturnToBase/>
            <RechargeBattery/>
            <PerformTask/>
          </Sequence>
        </Fallback>
      </Sequence>
    </Parallel>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""IsBatteryCritical""/>
    <Condition ID=""MonitorBattery""/>
    <Action ID=""ReturnToBase""/>
    <Action ID=""RechargeBattery""/>
    <Action ID=""PerformTask""/>
    <Control ID=""Parallel""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",one,88.97752213478088,"<root BTCPP_format=""3"" main_tree_to_execute=""TaskExecution"">  
	<BehaviorTree ID=""TaskExecution"">    
		<Fallback name=""Main Fallback"">      
			<Sequence name=""Critical Battery Sequence"">        
				<IsBatteryCritical/>        
				<ReturnToBase/>        
				<RechargeBattery/>      
			</Sequence>      
			<Sequence name=""Normal Operation Sequence"">        
				<MonitorBattery/>        
				<PerformTask/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""IsBatteryCritical""/>    
		<Action ID=""ReturnToBase""/>    
		<Action ID=""RechargeBattery""/>    
		<Action ID=""PerformTask""/>    
		<Condition ID=""MonitorBattery""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_light_available: Condition node: Check if there is sufficient lighting in the area. Returns SUCCESS if sufficient, FAILURE otherwise.; turn_on_lights: Action Node: Activate the lighting system. Always returns SUCCESS.; perform_task: Action Node: Execute the designated task in the area. Always returns SUCCESS.; adjust_lighting: Action Node: Modify the lighting to optimal levels. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if light is available then perform the task, else turn on lights and adjust lighting"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""LightingControl"">
  <BehaviorTree ID=""LightingControl"">
    <Fallback name=""Lighting Fallback"">
      <Sequence name=""Light Available Sequence"">
        <is_light_available/>
        <perform_task/>
      </Sequence>
      <Sequence name=""Lighting Adjustment"">
        <turn_on_lights/>
        <adjust_lighting/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_light_available""/>
    <Action ID=""perform_task""/>
    <Action ID=""turn_on_lights""/>
    <Action ID=""adjust_lighting""/>
  </TreeNodesModel>
</root>",one,89.60835814476013,"<root BTCPP_format=""3"" main_tree_to_execute=""LightingManagement"">  
	<BehaviorTree ID=""LightingManagement"">    
		<Fallback name=""Lighting Decision"">      
			<Sequence name=""Sufficient Lighting Sequence"">        
				<is_light_available/>        
				<perform_task/>      
			</Sequence>      
			<Sequence name=""Insufficient Lighting Sequence"">        
				<turn_on_lights/>        
				<adjust_lighting/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_light_available""/>    
		<Action ID=""turn_on_lights""/>    
		<Action ID=""perform_task""/>    
		<Action ID=""adjust_lighting""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  is_patrol_complete: Condition node: Check if the patrol route is complete. Returns SUCCESS if complete, FAILURE otherwise.;
  return_to_base: Action Node: Navigate the robot back to the base. Always returns SUCCESS.;
  initiate_charging: Action Node: Start the charging process. Always returns SUCCESS.;
  is_battery_low: Condition node: Check if the battery level is low. Returns SUCCESS if low, FAILURE otherwise.;
  continue_patrolling: Action Node: Continue patrolling the area. Always returns SUCCESS.;
  send_status_update: Action Node: Send a status update to the control center. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""if patrol is complete then return to base and initiate charging; if battery is low, send status update, otherwise continue patrolling"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""PatrolManagement"">
  <BehaviorTree ID=""PatrolManagement"">
    <Sequence>
      <is_patrol_complete/>
      <Fallback>
        <Sequence>
          <return_to_base/>
          <initiate_charging/>
          <Fallback>
            <Sequence>
              <is_battery_low/>
              <send_status_update/>
            </Sequence>
            <continue_patrolling/>
          </Fallback>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Action ID=""initiate_charging""/>
    <Condition ID=""is_patrol_complete""/>
    <Condition ID=""is_battery_low""/>
    <Action ID=""return_to_base""/>
    <Action ID=""send_status_update""/>
    <Action ID=""continue_patrolling""/>
  </TreeNodesModel>
</root>",one,126.84672737121582,"<root BTCPP_format=""3"" main_tree_to_execute=""PatrolManagement"">  
	<BehaviorTree ID=""PatrolManagement"">    
		<Fallback name=""High-Level Decision"">      
			<Sequence name=""Patrol Complete Sequence"">        
				<is_patrol_complete/>        
				<return_to_base/>        
				<initiate_charging/>      
			</Sequence>      
			<Fallback name=""Battery and Patrol Management"">          
				<Sequence name=""Low Battery Sequence"">            
					<is_battery_low/>            
					<send_status_update/>          
				</Sequence>            
				<Sequence name=""Normal Operation Sequence"">              
					<continue_patrolling/>              
				</Sequence>          
			</Fallback>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_patrol_complete""/>    
		<Action ID=""return_to_base""/>    
		<Action ID=""initiate_charging""/>    
		<Condition ID=""is_battery_low""/>    
		<Action ID=""send_status_update""/>    
		<Action ID=""continue_patrolling""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  `is_delivery_available`: Condition node: Check if a delivery task is available. Returns SUCCESS if available, FAILURE otherwise.;
  `accept_delivery`: Action Node: Accept the delivery task. Always returns SUCCESS.;
  `navigate_to_destination`: Action Node: Navigate to the delivery destination. Always returns SUCCESS.;
  `deliver_package`: Action Node: Deliver the package. Always returns SUCCESS.;
  `is_destination_reachable`: Condition node: Check if the destination is reachable. Returns SUCCESS if reachable, FAILURE otherwise.;
  `report_failure`: Action Node: Report delivery failure. Always returns SUCCESS.;
  `idle`: Action Node: Remain idle awaiting tasks. Always returns SUCCESS.;
}
to construct a behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if a delivery is available then accept it and check if destination is reachable; if reachable, navigate and deliver the package; otherwise, report failure; else remain idle"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""DeliveryTask"">
  <BehaviorTree ID=""DeliveryTask"">
    <Fallback name=""Delivery Fallback"">
      <Sequence name=""Handle Delivery"">
        <is_delivery_available/>
        <accept_delivery/>
        <Fallback name=""Destination Check"">
          <Sequence name=""Reachable Destination"">
            <is_destination_reachable/>
            <navigate_to_destination/>
            <deliver_package/>
          </Sequence>
          <report_failure/>
        </Fallback>
      </Sequence>
      <idle/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Sequence ID=""Handle Delivery""/>
    <Fallback ID=""Destination Check""/>
    <Sequence ID=""Reachable Destination""/>
    <Condition ID=""is_delivery_available""/>
    <Condition ID=""is_destination_reachable""/>
    <Action ID=""accept_delivery""/>
    <Action ID=""navigate_to_destination""/>
    <Action ID=""deliver_package""/>
    <Action ID=""report_failure""/>
    <Action ID=""idle""/>
  </TreeNodesModel>
</root>",one,116.2494797706604,"<root BTCPP_format=""3"" main_tree_to_execute=""DeliveryManagement"">  
	<BehaviorTree ID=""DeliveryManagement"">    
		<Fallback name=""High-Level Decision"">      
			<Sequence name=""Delivery Sequence"">        
				<is_delivery_available/>        
				<accept_delivery/>        
				<Fallback name=""Destination Check"">          
					<Sequence name=""Reachable Destination"">            
						<is_destination_reachable/>            
						<navigate_to_destination/>            
						<deliver_package/>          
					</Sequence>          
					<report_failure/>      
				</Fallback>    
			</Sequence>      
			<idle/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_delivery_available""/>    
		<Action ID=""accept_delivery""/>    
		<Action ID=""navigate_to_destination""/>    
		<Action ID=""deliver_package""/>    
		<Condition ID=""is_destination_reachable""/>    
		<Action ID=""report_failure""/>    
		<Action ID=""idle""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_energy_full: Condition node: Check if the energy level is full. Returns SUCCESS if full, FAILURE otherwise.; recharge_energy: Action Node: Initiate energy recharging process. Always returns SUCCESS.; perform_task: Action Node: Execute the designated task. Always returns SUCCESS.; monitor_energy: Action Node: Continuously monitor energy levels. Always returns SUCCESS.; notify_manager: Action Node: Notify the manager about energy status. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if energy is not full, recharge energy and notify the manager; otherwise, perform the task"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EnergyManagement"">
  <BehaviorTree ID=""EnergyManagement"">
    <Fallback name=""Energy Fallback"">
      <Sequence name=""Recharge and Notify"">
        <is_energy_full/>
        <perform_task/>
      </Sequence>
      <Sequence name=""Handle Low Energy"">
        <monitor_energy/>
        <recharge_energy/>
        <notify_manager/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_energy_full""/>
    <Action ID=""perform_task""/>
    <Action ID=""monitor_energy""/>
    <Action ID=""recharge_energy""/>
    <Action ID=""notify_manager""/>
  </TreeNodesModel>
</root>",one,88.82165551185608,"<root BTCPP_format=""3"" main_tree_to_execute=""EnergyManagement"">  
	<BehaviorTree ID=""EnergyManagement"">    
		<Fallback name=""EnergyStatusDecision"">      
			<Sequence name=""EnergyRechargeSequence"">        
				<is_energy_full/>        
				<recharge_energy/>        
				<notify_manager/>      
			</Sequence>      
			<Sequence name=""TaskExecutionSequence"">        
				<perform_task/>        
				<monitor_energy/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_energy_full""/>    
		<Action ID=""recharge_energy""/>    
		<Action ID=""perform_task""/>    
		<Action ID=""monitor_energy""/>    
		<Action ID=""notify_manager""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_charge_needed: Condition node: Check if the robot needs to charge. Returns SUCCESS if charging is needed, FAILURE otherwise.; navigate_to_charging_station: Action Node: Move the robot to the charging station. Always returns SUCCESS.; start_charging: Action Node: Begin the charging process. Always returns SUCCESS.; monitor_battery: Condition node: Continuously monitor the battery level. Returns SUCCESS if sufficient, FAILURE otherwise.; perform_task: Action Node: Execute the primary task. Always returns SUCCESS.; notify_low_battery: Action Node: Send a low battery notification. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""monitor the battery level continuously, perform tasks when battery is sufficient, and if charging is needed, navigate to the charging station and start charging"". Ensure the robot prioritizes charging when necessary.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Fallback name=""Battery Fallback"">
      <Sequence name=""Charging Sequence"">
        <is_charge_needed/>
        <notify_low_battery/>
        <navigate_to_charging_station/>
        <start_charging/>
      </Sequence>
      <Sequence name=""Task Execution"">
        <monitor_battery/>
        <perform_task/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_charge_needed""/>
    <Action ID=""navigate_to_charging_station""/>
    <Action ID=""start_charging""/>
    <Condition ID=""monitor_battery""/>
    <Action ID=""perform_task""/>
    <Action ID=""notify_low_battery""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence""/>
  </TreeNodesModel>
</root>",one,101.87405753135681,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""Battery Management"">      
			<Sequence name=""Charging Sequence"">        
				<is_charge_needed/>        
				<navigate_to_charging_station/>        
				<start_charging/>      
			</Sequence>      
			<Sequence name=""Task Execution Sequence"">        
				<monitor_battery/>        
				<perform_task/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_charge_needed""/>    
		<Action ID=""navigate_to_charging_station""/>    
		<Action ID=""start_charging""/>    
		<Condition ID=""monitor_battery""/>    
		<Action ID=""perform_task""/>    
		<Action ID=""notify_low_battery"" editable=""true"">
      	<input_port name=""battery_level""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_temperature_high: Condition node: Check if the environment temperature is above the safe limit. Returns SUCCESS if high, FAILURE otherwise.;  
activate_cooling_system: Action Node: Turn on the cooling system. Always returns SUCCESS.;  
is_fire_detected: Condition node: Detect the presence of fire. Returns SUCCESS if detected, FAILURE otherwise.;  
call_fire_fighters: Action Node: Notify fire fighters. Always returns SUCCESS.;  
monitor_environment: Action Node: Continuously monitor environmental conditions. Always returns SUCCESS.;  
shutdown_systems: Action Node: Safely shutdown all systems. Always returns SUCCESS.;  
}

To construct a behavior tree in XML format for the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if temperature is high then activate cooling system; if fire is detected, call fire fighters and shutdown systems; otherwise, continue monitoring the environment.""","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EmergencyResponse"">
  <BehaviorTree ID=""EmergencyResponse"">
    <Fallback name=""Main Fallback"">
      <Sequence name=""High Temperature Sequence"">
        <is_temperature_high/>
        <activate_cooling_system/>
      </Sequence>
      <Sequence name=""Fire Detection Sequence"">
        <is_fire_detected/>
        <call_fire_fighters/>
        <shutdown_systems/>
      </Sequence>
      <monitor_environment/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_temperature_high""/>
    <Action ID=""activate_cooling_system""/>
    <Condition ID=""is_fire_detected""/>
    <Action ID=""call_fire_fighters""/>
    <Action ID=""shutdown_systems""/>
    <Action ID=""monitor_environment""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence""/>
  </TreeNodesModel>
</root>",one,105.37551498413086,"<root BTCPP_format=""3"" main_tree_to_execute=""EnvironmentalMonitoring"">  
	<BehaviorTree ID=""EnvironmentalMonitoring"">    
		<Fallback name=""High-Level Decision"">      
			<Sequence name=""Temperature Control"">        
				<is_temperature_high/>        
				<activate_cooling_system/>      
			</Sequence>      
			<Sequence name=""Fire Response"">        
				<is_fire_detected/>        
				<call_fire_fighters/>        
				<shutdown_systems/>      
			</Sequence>      
			<monitor_environment/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_temperature_high""/>    
		<Action ID=""activate_cooling_system""/>    
		<Condition ID=""is_fire_detected""/>    
		<Action ID=""call_fire_fighters""/>    
		<Action ID=""shutdown_systems""/>    
		<Action ID=""monitor_environment""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  survey_area: Action Node: Survey the designated area. Always returns SUCCESS.;
  take_picture: Action Node: Capture an image of the area. Always returns SUCCESS.;
  return_home: Action Node: Return to the home base. Always returns SUCCESS
}
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""survey an area, take a picture, and then return home"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""DroneSurvey"">
  <BehaviorTree ID=""DroneSurvey"">
    <Sequence name=""Mission Sequence"">
      <survey_area/>
      <take_picture/>
      <return_home/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID=""return_home""/>
    <Action ID=""survey_area""/>
    <Action ID=""take_picture""/>
  </TreeNodesModel>
</root>",one,55.90356183052063,"<root BTCPP_format=""3"" main_tree_to_execute=""AreaSurveillance"">  
  <BehaviorTree ID=""AreaSurveillance"">    
    <Sequence name=""Surveillance Sequence"">      
      <survey_area/>      
      <take_picture/>      
      <return_home/>    
    </Sequence>  
  </BehaviorTree>  
  <TreeNodesModel>    
    <Action ID=""survey_area""/>    
    <Action ID=""take_picture""/>    
    <Action ID=""return_home""/>  
  </TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{is_humidity_high: Condition node: Check if humidity level is high. Returns SUCCESS if high, FAILURE otherwise.;
activate_dehumidifier: Action Node: Turn on the dehumidifier. Always returns SUCCESS.;
deactivate_dehumidifier: Action Node: Turn off the dehumidifier. Always returns SUCCESS.;
monitor_conditions: Action Node: Continuously monitor environmental conditions. Always returns SUCCESS.}

To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""if humidity is high, activate dehumidifier, else deactivate it while monitoring conditions"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""HumidityControl"">
  <BehaviorTree ID=""HumidityControl"">
    <Sequence name=""Main Sequence"">
      <Fallback name=""Humidity Check"">
        <is_humidity_high/>
        <activate_dehumidifier/>
      </Fallback>
      <deactivate_dehumidifier/>
      <monitor_conditions/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_humidity_high""/>
    <Action ID=""activate_dehumidifier""/>
    <Action ID=""deactivate_dehumidifier""/>
    <Action ID=""monitor_conditions""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",one,85.33937382698059,"<root BTCPP_format=""3"" main_tree_to_execute=""HumidityControl"">  
	<BehaviorTree ID=""HumidityControl"">    
		<Fallback name=""Humidity Management"">      
			<Sequence name=""High Humidity Sequence"">        
				<is_humidity_high/>        
				<activate_dehumidifier/>      
			</Sequence>      
			<Sequence name=""Low Humidity Sequence"">        
				<deactivate_dehumidifier/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_humidity_high""/>    
		<Action ID=""activate_dehumidifier""/>    
		<Action ID=""deactivate_dehumidifier""/>    
		<Action ID=""monitor_conditions""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_item_available: Condition node: Check if the target item is available for collection. Returns SUCCESS if available, FAILURE otherwise.; collect_item: Action Node: Collect the available item. Always returns SUCCESS.; search_for_item: Action Node: Search the environment for the item. Always returns SUCCESS; store_item: Action Node: Store the collected item in the inventory. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""if the target item is available then collect and store it, otherwise search for the item"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behaviors you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ItemCollection"">
  <BehaviorTree ID=""ItemCollection"">
    <Fallback name=""Item Availability Fallback"">
      <Sequence name=""Collect Sequence"">
        <is_item_available/>
        <collect_item/>
        <store_item/>
      </Sequence>
      <search_for_item/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_item_available""/>
    <Action ID=""collect_item""/>
    <Action ID=""store_item""/>
    <Action ID=""search_for_item""/>
  </TreeNodesModel>
</root>",one,78.98814916610718,"<root BTCPP_format=""3"" main_tree_to_execute=""ItemManagement"">  
	<BehaviorTree ID=""ItemManagement"">    
		<Fallback name=""ItemCollection"">      
			<Sequence name=""Collect and Store"">        
				<is_item_available/>        
				<collect_item/>        
				<store_item/>      
			</Sequence>      
			<search_for_item/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_item_available""/>    
		<Action ID=""collect_item""/>    
		<Action ID=""search_for_item""/>    
		<Action ID=""store_item""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_intrusion_detected: Condition node: Check if an intrusion is detected. Returns SUCCESS if detected, FAILURE otherwise.; patrol_route: Action Node: Follow the designated patrol route. Always returns SUCCESS.; report_intrusion: Action Node: Send an intrusion alert to the base. Always returns SUCCESS.; update_patrol_status: Action Node: Update the patrol status in the system. Always returns SUCCESS.; idle: Action Node: Remain stationary and monitor the environment. Always returns SUCCESS.; return_to_base: Action Node: Navigate back to the base station. Always returns SUCCESS.; } To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""Patrol the perimeter and report any intrusion"". Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""PerimeterPatrol"">
  <BehaviorTree ID=""PerimeterPatrol"">
    <Fallback name=""Intrusion Handler"">
      <Sequence name=""Intrusion Detection and Reporting"">
        <is_intrusion_detected/>
        <report_intrusion/>
        <update_patrol_status/>
      </Sequence>
      <patrol_route/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_intrusion_detected""/>
    <Action ID=""report_intrusion""/>
    <Action ID=""update_patrol_status""/>
    <Action ID=""patrol_route""/>
    <Action ID=""idle""/>
    <Action ID=""return_to_base""/>
  </TreeNodesModel>
</root>",one,94.71972346305847,"<root BTCPP_format=""3"" main_tree_to_execute=""PerimeterPatrol"">  
	<BehaviorTree ID=""PerimeterPatrol"">    
		<Fallback name=""Main Patrol Fallback"">      
			<Sequence name=""Intrusion Sequence"">        
				<is_intrusion_detected/>        
				<report_intrusion/>      
			</Sequence>      
			<Sequence name=""Normal Patrol Sequence"">        
				<patrol_route/>        
				<update_patrol_status/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_intrusion_detected""/>    
		<Action ID=""patrol_route""/>    
		<Action ID=""report_intrusion""/>    
		<Action ID=""update_patrol_status""/>    
		<Action ID=""idle""/>    
		<Action ID=""return_to_base""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","Use only the following behaviors structured as a dictionary: {MonitorTemperature: Condition Node: Check if the temperature is within acceptable limits. Returns SUCCESS if normal, FAILURE otherwise.; ActivateCoolingSystem: Action Node: Turn on the cooling system. Always returns SUCCESS.; DeactivateCoolingSystem: Action Node: Turn off the cooling system. Always returns SUCCESS.; LogTemperature: Action Node: Log the current temperature reading. Always returns SUCCESS.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.; SubTree: Special Node: Execute a referenced BehaviorTree as a subtree}. Including any behavior not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""continuously monitor temperature, activate cooling if high, log the temperature, and ensure the cooling system is deactivated when temperature is normal.""","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""TemperatureControl"">
  <BehaviorTree ID=""ActivateCooling"">
    <Sequence>
      <ActivateCoolingSystem/>
      <LogTemperature message=""Cooling system activated due to high temperature.""/>
    </Sequence>
  </BehaviorTree>
  <BehaviorTree ID=""DeactivateCooling"">
    <Sequence>
      <DeactivateCoolingSystem/>
      <LogTemperature message=""Cooling system deactivated as temperature is normal.""/>
    </Sequence>
  </BehaviorTree>
  <BehaviorTree ID=""TemperatureControl"">
    <Sequence>
      <MonitorTemperature/>
      <Fallback>
        <SubTree ID=""ActivateCooling""/>
        <SubTree ID=""DeactivateCooling""/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""MonitorTemperature""/>
    <Action ID=""ActivateCoolingSystem""/>
    <Action ID=""DeactivateCoolingSystem""/>
    <Action ID=""LogTemperature"" editable=""true"">
      <input_port name=""message""/>
    </Action>
  </TreeNodesModel>
</root>",one,90.29214310646057,"<root BTCPP_format=""3"" main_tree_to_execute=""TemperatureControl"">  
	<BehaviorTree ID=""TemperatureControl"">    
		<Sequence name=""TemperatureMonitoring"">      
			<MonitorTemperature/>      
			<Fallback name=""TemperatureResponse"">        
				<Sequence name=""HighTemperatureSequence"">          
					<ActivateCoolingSystem/>          
					<LogTemperature/>        
				</Sequence>        
				<ForceSuccess/>      
			</Fallback>      
			<DeactivateCoolingSystem/>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""MonitorTemperature""/>    
		<Action ID=""ActivateCoolingSystem""/>    
		<Action ID=""DeactivateCoolingSystem""/>    
		<Action ID=""LogTemperature""/>    
		<Decorator ID=""ForceSuccess""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the robot's battery is low. Returns SUCCESS if low, FAILURE otherwise.; navigate_to_charging_station: Action Node: Navigate to the charging station. Always returns SUCCESS.; charge_battery: Action Node: Begin charging the battery. Always returns SUCCESS.; monitor_battery: Condition node: Continuously monitor the battery status. Returns SUCCESS while charging, FAILURE when fully charged.; resume_tasks: Action Node: Resume previous tasks after charging. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the battery is low, navigate to the charging station and begin charging; monitor the battery, and once fully charged, resume previous tasks"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Sequence>
      <is_battery_low/>
      <Fallback>
        <Sequence>
          <navigate_to_charging_station/>
          <charge_battery/>
          <monitor_battery/>
          <resume_tasks/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_battery_low""/>
    <Control ID=""Fallback""/>
    <Action ID=""navigate_to_charging_station""/>
    <Action ID=""charge_battery""/>
    <Condition ID=""monitor_battery""/>
    <Action ID=""resume_tasks""/>
  </TreeNodesModel>
</root>",one,100.35635828971863,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""Battery Management"">      
			<Sequence name=""Low Battery Sequence"">        
				<is_battery_low/>        
				<navigate_to_charging_station/>        
				<charge_battery/>      
			</Sequence>      
			<Sequence name=""Monitoring and Resumption"">        
				<monitor_battery/>        
				<resume_tasks/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_battery_low""/>    
		<Action ID=""navigate_to_charging_station""/>    
		<Action ID=""charge_battery""/>    
		<Condition ID=""monitor_battery""/>    
		<Action ID=""resume_tasks""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_obstacle: Condition node: Check if an obstacle is detected. Returns SUCCESS if detected, FAILURE otherwise.; avoid_obstacle: Action Node: Maneuver to avoid the detected obstacle. Always returns SUCCESS.; proceed_forward: Action Node: Move forward towards the goal. Always returns SUCCESS.; scan_area: Action Node: Perform a 360-degree scan of the surroundings. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if an obstacle is detected then avoid it and proceed forward, otherwise scan the area"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">
  <BehaviorTree ID=""ObstacleAvoidance"">
    <Fallback name=""Obstacle Fallback"">
      <Sequence name=""Navigate Path"">
        <detect_obstacle/>
        <avoid_obstacle maneuver=""""/>
        <proceed_forward speed=""""/>
      </Sequence>
      <scan_area/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""detect_obstacle""/>
    <Action ID=""avoid_obstacle"" editable=""true"">
      <input_port name=""maneuver""/>
    </Action>
    <Action ID=""proceed_forward"" editable=""true"">
      <input_port name=""speed""/>
    </Action>
    <Action ID=""scan_area""/>
  </TreeNodesModel>
</root>",one,86.40572023391724,"<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">  
	<BehaviorTree ID=""ObstacleAvoidance"">    
		<Fallback name=""Obstacle Handling"">      
			<Sequence name=""Obstacle Detected"">        
				<detect_obstacle/>        
				<avoid_obstacle/>        
				<proceed_forward/>      
			</Sequence>      
			<Sequence name=""No Obstacle Detected"">        
				<scan_area/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""detect_obstacle""/>    
		<Action ID=""avoid_obstacle""/>    
		<Action ID=""proceed_forward""/>    
		<Action ID=""scan_area""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {
  is_object_collected: Condition node: Check if the object has been collected. Returns SUCCESS if collected, FAILURE otherwise.;
  move_to_object: Action Node: Move to the object's location. Always returns SUCCESS.;
  collect_object: Action Node: Collect the object. Always returns SUCCESS.;
  report_status: Action Node: Report the current status. Always returns SUCCESS.;
  Sequence: Control Node: Executes its children in order.
  Fallback: Control Node: Selects the first child that returns SUCCESS.
}. 
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the object is not collected, move to the object and collect it; then report status"". Ensure proper use of Sequence and Fallback nodes.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObjectCollection"">
  <BehaviorTree ID=""ObjectCollection"">
    <Sequence name=""Collection Sequence"">
      <Fallback name=""Check and Collect"">
        <is_object_collected/>
        <Sequence>
          <move_to_object/>
          <collect_object/>
        </Sequence>
      </Fallback>
      <report_status/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_object_collected""/>
    <Action ID=""move_to_object""/>
    <Action ID=""collect_object""/>
    <Action ID=""report_status""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",one,85.69787001609802,"<root BTCPP_format=""3"" main_tree_to_execute=""ObjectCollection"">  
	<BehaviorTree ID=""ObjectCollection"">    
		<Fallback name=""High-Level Decision"">      
			<Sequence name=""Object Not Collected"">        
				<is_object_collected/>        
				<move_to_object/>        
				<collect_object/>      
			</Sequence>      
			<report_status/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_object_collected""/>    
		<Action ID=""move_to_object""/>    
		<Action ID=""collect_object""/>    
		<Action ID=""report_status""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_obstacle: Condition node: Check for obstacles in the path. Returns SUCCESS if obstacle detected, FAILURE otherwise.; avoid_obstacle: Action Node: Maneuver to avoid the detected obstacle. Always returns SUCCESS.; follow_path: Action Node: Follow the predefined path. Always returns SUCCESS.; report_status: Action Node: Report current status to the control center. Always returns SUCCESS.; wait_for_command: Action Node: Wait for further instructions. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""continuously follow the path; if an obstacle is detected, avoid it and report the status; otherwise wait for the next command."" Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""PathFollowing"">
  <BehaviorTree ID=""PathFollowing"">
    <Sequence>
      <follow_path/>
      <Fallback>
        <Sequence>
          <detect_obstacle/>
          <avoid_obstacle/>
          <report_status/>
        </Sequence>
        <wait_for_command/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""detect_obstacle""/>
    <Action ID=""avoid_obstacle""/>
    <Action ID=""follow_path""/>
    <Action ID=""report_status""/>
    <Action ID=""wait_for_command""/>
  </TreeNodesModel>
</root>",one,95.2382984161377,"<root BTCPP_format=""3"" main_tree_to_execute=""PathFollowing"">  
	<BehaviorTree ID=""PathFollowing"">    
		<Fallback name=""Obstacle Handling"">      
			<Sequence name=""Obstacle Detected"">        
				<detect_obstacle/>        
				<avoid_obstacle/>        
				<report_status/>      
			</Sequence>      
			<Sequence name=""Normal Operation"">        
				<follow_path/>        
				<wait_for_command/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""detect_obstacle""/>    
		<Action ID=""avoid_obstacle""/>    
		<Action ID=""follow_path""/>    
		<Action ID=""report_status""/>    
		<Action ID=""wait_for_command""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_illuminated: Condition node: Check if the operational area is sufficiently illuminated. Returns SUCCESS if illuminated, FAILURE otherwise.; activate_lights: Action Node: Turn on additional lights. Always returns SUCCESS.; begin_operation: Action Node: Start the main operational tasks. Always returns SUCCESS.; halt_operations: Action Node: Stop all operational activities. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the area is illuminated, begin operation; otherwise, activate additional lights and halt operations"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""IlluminationControl"">
  <BehaviorTree ID=""IlluminationControl"">
    <Fallback name=""Illumination Check"">
      <Sequence name=""Operate Area"">
        <is_area_illuminated/>
        <begin_operation/>
      </Sequence>
      <Sequence name=""Light Adjustment and Halt"">
        <activate_lights/>
        <halt_operations/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_area_illuminated""/>
    <Action ID=""activate_lights""/>
    <Action ID=""begin_operation""/>
    <Action ID=""halt_operations""/>
  </TreeNodesModel>
</root>",one,83.34302544593811,"<root BTCPP_format=""3"" main_tree_to_execute=""AreaIlluminationManagement"">  
	<BehaviorTree ID=""AreaIlluminationManagement"">    
		<Fallback name=""Illumination Decision"">      
			<Sequence name=""Area Illuminated Sequence"">        
				<is_area_illuminated/>        
				<begin_operation/>      
			</Sequence>      
			<Sequence name=""Illumination Activation Sequence"">        
				<activate_lights/>        
				<halt_operations/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_area_illuminated""/>    
		<Action ID=""activate_lights""/>    
		<Action ID=""begin_operation""/>    
		<Action ID=""halt_operations""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  BatteryLow: Condition node: Check if the battery level is below a threshold. Returns SUCCESS if low, FAILURE otherwise.; 
  ReturnToBase: Action Node: Navigate the agent back to the base station. Always returns SUCCESS.; 
  ChargeBattery: Action Node: Begin charging the battery. Always returns SUCCESS.; 
  NotifyOperator: Action Node: Send a notification to the operator. Always returns SUCCESS.; 
  Wait: Action Node: Pause for a specified duration. Always returns SUCCESS.; 
  Sequence: Control Node: Executes child nodes in sequence.;
  Fallback: Control Node: Executes child nodes until one succeeds.
}. 
To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if battery is low, then return to base and charge; if charging is successful, notify the operator, otherwise wait"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Sequence>
      <BatteryLow/>
      <Fallback>
        <Sequence>
          <ReturnToBase/>
          <ChargeBattery/>
          <NotifyOperator/>
        </Sequence>
        <Wait/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""BatteryLow""/>
    <Action ID=""ReturnToBase""/>
    <Action ID=""ChargeBattery""/>
    <Action ID=""NotifyOperator""/>
    <Action ID=""Wait""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",one,87.56903839111328,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""Battery Management"">      
			<Sequence name=""Low Battery Sequence"">        
				<BatteryLow/>        
				<ReturnToBase/>        
				<ChargeBattery/>      
			</Sequence>      
			<Sequence name=""Charging Success"">        
				<NotifyOperator/>      
			</Sequence>      
			<Wait/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""BatteryLow""/>    
		<Action ID=""ReturnToBase""/>    
		<Action ID=""ChargeBattery""/>    
		<Action ID=""NotifyOperator""/>    
		<Action ID=""Wait""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below the threshold. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the robot back to the charging station. Always returns SUCCESS.; charge_battery: Action Node: Charge the robot's battery. Always returns SUCCESS.; continue_task: Action Node: Continue performing the current task. Always returns SUCCESS.; notify_operator: Action Node: Send a notification to the operator about the low battery status. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the battery is low then return to base and charge; otherwise, continue the current task and notify the operator if battery becomes low during the task"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Sequence>
      <Fallback>
        <Sequence>
          <is_battery_low/>
          <Sequence>
            <return_to_base/>
            <charge_battery/>
          </Sequence>
        </Sequence>
        <Sequence>
          <continue_task/>
          <Fallback>
            <is_battery_low/>
            <notify_operator/>
          </Fallback>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
    <Condition ID=""is_battery_low""/>
    <Action ID=""return_to_base""/>
    <Action ID=""charge_battery""/>
    <Action ID=""continue_task""/>
    <Action ID=""notify_operator""/>
  </TreeNodesModel>
</root>",one,96.41870379447937,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""Battery Management"">      
			<Sequence name=""Low Battery Sequence"">        
				<is_battery_low/>        
				<return_to_base/>        
				<charge_battery/>      
			</Sequence>      
			<Sequence name=""Normal Operation Sequence"">        
				<continue_task/>        
				<is_battery_low/>        
				<notify_operator/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_battery_low""/>    
		<Action ID=""return_to_base""/>    
		<Action ID=""charge_battery""/>    
		<Action ID=""continue_task""/>    
		<Action ID=""notify_operator""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_resource_available: Condition node: Check if the desired resource is available. Returns SUCCESS if available, FAILURE otherwise.;  
collect_resource: Action Node: Collect the available resource. Always returns SUCCESS.;  
notify_teammates: Action Node: Send a notification to team members about resource status. Always returns SUCCESS.;  
search_alternate_source: Action Node: Search for an alternate resource source. Always returns SUCCESS.;  
}.  
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if the resource is available, collect it and notify teammates; otherwise, search for an alternate source"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
  <BehaviorTree ID=""ResourceCollection"">
    <Fallback>
      <Sequence>
        <is_resource_available/>
        <Sequence>
          <collect_resource/>
          <notify_teammates/>
        </Sequence>
      </Sequence>
      <search_alternate_source/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_resource_available""/>
    <Action ID=""collect_resource""/>
    <Action ID=""notify_teammates""/>
    <Action ID=""search_alternate_source""/>
  </TreeNodesModel>
</root>",one,85.83295559883118,"<root BTCPP_format=""3"" main_tree_to_execute=""ResourceManagement"">  
	<BehaviorTree ID=""ResourceManagement"">    
		<Fallback name=""Resource Decision"">      
			<Sequence name=""Resource Available Sequence"">        
				<is_resource_available/>        
				<collect_resource/>        
				<notify_teammates/>      
			</Sequence>      
			<Sequence name=""Alternate Source Sequence"">        
				<search_alternate_source/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_resource_available""/>    
		<Action ID=""collect_resource""/>    
		<Action ID=""notify_teammates""/>    
		<Action ID=""search_alternate_source""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {MoveForward: Action Node: Move the robot forward. Always returns SUCCESS.; TurnLeft: Action Node: Turn the robot to the left. Always returns SUCCESS.; CheckBattery: Condition Node: Check if the battery level is above a threshold. Returns SUCCESS if true, FAILURE otherwise.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""check the battery level, if sufficient move forward three times, then turn left"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryCheckTree"">
  <BehaviorTree ID=""BatteryCheckTree"">
    <Sequence>
      <CheckBattery threshold=""50%""/>
      <Sequence>
        <MoveForward times=""3""/>
        <TurnLeft/>
      </Sequence>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID=""MoveForward"" editable=""true"">
      <input_port name=""times""/>
    </Action>
    <Action ID=""TurnLeft""/>
    <Condition ID=""CheckBattery"" editable=""true"">
      <input_port name=""threshold""/>
    </Condition>
  </TreeNodesModel>
</root>",one,76.1383547782898,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryCheckAndNavigation"">  
	<BehaviorTree ID=""BatteryCheckAndNavigation"">    
		<Sequence name=""Main Navigation Sequence"">      
			<CheckBattery/>      
			<Fallback name=""Battery Check Fallback"">        
				<Sequence name=""Move Forward Sequence"">          
					<MoveForward/>          
					<MoveForward/>          
					<MoveForward/>          
				</Sequence>        
				<TurnLeft/>      
			</Fallback>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""CheckBattery""/>    
		<Action ID=""MoveForward""/>    
		<Action ID=""TurnLeft""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_energy_full: Condition node: Check if energy is full. Returns SUCCESS if full, FAILURE otherwise.; is_charge_needed: Condition node: Check if charging is needed. Returns SUCCESS if needed, FAILURE otherwise.; move_to_charge_station: Action Node: Move to the charging station. Always returns SUCCESS.; start_charging: Action Node: Begin charging. Always returns SUCCESS.; monitor_energy: Action Node: Monitor energy levels. Always returns SUCCESS.; resume_operations: Action Node: Resume normal operations. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""if energy is full, monitor energy; if charging is needed, move to charge station and start charging; otherwise, resume operations."" Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EnergyManagement"">
  <BehaviorTree ID=""EnergyManagement"">
    <Fallback>
      <Sequence name=""Energy Full"">
        <is_energy_full/>
        <monitor_energy/>
      </Sequence>
      <Sequence name=""Charging Needed"">
        <is_charge_needed/>
        <move_to_charge_station/>
        <start_charging/>
      </Sequence>
      <resume_operations/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_energy_full""/>
    <Condition ID=""is_charge_needed""/>
    <Action ID=""move_to_charge_station""/>
    <Action ID=""start_charging""/>
    <Action ID=""monitor_energy""/>
    <Action ID=""resume_operations""/>
  </TreeNodesModel>
</root>",one,104.77378463745117,"<root BTCPP_format=""3"" main_tree_to_execute=""EnergyManagement"">  
	<BehaviorTree ID=""EnergyManagement"">    
		<Fallback name=""Energy Management"">      
			<Sequence name=""Full Energy Sequence"">        
				<is_energy_full/>        
				<monitor_energy/>      
			</Sequence>      
			<Sequence name=""Charge Needed Sequence"">        
				<is_charge_needed/>        
				<move_to_charge_station/>        
				<start_charging/>      
			</Sequence>      
			<Sequence name=""Normal Operation Sequence"">        
				<resume_operations/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_energy_full""/>    
		<Condition ID=""is_charge_needed""/>    
		<Action ID=""move_to_charge_station""/>    
		<Action ID=""start_charging""/>    
		<Action ID=""monitor_energy""/>    
		<Action ID=""resume_operations""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {IsEnemyVisible: Condition node: Check if an enemy is currently visible. Returns SUCCESS if visible, FAILURE otherwise.; MoveToEnemy: Action Node: Navigate towards the detected enemy. Always returns SUCCESS.; AttackEnemy: Action Node: Engage and attack the enemy. Always returns SUCCESS.; Evade: Action Node: Perform evasive maneuvers. Always returns SUCCESS.; PatrolArea: Action Node: Continue patrolling the designated area. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if an enemy is visible, move to the enemy and attack; if no enemy is visible, evade and continue patrolling"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EnemyEngagement"">
  <BehaviorTree ID=""EnemyEngagement"">
    <Fallback>
      <Sequence>
        <IsEnemyVisible/>
        <Sequence>
          <MoveToEnemy/>
          <AttackEnemy/>
        </Sequence>
      </Sequence>
      <Sequence>
        <Evade/>
        <PatrolArea/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""IsEnemyVisible""/>
    <Action ID=""MoveToEnemy""/>
    <Action ID=""AttackEnemy""/>
    <Action ID=""Evade""/>
    <Action ID=""PatrolArea""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence""/>
  </TreeNodesModel>
</root>",one,87.62268018722534,"<root BTCPP_format=""3"" main_tree_to_execute=""EnemyEngagement"">  
	<BehaviorTree ID=""EnemyEngagement"">    
		<Fallback name=""High-Level Decision"">      
			<Sequence name=""Engage Enemy Sequence"">        
				<IsEnemyVisible/>        
				<MoveToEnemy/>        
				<AttackEnemy/>      
			</Sequence>      
			<Sequence name=""Patrol and Evade Sequence"">        
				<Evade/>        
				<PatrolArea/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""IsEnemyVisible""/>    
		<Action ID=""MoveToEnemy""/>    
		<Action ID=""AttackEnemy""/>    
		<Action ID=""Evade""/>    
		<Action ID=""PatrolArea""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","Use only the following behaviors structured as a dictionary: {DetectIntruder: Condition node: Detects presence of an intruder. Returns SUCCESS if detected, FAILURE otherwise.; SoundAlarm: Action Node: Sounds an alarm to alert the area. Always returns SUCCESS.; CallSecurity: Action Node: Initiates a call to security personnel. Always returns SUCCESS.; PatrolArea: Action Node: Begins or continues patrolling the area. Always returns SUCCESS.}. Including any behavior not in this dictionary will result in failure, so avoid using them.","generate behavior tree to ""continuously patrol the area, but if an intruder is detected, sound the alarm and call security"". Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""SecurityPatrol"">
  <BehaviorTree ID=""SecurityPatrol"">
    <Fallback>
      <Sequence>
        <DetectIntruder/>
        <SoundAlarm/>
        <CallSecurity/>
      </Sequence>
      <PatrolArea/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""DetectIntruder""/>
    <Action ID=""SoundAlarm""/>
    <Action ID=""CallSecurity""/>
    <Action ID=""PatrolArea""/>
  </TreeNodesModel>
</root>",one,78.82798671722412,"<root BTCPP_format=""3"" main_tree_to_execute=""AreaPatrol"">  
	<BehaviorTree ID=""AreaPatrol"">    
		<Fallback name=""Intruder Handling"">      
			<Sequence name=""Intruder Detected Sequence"">        
				<DetectIntruder/>        
				<SoundAlarm/>        
				<CallSecurity/>      
			</Sequence>      
			<Sequence name=""Normal Operation Sequence"">        
				<PatrolArea/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""DetectIntruder""/>    
		<Action ID=""SoundAlarm""/>    
		<Action ID=""CallSecurity""/>    
		<Action ID=""PatrolArea""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:  
{
  `is_intruder_detected`: Condition node: Check if an intruder is present. Returns SUCCESS if detected, FAILURE otherwise.;  
  `lock_doors`: Action Node: Secure all entry points by locking doors. Always returns SUCCESS.;  
  `maintain_patrol`: Action Node: Continue patrolling the area. Always returns SUCCESS.
}.  
To construct a behavior tree in XML format for the following command, including any behavior outside the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if an intruder is detected then lock the doors, otherwise maintain patrol"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""SecurityProtocol"">
  <BehaviorTree ID=""SecurityProtocol"">
    <Fallback name=""Security Fallback"">
      <Sequence name=""Intrusion Sequence"">
        <is_intruder_detected/>
        <lock_doors/>
      </Sequence>
      <maintain_patrol/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Action ID=""lock_doors""/>
    <Action ID=""maintain_patrol""/>
    <Condition ID=""is_intruder_detected""/>
  </TreeNodesModel>
</root>",one,77.97145557403564,"<root BTCPP_format=""3"" main_tree_to_execute=""IntruderManagement"">  
	<BehaviorTree ID=""IntruderManagement"">    
		<Fallback name=""Intruder Response"">      
			<Sequence name=""Intruder Detected"">        
				<is_intruder_detected/>        
				<lock_doors/>      
			</Sequence>      
			<Sequence name=""No Intruder"">        
				<maintain_patrol/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_intruder_detected""/>    
		<Action ID=""lock_doors""/>    
		<Action ID=""maintain_patrol""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_intruder: Condition node: Identify if an intruder is present. Returns SUCCESS if detected, FAILURE otherwise.; activate_alarm: Action Node: Trigger the security alarm. Always returns SUCCESS.; investigate_area: Action Node: Investigate the area for intruders. Always returns SUCCESS.; return_to_patrol: Action Node: Resume regular patrol duties. Always returns SUCCESS.; log_event: Action Node: Log the detected event. Always returns SUCCESS; call_security: Action Node: Contact security personnel. Always returns SUCCESS}. To construct a behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""Detect intruder, if detected activate alarm and call security, else continue patrol"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""IntrusionResponse"">
  <BehaviorTree ID=""IntrusionResponse"">
    <Sequence name=""Main Sequence"">
      <detect_intruder/>
      <Fallback name=""Intrusion Handling"">
        <Sequence>
          <detect_intruder/>
          <activate_alarm/>
          <call_security/>
          <log_event/>
        </Sequence>
        <return_to_patrol/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""detect_intruder""/>
    <Action ID=""activate_alarm""/>
    <Action ID=""call_security""/>
    <Action ID=""log_event""/>
    <Action ID=""return_to_patrol""/>
    <Action ID=""investigate_area"" editable=""false""/>
  </TreeNodesModel>
</root>",one,91.87284564971924,"<root BTCPP_format=""3"" main_tree_to_execute=""IntruderDetection"">  
	<BehaviorTree ID=""IntruderDetection"">    
		<Fallback name=""Intruder Handling"">      
			<Sequence name=""Intruder Detected"">        
				<detect_intruder/>        
				<activate_alarm/>        
				<call_security/>      
			</Sequence>      
			<Sequence name=""No Intruder"">        
				<continue_patrol/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""detect_intruder""/>    
		<Action ID=""activate_alarm""/>    
		<Action ID=""investigate_area""/>    
		<Action ID=""return_to_patrol""/>    
		<Action ID=""log_event""/>    
		<Action ID=""call_security""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  is_area_mapped: Condition node: Check if the area is mapped. Returns SUCCESS if mapped, FAILURE otherwise.;
  is_path_blocked: Condition node: Check if the path is blocked. Returns SUCCESS if blocked, FAILURE otherwise.;
  turn_left: Action Node: Turn the agent left. Always returns SUCCESS.;
  turn_right: Action Node: Turn the agent right. Always returns SUCCESS.;
  move_forward: Action Node: Move the agent forward. Always returns SUCCESS.;
  update_map: Action Node: Update the mapping data. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if area is mapped, then if the path is blocked, turn left or right; otherwise, move forward and update the map"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""MapArea"">
  <BehaviorTree ID=""MapArea"">
    <Sequence>
      <is_area_mapped/>
      <Fallback>
        <Sequence>
          <is_path_blocked/>
          <Fallback>
            <turn_left/>
            <turn_right/>
          </Fallback>
        </Sequence>
        <Sequence>
          <move_forward/>
          <update_map/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_area_mapped""/>
    <Condition ID=""is_path_blocked""/>
    <Action ID=""move_forward""/>
    <Action ID=""turn_left""/>
    <Action ID=""turn_right""/>
    <Action ID=""update_map""/>
  </TreeNodesModel>
</root>",one,141.56663513183594,"<root BTCPP_format=""3"" main_tree_to_execute=""MappingBehavior"">  
	<BehaviorTree ID=""MappingBehavior"">    
		<Fallback name=""Area Mapping Decision"">      
			<Sequence name=""Mapped Area Path Navigation"">        
				<is_area_mapped/>        
				<Fallback name=""Path Navigation"">          
					<Sequence name=""Blocked Path Turn"">            
						<is_path_blocked/>            
						<Fallback name=""Turn Decision"">              
							<turn_left/>              
							<turn_right/>            
						</Fallback>          
					</Sequence>          
					<Sequence name=""Unblocked Path Move"">            
						<move_forward/>            
						<update_map/>          
					</Sequence>      
				</Fallback>    
			</Sequence>      
			<Sequence name=""Unmapped Area Continue"">        
				<continue_patrol/>        
				<update_map/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_area_mapped""/>    
		<Condition ID=""is_path_blocked""/>    
		<Action ID=""turn_left""/>    
		<Action ID=""turn_right""/>    
		<Action ID=""move_forward""/>    
		<Action ID=""update_map""/>    
		<Action ID=""continue_patrol"" editable=""true"">
      	<input_port name=""direction""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","Use only the following behaviors structured as a dictionary: {IsBatteryLow: Condition node: Checks if the battery level is below threshold. Returns SUCCESS if low, FAILURE otherwise.; GoToChargingStation: Action Node: Navigates the robot to the charging station. Always returns SUCCESS.; ChargeBattery: Action Node: Initiates battery charging. Always returns SUCCESS.; ResumeTask: Action Node: Resumes the previous task after charging. Always returns SUCCESS.}. Including any behavior not in this dictionary will result in failure, so avoid using them.","generate behavior tree to ""if the battery is low, go to the charging station, charge the battery, and then resume the previous task"". Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Sequence>
      <IsBatteryLow/>
      <GoToChargingStation/>
      <ChargeBattery/>
      <ResumeTask/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""IsBatteryLow""/>
    <Action ID=""GoToChargingStation""/>
    <Action ID=""ChargeBattery""/>
    <Action ID=""ResumeTask""/>
  </TreeNodesModel>
</root>",one,79.41204190254211,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""Battery Management"">      
			<Sequence name=""Low Battery Sequence"">        
				<IsBatteryLow/>        
				<GoToChargingStation/>        
				<ChargeBattery/>        
				<ResumeTask/>      
			</Sequence>      
			<Sequence name=""Normal Operation Sequence"">        
				<ResumeTask/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""IsBatteryLow""/>    
		<Action ID=""GoToChargingStation""/>    
		<Action ID=""ChargeBattery""/>    
		<Action ID=""ResumeTask""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_clear: Condition node: Check if the designated area is clear of obstacles. Returns SUCCESS if clear, FAILURE otherwise.; start_cleaning: Action Node: Begin the cleaning process. Always returns SUCCESS.; alert_obstruction: Action Node: Alert the system of an obstruction. Always returns SUCCESS.; navigate_to_area: Action Node: Navigate to the designated cleaning area. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. Including any behavior not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""if the area is clear then start cleaning, otherwise navigate to area and alert obstruction"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""CleaningProcess"">
  <BehaviorTree ID=""CleaningProcess"">
    <Fallback name=""Cleaning Fallback"">
      <Sequence name=""Start Cleaning Sequence"">
        <is_area_clear/>
        <start_cleaning/>
      </Sequence>
      <Sequence name=""Handle Obstruction Sequence"">
        <navigate_to_area/>
        <alert_obstruction/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_area_clear""/>
    <Action ID=""start_cleaning""/>
    <Action ID=""navigate_to_area""/>
    <Action ID=""alert_obstruction""/>
  </TreeNodesModel>
</root>",one,82.70436644554138,"<root BTCPP_format=""3"" main_tree_to_execute=""AreaManagement"">  
	<BehaviorTree ID=""AreaManagement"">    
		<Fallback name=""Area Status Management"">      
			<Sequence name=""Clear Area Sequence"">        
				<is_area_clear/>        
				<start_cleaning/>      
			</Sequence>      
			<Sequence name=""Obstruction Handling Sequence"">        
				<navigate_to_area/>        
				<alert_obstruction/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_area_clear""/>    
		<Action ID=""start_cleaning""/>    
		<Action ID=""navigate_to_area""/>    
		<Action ID=""alert_obstruction""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_clear: Condition node: Verify that the area is free of obstacles. Returns SUCCESS if clear, FAILURE otherwise.; scan_for_resources: Action Node: Perform a scan to locate resources in the area. Always returns SUCCESS.; collect_resource: Action Node: Gather the identified resource. Always returns SUCCESS.; alert_obstacle: Action Node: Notify the system of any detected obstacle. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the area is clear then scan for resources and collect them, else alert obstacle"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
  <BehaviorTree ID=""ResourceCollection"">
    <Sequence name=""Collection Sequence"">
      <is_area_clear/>
      <Sequence name=""Scan and Collect"">
        <scan_for_resources/>
        <collect_resource/>
      </Sequence>
    </Sequence>
    <alert_obstacle/>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_area_clear""/>
    <Action ID=""scan_for_resources""/>
    <Action ID=""collect_resource""/>
    <Action ID=""alert_obstacle""/>
  </TreeNodesModel>
</root>",one,82.75198125839233,"<root BTCPP_format=""3"" main_tree_to_execute=""AreaManagement"">  
	<BehaviorTree ID=""AreaManagement"">    
		<Fallback name=""Area Status Management"">      
			<Sequence name=""Clear Area Sequence"">        
				<is_area_clear/>        
				<scan_for_resources/>        
				<collect_resource/>      
			</Sequence>      
			<Sequence name=""Obstacle Alert Sequence"">        
				<alert_obstacle/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_area_clear""/>    
		<Action ID=""scan_for_resources""/>    
		<Action ID=""collect_resource""/>    
		<Action ID=""alert_obstacle""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {CheckBattery: Condition Node: Check if the agent's battery level is above a threshold. Returns SUCCESS if above, FAILURE otherwise.; Recharge: Action Node: Initiate the charging process. Always returns SUCCESS.; NavigateTo: Action Node: Navigate to a specified location. Always returns SUCCESS.; ReportStatus: Action Node: Report the current status. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""check battery level, if sufficient navigate to the target location, else recharge, and report the status after moving or recharging"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryCheckTree"">
  <BehaviorTree ID=""BatteryCheckTree"">
    <Fallback>
      <Sequence>
        <CheckBattery/>
        <NavigateTo location=""{TargetLocation}""/>
        <ReportStatus message=""Arrived at target location.""/>
      </Sequence>
      <Sequence>
        <Recharge/>
        <ReportStatus message=""Recharging completed.""/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""CheckBattery"" editable=""true"">
    </Condition>
    <Action ID=""Recharge"" editable=""true"">
    </Action>
    <Action ID=""NavigateTo"" editable=""true"">
      <input_port name=""location""/>
    </Action>
    <Action ID=""ReportStatus"" editable=""true"">
      <input_port name=""message""/>
    </Action>
  </TreeNodesModel>
</root>",two,264.1347236633301,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Sequence name=""Main Sequence"">      
			<CheckBattery/>      
			<Fallback name=""Navigation or Recharging"">        
				<Sequence>          
					<NavigateTo/>        
					<ReportStatus/>      
				</Sequence>      
				<Recharge/>      
				<ReportStatus/>    
			</Fallback>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""CheckBattery""/>    
		<Action ID=""NavigateTo""/>    
		<Action ID=""Recharge""/>    
		<Action ID=""ReportStatus""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below 20%. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the robot back to its base. Always returns SUCCESS.; continue_mission: Action Node: Continue with the current mission. Always returns SUCCESS.; recharge_battery: Action Node: Start the battery recharging process. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""If the battery is low, return to base and recharge; otherwise, continue with the mission"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Fallback name=""Battery Check"">
      <Sequence>
        <is_battery_low/>
        <return_to_base/>
        <recharge_battery/>
      </Sequence>
      <continue_mission/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_battery_low""/>
    <Action ID=""return_to_base""/>
    <Action ID=""recharge_battery""/>
    <Action ID=""continue_mission""/>
  </TreeNodesModel>
</root>",two,81.29318165779114,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""Battery Management"">      
			<Sequence name=""Low Battery Sequence"">        
				<is_battery_low/>        
				<return_to_base/>      
			</Sequence>      
			<continue_mission/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_battery_low""/>    
		<Action ID=""return_to_base""/>    
		<Action ID=""continue_mission""/>    
		<Action ID=""recharge_battery"" editable=""true"">
      	<input_port name=""duration""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  patrol_area: Action Node: Patrol the designated area. Always returns SUCCESS.;
  detect_intruder: Condition: Detect if an intruder is present. Returns SUCCESS if detected, FAILURE otherwise.;
  alert_security: Action Node: Send an alert to the security team. Always returns SUCCESS.;
  investigate_area: Action Node: Investigate the suspicious activity. Always returns SUCCESS.;
  return_to_patrol: Action Node: Resume patrolling the area. Always returns SUCCESS.;
  is_area_clear: Condition: Check if the area is clear of intruders. Returns SUCCESS if clear, FAILURE otherwise.;
}. 
To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""Patrol the area. If an intruder is detected, alert security and investigate before returning to patrol."" Ensure the behavior tree follows a logical flow.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""PatrolIntrusionResponse"">
  <BehaviorTree ID=""PatrolIntrusionResponse"">
    <Sequence name=""Main Sequence"">
      <patrol_area/>
      <Fallback name=""Intruder Handling"">
        <Sequence name=""Intruder Detected"">
          <detect_intruder/>
          <Sequence name=""Alert and Investigate"">
            <alert_security/>
            <investigate_area/>
          </Sequence>
        </Sequence>
        <Sequence name=""No Intruder"">
          <is_area_clear/>
        </Sequence>
      </Fallback>
      <return_to_patrol/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID=""alert_security""/>
    <Action ID=""detect_intruder""/>
    <Action ID=""investigate_area""/>
    <Action ID=""patrol_area""/>
    <Action ID=""return_to_patrol""/>
    <Condition ID=""is_area_clear""/>
  </TreeNodesModel>
</root>",two,106.5096755027771,"<root BTCPP_format=""3"" main_tree_to_execute=""AreaPatrol"">  
	<BehaviorTree ID=""AreaPatrol"">    
		<Sequence name=""Patrol and Intruder Handling"">      
			<patrol_area/>      
			<Fallback name=""Intruder Detected"">        
				<detect_intruder/>        
				<Sequence>          
					<alert_security/>          
					<investigate_area/>          
				</Sequence>      
			</Fallback>    
		</Sequence>    
		<Fallback name=""Normal Operations"">      
			<is_area_clear/>      
			<return_to_patrol/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Action ID=""patrol_area""/>    
		<Condition ID=""detect_intruder""/>    
		<Action ID=""alert_security""/>    
		<Action ID=""investigate_area""/>    
		<Action ID=""return_to_patrol""/>    
		<Condition ID=""is_area_clear""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_comm_available: Condition node: Check if communication is available. Returns SUCCESS if available, FAILURE otherwise.; send_status_update: Action Node: Send a status update to the base station. Always returns SUCCESS.; receive_commands: Action Node: Receive and process commands from the base station. Always returns SUCCESS.; enter_sleep_mode: Action Node: Enter low-power sleep mode. Always returns SUCCESS.; wake_up: Action Node: Wake up from sleep mode. Always returns SUCCESS.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""if communication is available then send a status update and receive commands, otherwise enter sleep mode and wake up after a specified duration"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""CommunicationHandler"">
  <BehaviorTree ID=""CommunicationHandler"">
    <Fallback name=""Communication Fallback"">
      <Sequence name=""Active Communication"">
        <is_comm_available/>
        <send_status_update/>
        <receive_commands/>
      </Sequence>
      <Sequence name=""Sleep Sequence"">
        <enter_sleep_mode/>
        <wake_up/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_comm_available""/>
    <Action ID=""send_status_update""/>
    <Action ID=""receive_commands""/>
    <Action ID=""enter_sleep_mode""/>
    <Action ID=""wake_up""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence"" name=""Active Communication""/>
    <Control ID=""Sequence"" name=""Sleep Sequence""/>
  </TreeNodesModel>
</root>",two,112.84138536453247,"<root BTCPP_format=""3"" main_tree_to_execute=""CommunicationManagement"">  
	<BehaviorTree ID=""CommunicationManagement"">    
		<Fallback name=""Communication Handling"">      
			<Sequence>        
				<is_comm_available/>        
				<send_status_update/>        
				<receive_commands/>      
			</Sequence>      
			<Sequence>        
				<enter_sleep_mode/>        
				<wait_duration/>      
				<wake_up/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_comm_available""/>    
		<Action ID=""send_status_update""/>    
		<Action ID=""receive_commands""/>    
		<Action ID=""enter_sleep_mode""/>    
		<Action ID=""wake_up""/>    
		<Action ID=""wait_duration"" editable=""true"">
      	<input_port name=""duration""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:  
{
  `is_temperature_high`: Condition node: Check if the temperature exceeds the threshold. Returns SUCCESS if high, FAILURE otherwise.;  
  `activate_cooling_system`: Action Node: Turn on the cooling mechanisms. Always returns SUCCESS.;  
  `monitor_temperature`: Action Node: Continuously monitor the temperature. Always returns SUCCESS.
}.  
To construct a behavior tree in XML format for the following command, including any behavior outside the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if the temperature is high then activate the cooling system, otherwise continue monitoring the temperature"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""TemperatureControl"">
  <BehaviorTree ID=""TemperatureControl"">
    <Fallback name=""Temperature Fallback"">
      <Sequence name=""Cooling Sequence"">
        <is_temperature_high/>
        <activate_cooling_system/>
      </Sequence>
      <monitor_temperature/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Action ID=""activate_cooling_system""/>
    <Action ID=""monitor_temperature""/>
    <Condition ID=""is_temperature_high""/>
  </TreeNodesModel>
</root>


These tasks cover a variety of scenarios, ensuring that the LLM model can handle different conditions and actions while adhering strictly to the provided behavior dictionaries. Each behavior tree is structured logically in XML format, maintaining clarity and consistency for effective evaluation.",two,85.1602942943573,"<root BTCPP_format=""3"" main_tree_to_execute=""TemperatureControl"">  
	<BehaviorTree ID=""TemperatureControl"">    
		<Sequence name=""Temperature Handling"">      
			<is_temperature_high/>      
			<activate_cooling_system/>    
		</Sequence>    
		<Fallback name=""Monitoring"">      
			<monitor_temperature/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_temperature_high""/>    
		<Action ID=""activate_cooling_system""/>    
		<Action ID=""monitor_temperature""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {collect_resources: Action Node: Collect available resources in the area. Always returns SUCCESS.; store_resources: Action Node: Store collected resources in the base. Always returns SUCCESS.; is_resource_available: Condition Node: Check if resources are available for collection. Returns SUCCESS if available, FAILURE otherwise.; is_storage_full: Condition Node: Check if storage is full. Returns SUCCESS if full, FAILURE otherwise.; report_collection_complete: Action Node: Report that resource collection is complete. Always returns SUCCESS.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to 'Collect resources if available and store them, else report completion' Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
  <BehaviorTree ID=""ResourceCollection"">
    <Sequence name=""Main Sequence"">
      <Fallback name=""Check Resources and Storage"">
        <Sequence>
          <is_resource_available/>
          <Fallback name=""Storage Status"">
            <Sequence>
              <is_storage_full/>
              <report_collection_complete/>
            </Sequence>
            <collect_resources/>
            <store_resources/>
          </Fallback>
        </Sequence>
        <report_collection_complete/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID=""collect_resources""/>
    <Action ID=""store_resources""/>
    <Action ID=""report_collection_complete""/>
    <Condition ID=""is_resource_available""/>
    <Condition ID=""is_storage_full""/>
  </TreeNodesModel>
</root>",two,92.94342589378357,"<root BTCPP_format=""3"" main_tree_to_execute=""ResourceManagement"">  
	<BehaviorTree ID=""ResourceManagement"">    
		<Sequence name=""Resource Collection and Storage"">      
			<is_resource_available/>      
			<Fallback name=""Collection and Storage"">        
				<collect_resources/>        
				<store_resources/>      
			</Fallback>    
		</Sequence>    
		<report_collection_complete/>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_resource_available""/>    
		<Action ID=""collect_resources""/>    
		<Action ID=""store_resources""/>    
		<Action ID=""report_collection_complete""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {
    detect_obstacle: Condition: Detect if there is an obstacle ahead. Returns True if detected, False otherwise.;
    avoid_obstacle: Action: Perform obstacle avoidance maneuvers. Always returns True.;
    move_forward: Action: Move the agent forward. Always returns True.;
    stop_motion: Action: Stop all movement. Always returns True.;
    report_obstacle: Action: Send an obstacle detected report. Always returns True.;
    is_path_clear: Condition: Check if the path is clear. Returns True if clear, False otherwise.;
    resume_movement: Action: Resume movement after obstacle avoidance. Always returns True.
}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""avoid obstacles when detected and continue moving forward"". Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">
  <BehaviorTree ID=""ObstacleAvoidance"">
    <Fallback name=""Obstacle Fallback"">
      <Sequence name=""Obstacle Detected Sequence"">
        <detect_obstacle/>
        <Sequence name=""Avoid and Report"">
          <avoid_obstacle/>
          <report_obstacle/>
        </Sequence>
      </Sequence>
      <move_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""detect_obstacle""/>
    <Action ID=""avoid_obstacle""/>
    <Action ID=""report_obstacle""/>
    <Action ID=""move_forward""/>
    <Control ID=""Fallback"" name=""Obstacle Fallback""/>
    <Control ID=""Sequence"" name=""Obstacle Detected Sequence""/>
    <Control ID=""Sequence"" name=""Avoid and Report""/>
  </TreeNodesModel>
</root>",two,109.35261392593384,"<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">  
	<BehaviorTree ID=""ObstacleAvoidance"">    
		<Sequence name=""Obstacle Handling"">      
			<detect_obstacle/>      
			<Fallback name=""Avoid and Continue"">        
				<avoid_obstacle/>        
				<move_forward/>      
			</Fallback>    
		</Sequence>    
		<Fallback name=""Normal Movement"">      
			<is_path_clear/>      
			<move_forward/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""detect_obstacle""/>    
		<Action ID=""avoid_obstacle""/>    
		<Action ID=""move_forward""/>    
		<Action ID=""stop_motion"" editable=""true"">
      	<input_port name=""reason""/>
    	</Action>
		<Action ID=""report_obstacle""/>  
		<Condition ID=""is_path_clear""/>    
		<Action ID=""resume_movement""/>    
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below 20%. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the robot back to the base station. Always returns SUCCESS.; continue_operation: Condition node: Check if operations can continue. Returns SUCCESS if yes, FAILURE otherwise.; perform_task: Action Node: Execute the assigned task. Always returns SUCCESS.; notify_operator: Action Node: Send a notification to the operator. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the battery is low then return to base and notify the operator; otherwise, if operations can continue, perform the task"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Fallback name=""Battery Fallback"">
      <Sequence name=""Handle Low Battery"">
        <is_battery_low/>
        <return_to_base/>
        <notify_operator/>
      </Sequence>
      <Sequence name=""Continue Operations"">
        <continue_operation/>
        <perform_task/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_battery_low""/>
    <Action ID=""return_to_base""/>
    <Action ID=""notify_operator""/>
    <Condition ID=""continue_operation""/>
    <Action ID=""perform_task""/>
  </TreeNodesModel>
</root>",two,109.73579287528992,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryAndOperationManagement"">  
	<BehaviorTree ID=""BatteryAndOperationManagement"">    
		<Fallback name=""High-Level Decision"">      
			<Sequence name=""Low Battery Sequence"">        
				<is_battery_low/>        
				<return_to_base/>        
				<notify_operator/>      
			</Sequence>      
			<Sequence name=""Normal Operation Sequence"">        
				<continue_operation/>        
				<perform_task/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_battery_low""/>    
		<Action ID=""return_to_base""/>    
		<Condition ID=""continue_operation""/>    
		<Action ID=""perform_task""/>    
		<Action ID=""notify_operator""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {collect_item: Action Node: Gather an item from the environment. Always returns SUCCESS.; is_storage_full: Condition node: Check if the storage capacity is reached. Returns SUCCESS if full, FAILURE otherwise.; return_to_deposit: Action Node: Navigate back to the deposit location. Always returns SUCCESS.; deposit_items: Action Node: Deposit collected items. Always returns SUCCESS.; explore_area: Action Node: Explore a new area. Always returns SUCCESS.; notify_deposit_full: Action Node: Send a notification that storage is full. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""Explore the area and collect items. If storage is full, return to deposit location, deposit items, and notify that storage is full"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>  
<root BTCPP_format=""3"" main_tree_to_execute=""ItemCollection"">  
  <BehaviorTree ID=""ItemCollection"">  
    <Sequence name=""Main Sequence"">  
      <explore_area/>  
      <collect_item/>  
      <Fallback name=""Storage Check"">  
        <Sequence>  
          <is_storage_full/>  
          <return_to_deposit/>  
          <deposit_items/>  
          <notify_deposit_full/>  
        </Sequence>  
        <!-- Continue collecting items if storage not full -->  
      </Fallback>  
    </Sequence>  
  </BehaviorTree>  
  <TreeNodesModel>  
    <Action ID=""collect_item""/>  
    <Condition ID=""is_storage_full""/>  
    <Action ID=""return_to_deposit""/>  
    <Action ID=""deposit_items""/>  
    <Action ID=""explore_area""/>  
    <Action ID=""notify_deposit_full""/>  
  </TreeNodesModel>  
</root>",two,115.58752417564392,"<root BTCPP_format=""3"" main_tree_to_execute=""CollectionManagement"">  
	<BehaviorTree ID=""CollectionManagement"">    
		<Sequence name=""Collection and Storage"">      
			<explore_area/>      
			<collect_item/>      
			<Fallback name=""Storage Management"">        
				<is_storage_full/>        
				<Sequence>          
					<return_to_deposit/>          
					<deposit_items/>          
					<notify_deposit_full/>        
				</Sequence>      
			</Fallback>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_storage_full""/>    
		<Action ID=""collect_item""/>    
		<Action ID=""return_to_deposit""/>    
		<Action ID=""deposit_items""/>    
		<Action ID=""explore_area""/>    
		<Action ID=""notify_deposit_full""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_enemy: Condition node: Check if an enemy is detected. Returns SUCCESS if detected, FAILURE otherwise.; patrol_area: Action Node: Patrol the designated area. Always returns SUCCESS.; engage_enemy: Action Node: Engage the detected enemy. Always returns SUCCESS.; retreat: Action Node: Retreat to a safe location. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if an enemy is detected, engage the enemy; otherwise, patrol the area and retreat if an enemy appears"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EnemyResponse"">
  <BehaviorTree ID=""EnemyResponse"">
    <Fallback name=""Main Fallback"">
      <Sequence name=""Engage Sequence"">
        <detect_enemy/>
        <engage_enemy/>
      </Sequence>
      <Sequence name=""Patrol and Monitor"">
        <patrol_area/>
        <detect_enemy/>
        <retreat/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""detect_enemy""/>
    <Action ID=""patrol_area""/>
    <Action ID=""engage_enemy""/>
    <Action ID=""retreat""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence"" name=""Engage Sequence""/>
    <Control ID=""Sequence"" name=""Patrol and Monitor""/>
  </TreeNodesModel>
</root>",two,107.00375509262085,"<root BTCPP_format=""3"" main_tree_to_execute=""EnemyResponse"">  
	<BehaviorTree ID=""EnemyResponse"">    
		<Sequence name=""Enemy Engagement"">      
			<detect_enemy/>      
			<Fallback name=""Engage or Retreat"">        
				<engage_enemy/>        
				<retreat/>      
			</Fallback>    
		</Sequence>    
		<Sequence name=""Normal Operation"">      
			<patrol_area/>      
			<Fallback name=""Retreat if Enemy Appears"">        
				<detect_enemy/>        
				<retreat/>      
			</Fallback>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""detect_enemy""/>    
		<Action ID=""engage_enemy""/>    
		<Action ID=""patrol_area""/>    
		<Action ID=""retreat""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
is_battery_low: Condition node: Check if the battery level is low. Returns SUCCESS if low, FAILURE otherwise.
recharge_battery: Action Node: Recharge the robot's battery. Always returns SUCCESS.
perform_maintenance: Action Node: Perform maintenance tasks. Always returns SUCCESS.
is_maintenance_due: Condition node: Check if maintenance is due. Returns SUCCESS if due, FAILURE otherwise.
continue_operations: Action Node: Continue regular operations. Always returns SUCCESS.
report_status: Action Node: Report current status. Always returns SUCCESS.

Including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if the battery is low, recharge it; then check if maintenance is due, perform maintenance if needed, and finally continue operations while reporting status"". Take a step back and think deeply about the behavior tree.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""MaintenanceTask"">
  <BehaviorTree ID=""MaintenanceTask"">
    <Sequence name=""Maintenance Sequence"">
      <Fallback name=""Battery Check"">
        <Sequence>
          <is_battery_low/>
          <recharge_battery/>
        </Sequence>
        <continue_operations/>
      </Fallback>
      <Fallback name=""Maintenance Check"">
        <Sequence>
          <is_maintenance_due/>
          <perform_maintenance/>
        </Sequence>
        <continue_operations/>
      </Fallback>
      <report_status/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_battery_low""/>
    <Condition ID=""is_maintenance_due""/>
    <Action ID=""recharge_battery""/>
    <Action ID=""perform_maintenance""/>
    <Action ID=""continue_operations""/>
    <Action ID=""report_status""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",two,107.88334441184998,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryAndMaintenance"">  
	<BehaviorTree ID=""BatteryAndMaintenance"">    
		<Sequence name=""Battery Management"">      
			<is_battery_low/>      
			<recharge_battery/>    
		</Sequence>    
		<Fallback name=""Maintenance and Operations"">      
			<is_maintenance_due/>      
			<perform_maintenance/>    
			<continue_operations/>    
			<report_status/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_battery_low""/>    
		<Action ID=""recharge_battery""/>    
		<Condition ID=""is_maintenance_due""/>    
		<Action ID=""perform_maintenance""/>    
		<Action ID=""continue_operations""/>    
		<Action ID=""report_status""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_obstacle_detected: Condition node: Check if there is an obstacle in the path. Returns SUCCESS if obstacle is detected, FAILURE otherwise.; avoid_obstacle: Action Node: Perform obstacle avoidance maneuvers. Always returns SUCCESS.; proceed_forward: Action Node: Move the robot forward. Always returns SUCCESS.; send_alert: Action Node: Send an alert message. Always returns SUCCESS}. Construct the behavior tree in XML format for the following command. Including any behavior not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if an obstacle is detected then avoid it and send an alert, otherwise proceed forward"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleHandling"">
  <BehaviorTree ID=""ObstacleHandling"">
    <Fallback name=""Obstacle Fallback"">
      <Sequence name=""Handle Obstacle"">
        <is_obstacle_detected/>
        <avoid_obstacle/>
        <send_alert/>
      </Sequence>
      <proceed_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_obstacle_detected""/>
    <Action ID=""avoid_obstacle""/>
    <Action ID=""send_alert""/>
    <Action ID=""proceed_forward""/>
  </TreeNodesModel>
</root>",two,95.95711612701416,"<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">  
	<BehaviorTree ID=""ObstacleAvoidance"">    
		<Sequence name=""Obstacle Handling"">      
			<is_obstacle_detected/>      
			<Fallback name=""Avoid and Alert"">        
				<avoid_obstacle/>        
				<send_alert/>      
			</Fallback>    
		</Sequence>    
		<Sequence name=""Normal Operation"">      
			<proceed_forward/>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_obstacle_detected""/>    
		<Action ID=""avoid_obstacle""/>    
		<Action ID=""send_alert""/>    
		<Action ID=""proceed_forward""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
`is_object_found`: Condition node: Determine if a specific object has been located. Returns SUCCESS if found, FAILURE otherwise.
`grasp_object`: Action Node: Engage the mechanism to grasp the object. Always returns SUCCESS.
`place_object`: Action Node: Move and place the object at the designated location. Always returns SUCCESS.
`search_area`: Action Node: Conduct a search within the specified area. Always returns SUCCESS.
`alert_team`: Action Node: Notify the team about the object status. Always returns SUCCESS.

To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""if an object is found then grasp and place the object and alert the team, otherwise search the area"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObjectHandling"">
  <BehaviorTree ID=""ObjectHandling"">
    <Fallback name=""Object Fallback"">
      <Sequence name=""Handling Sequence"">
        <is_object_found/>
        <grasp_object/>
        <place_object/>
        <alert_team/>
      </Sequence>
      <search_area/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Action ID=""grasp_object""/>
    <Action ID=""place_object""/>
    <Action ID=""search_area""/>
    <Action ID=""alert_team""/>
    <Condition ID=""is_object_found""/>
  </TreeNodesModel>
</root>",two,101.7981390953064,"<root BTCPP_format=""3"" main_tree_to_execute=""ObjectHandling"">  
	<BehaviorTree ID=""ObjectHandling"">    
		<Sequence name=""Object Found Sequence"">      
			<is_object_found/>      
			<grasp_object/>      
			<place_object/>      
			<alert_team/>    
		</Sequence>    
		<Fallback name=""Search and Handle"">      
			<search_area/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_object_found""/>    
		<Action ID=""grasp_object""/>    
		<Action ID=""place_object""/>    
		<Action ID=""search_area""/>    
		<Action ID=""alert_team""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {rotate_in_circle: Action Node: Rotate the robot in a circle. Always returns SUCCESS.; is_robot_in_range: Condition node: Check if the robot is within 6 inches of its starting location. Returns SUCCESS if within range, FAILURE otherwise.; wander: Action Node: Perform a wandering action. Always returns SUCCESS.; task_completed: Action Node: Indicate task completion. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""Rotate in a circle within 6 inches of current location"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""RotateCircle"">
  <BehaviorTree ID=""RotateCircle"">
    <Sequence name=""Main Sequence"">
      <Fallback name=""Rotation Decision"">
        <Sequence>
          <is_robot_in_range/>
          <rotate_in_circle/>
          <task_completed/>
        </Sequence>
        <wander/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_robot_in_range""/>
    <Action ID=""rotate_in_circle""/>
    <Action ID=""task_completed""/>
    <Action ID=""wander""/>
  </TreeNodesModel>
</root>",two,71.23017120361328,"<root BTCPP_format=""3"" main_tree_to_execute=""CircularNavigation"">  
	<BehaviorTree ID=""CircularNavigation"">    
		<Sequence name=""Circular Movement"">      
			<rotate_in_circle/>      
			<is_robot_in_range/>      
		</Sequence>    
	</BehaviorTree>  
	<TreeNodesModel>    
		<Action ID=""rotate_in_circle""/>    
		<Condition ID=""is_robot_in_range""/>    
		<Action ID=""wander""/>    
		<Action ID=""task_completed""/>    
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_obstacle_ahead: Condition node: Detect if there is an obstacle in the robot's path. Returns SUCCESS if an obstacle is detected, FAILURE otherwise.; stop: Action Node: Stop the robot's movement. Always returns SUCCESS.; navigate_around: Action Node: Maneuver the robot around the detected obstacle. Always returns SUCCESS.; proceed_forward: Action Node: Continue moving forward. Always returns SUCCESS.; sound_alarm: Action Node: Emit an alarm sound. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if an obstacle is detected then stop, sound an alarm, and navigate around it; otherwise, proceed forward"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">
  <BehaviorTree ID=""ObstacleAvoidance"">
    <Fallback name=""Obstacle Fallback"">
      <Sequence name=""Handle Obstacle"">
        <is_obstacle_ahead/>
        <stop/>
        <sound_alarm/>
        <navigate_around/>
      </Sequence>
      <proceed_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_obstacle_ahead""/>
    <Action ID=""stop""/>
    <Action ID=""sound_alarm""/>
    <Action ID=""navigate_around""/>
    <Action ID=""proceed_forward""/>
  </TreeNodesModel>
</root>",two,105.71644997596741,"<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">  
	<BehaviorTree ID=""ObstacleAvoidance"">    
		<Sequence name=""Obstacle Handling"">      
			<is_obstacle_ahead/>      
			<Fallback name=""Stop and Navigate"">        
				<stop/>        
				<sound_alarm/>        
				<navigate_around/>      
			</Fallback>    
		</Sequence>    
		<Sequence name=""Normal Operation"">      
			<proceed_forward/>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_obstacle_ahead""/>    
		<Action ID=""stop""/>    
		<Action ID=""sound_alarm""/>    
		<Action ID=""navigate_around""/>    
		<Action ID=""proceed_forward""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_intruder_detected: Condition node: Check if an intruder is detected. Returns SUCCESS if detected, FAILURE otherwise.; alert_security: Action Node: Send an alert to the security team. Always returns SUCCESS.; patrol_area: Action Node: Continue patrolling the area. Always returns SUCCESS.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""if an intruder is detected then alert security, otherwise continue patrolling the area"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""IntruderResponse"">
  <BehaviorTree ID=""IntruderResponse"">
    <Fallback name=""Intruder Fallback"">
      <Sequence name=""Intruder Sequence"">
        <is_intruder_detected/>
        <alert_security/>
      </Sequence>
      <patrol_area/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_intruder_detected""/>
    <Action ID=""alert_security""/>
    <Action ID=""patrol_area""/>
  </TreeNodesModel>
</root>",two,85.69722533226013,"<root BTCPP_format=""3"" main_tree_to_execute=""IntrusionHandling"">  
	<BehaviorTree ID=""IntrusionHandling"">    
		<Sequence name=""Intrusion Response"">      
			<is_intruder_detected/>      
			<alert_security/>    
		</Sequence>    
		<Fallback name=""Normal Operation"">      
			<patrol_area/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_intruder_detected""/>    
		<Action ID=""alert_security""/>    
		<Action ID=""patrol_area""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_task_assigned: Condition node: Check if a new task has been assigned. Returns SUCCESS if a task is present, FAILURE otherwise.; accept_task: Action Node: Accept the newly assigned task. Always returns SUCCESS.; review_task: Action Node: Review the details of the current task. Always returns SUCCESS.; execute_task: Action Node: Execute the assigned task. Always returns SUCCESS.; idle: Action Node: Remain idle and monitor for new tasks. Always returns SUCCESS.}. To construct behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if a task is assigned, accept and execute it; otherwise, review previous tasks and remain idle."" Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""TaskManagement"">
  <BehaviorTree ID=""TaskManagement"">
    <Fallback name=""Task Fallback"">
      <Sequence name=""Handle New Task"">
        <is_task_assigned/>
        <Sequence>
          <accept_task/>
          <execute_task/>
        </Sequence>
      </Sequence>
      <Sequence name=""Handle No New Task"">
        <review_task/>
        <idle/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_task_assigned""/>
    <Action ID=""accept_task""/>
    <Action ID=""execute_task""/>
    <Action ID=""review_task""/>
    <Action ID=""idle""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",two,103.32269811630249,"<root BTCPP_format=""3"" main_tree_to_execute=""TaskManagement"">  
	<BehaviorTree ID=""TaskManagement"">    
		<Fallback name=""Task Handling"">      
			<Sequence name=""Task Assigned Sequence"">        
				<is_task_assigned/>        
				<accept_task/>        
				<execute_task/>      
			</Sequence>      
			<Sequence name=""Idle and Review Sequence"">        
				<review_task/>        
				<idle/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_task_assigned""/>    
		<Action ID=""accept_task""/>    
		<Action ID=""review_task""/>    
		<Action ID=""execute_task""/>    
		<Action ID=""idle""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_capacity_full: Condition node: Check if the storage capacity is full. Returns SUCCESS if full, FAILURE otherwise.; unload_resources: Action Node: Unload collected resources. Always returns SUCCESS.; search_for_resources: Action Node: Search the environment for resources. Always returns SUCCESS.; collect_resource: Action Node: Collect a resource from the environment. Always returns SUCCESS.; return_to_base: Action Node: Return to the base for unloading resources. Always returns SUCCESS.; scan_environment: Action Node: Scan the surrounding environment for potential resources. Always returns SUCCESS.; report_status: Action Node: Report the current status to the central system. Always returns SUCCESS.;}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if storage is full, unload resources and return to base; otherwise, search for resources, collect them, scan the environment, and report status"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
  <BehaviorTree ID=""ResourceCollection"">
    <Sequence>
      <Fallback>
        <Sequence>
          <is_capacity_full/>
          <unload_resources/>
          <return_to_base/>
        </Sequence>
        <Sequence>
          <search_for_resources/>
          <collect_resource/>
          <scan_environment/>
          <report_status/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
    <Condition ID=""is_capacity_full""/>
    <Action ID=""unload_resources""/>
    <Action ID=""return_to_base""/>
    <Action ID=""search_for_resources""/>
    <Action ID=""collect_resource""/>
    <Action ID=""scan_environment""/>
    <Action ID=""report_status""/>
  </TreeNodesModel>
</root>",two,131.96892833709717,"<root BTCPP_format=""3"" main_tree_to_execute=""ResourceManagement"">  
	<BehaviorTree ID=""ResourceManagement"">    
		<Fallback name=""Resource Handling"">      
			<Sequence name=""Full Storage Sequence"">        
				<is_capacity_full/>        
				<unload_resources/>        
				<return_to_base/>      
			</Sequence>      
			<Sequence name=""Resource Collection and Reporting"">        
				<search_for_resources/>        
				<collect_resource/>        
				<scan_environment/>        
				<report_status/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_capacity_full""/>    
		<Action ID=""unload_resources""/>    
		<Action ID=""search_for_resources""/>    
		<Action ID=""collect_resource""/>    
		<Action ID=""scan_environment""/>    
		<Action ID=""return_to_base""/>    
		<Action ID=""report_status""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_weather_clear: Condition node: Check if the current weather is clear. Returns SUCCESS if clear, FAILURE otherwise.; proceed_with_operation: Action Node: Continue with the current operation. Always returns SUCCESS.; wait_for_clear_weather: Action Node: Pause operations until weather improves. Always returns SUCCESS.; deploy_weather_protection: Action Node: Activate weather protection mechanisms. Always returns SUCCESS.; report_weather_status: Action Node: Send weather status report to base. Always returns SUCCESS.; evaluate_weather_severity: Condition node: Assess the severity of the current weather conditions. Returns SUCCESS if severe, FAILURE otherwise.; initiate_emergency_protocol: Action Node: Start emergency procedures due to severe weather. Always returns SUCCESS.; maintain_operational_readiness: Action Node: Ensure systems are ready for operation post-weather. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""check weather; if clear, proceed with operation; if not clear and severe, initiate emergency protocol; otherwise, wait for clear weather"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""WeatherResponse"">
  <BehaviorTree ID=""WeatherResponse"">
    <Sequence>
      <is_weather_clear/>
      <proceed_with_operation/>
      <Fallback>
        <evaluate_weather_severity/>
        <Sequence>
          <initiate_emergency_protocol/>
          <maintain_operational_readiness/>
        </Sequence>
        <wait_for_clear_weather/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Sequence""/>
    <Condition ID=""is_weather_clear""/>
    <Action ID=""proceed_with_operation""/>
    <Control ID=""Fallback""/>
    <Condition ID=""evaluate_weather_severity""/>
    <Action ID=""initiate_emergency_protocol""/>
    <Action ID=""maintain_operational_readiness""/>
    <Action ID=""wait_for_clear_weather""/>
  </TreeNodesModel>
</root>",two,140.2531967163086,"<root BTCPP_format=""3"" main_tree_to_execute=""WeatherManagement"">  
	<BehaviorTree ID=""WeatherManagement"">    
		<Sequence name=""Weather Evaluation"">      
			<is_weather_clear/>      
			<Fallback name=""Clear Weather Actions"">        
				<proceed_with_operation/>      
			</Fallback>      
			<evaluate_weather_severity/>      
			<Fallback name=""Severe Weather Actions"">        
				<initiate_emergency_protocol/>      
			</Fallback>    
		</Sequence>    
		<Fallback name=""Non-Severe Weather Actions"">      
			<wait_for_clear_weather/>      
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_weather_clear""/>    
		<Action ID=""proceed_with_operation""/>    
		<Action ID=""wait_for_clear_weather""/>    
		<Action ID=""deploy_weather_protection""/>    
		<Action ID=""report_weather_status""/>    
		<Condition ID=""evaluate_weather_severity""/>    
		<Action ID=""initiate_emergency_protocol""/>    
		<Action ID=""maintain_operational_readiness""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_dirty: Condition node: Determine if the current area requires cleaning. Returns SUCCESS if dirty, FAILURE otherwise.; clean_area: Action Node: Perform cleaning operations in the area. Always returns SUCCESS.; move_to_next_area: Action Node: Navigate to the next area designated for cleaning. Always returns SUCCESS.; check_battery: Condition node: Verify if the battery level is sufficient for cleaning tasks. Returns SUCCESS if sufficient, FAILURE otherwise.; recharge_battery: Action Node: Recharge the robot's battery. Always returns SUCCESS.; report_cleaning_status: Action Node: Report the status of cleaning operations. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the area is dirty and battery is sufficient, clean the area; otherwise, recharge the battery"". Structure the behavior tree to handle these conditions appropriately.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""CleaningBehavior"">
  <BehaviorTree ID=""CleaningBehavior"">
    <Sequence name=""Cleaning Sequence"">
      <is_area_dirty/>
      <check_battery/>
      <clean_area/>
    </Sequence>
    <recharge_battery/>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Sequence""/>
    <Condition ID=""is_area_dirty""/>
    <Condition ID=""check_battery""/>
    <Action ID=""clean_area""/>
    <Action ID=""recharge_battery""/>
    <Action ID=""move_to_next_area""/>
    <Action ID=""report_cleaning_status""/>
  </TreeNodesModel>
</root>",two,118.50194978713989,"<root BTCPP_format=""3"" main_tree_to_execute=""CleaningRoutine"">  
	<BehaviorTree ID=""CleaningRoutine"">    
		<Fallback name=""Cleaning Decision"">      
			<Sequence name=""Clean if Dirty and Battery Sufficient"">        
				<is_area_dirty/>        
				<check_battery/>        
				<clean_area/>      
			</Sequence>      
			<Sequence name=""Recharge Battery"">        
				<recharge_battery/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_area_dirty""/>    
		<Action ID=""clean_area""/>    
		<Condition ID=""check_battery""/>    
		<Action ID=""recharge_battery""/>    
		<Action ID=""move_to_next_area""/>    
		<Action ID=""report_cleaning_status""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  `IsBatteryCritical`: Condition node: Check if the battery level is critical. Returns SUCCESS if critical, FAILURE otherwise.;
  `ReturnToBase`: Action Node: Navigate back to the base station. Always returns SUCCESS.;
  `RechargeBattery`: Action Node: Recharge the battery. Always returns SUCCESS.;
  `PerformTask`: Action Node: Execute the assigned task. Always returns SUCCESS.;
  `MonitorBattery`: Condition node: Continuously monitor the battery level. Returns SUCCESS if monitoring is active, RUNNING otherwise.;
  `Parallel`: Control Node: Executes all children simultaneously.
}
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Create a behavior tree where the robot performs its assigned task while continuously monitoring the battery. If the battery becomes critical, it should return to base and recharge before resuming the task.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""TaskWithBatteryMonitoring"">
  <BehaviorTree ID=""TaskWithBatteryMonitoring"">
    <Parallel>
      <PerformTask/>
      <Sequence>
        <MonitorBattery/>
        <Fallback>
          <Sequence>
            <IsBatteryCritical/>
            <ReturnToBase/>
            <RechargeBattery/>
            <PerformTask/>
          </Sequence>
        </Fallback>
      </Sequence>
    </Parallel>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""IsBatteryCritical""/>
    <Condition ID=""MonitorBattery""/>
    <Action ID=""ReturnToBase""/>
    <Action ID=""RechargeBattery""/>
    <Action ID=""PerformTask""/>
    <Control ID=""Parallel""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",two,110.78882336616516,"<root BTCPP_format=""3"" main_tree_to_execute=""TaskExecution"">  
	<BehaviorTree ID=""TaskExecution"">    
		<Sequence name=""Normal Operation"">      
			<MonitorBattery/>      
			<PerformTask/>    
		</Sequence>    
		<Fallback name=""Battery Critical Handling"">      
			<IsBatteryCritical/>      
			<Sequence>        
				<ReturnToBase/>        
				<RechargeBattery/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""IsBatteryCritical""/>    
		<Action ID=""ReturnToBase""/>    
		<Action ID=""RechargeBattery""/>    
		<Action ID=""PerformTask""/>    
		<Condition ID=""MonitorBattery""/>    
		<ControlNode ID=""Parallel""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_light_available: Condition node: Check if there is sufficient lighting in the area. Returns SUCCESS if sufficient, FAILURE otherwise.; turn_on_lights: Action Node: Activate the lighting system. Always returns SUCCESS.; perform_task: Action Node: Execute the designated task in the area. Always returns SUCCESS.; adjust_lighting: Action Node: Modify the lighting to optimal levels. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if light is available then perform the task, else turn on lights and adjust lighting"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""LightingControl"">
  <BehaviorTree ID=""LightingControl"">
    <Fallback name=""Lighting Fallback"">
      <Sequence name=""Light Available Sequence"">
        <is_light_available/>
        <perform_task/>
      </Sequence>
      <Sequence name=""Lighting Adjustment"">
        <turn_on_lights/>
        <adjust_lighting/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_light_available""/>
    <Action ID=""perform_task""/>
    <Action ID=""turn_on_lights""/>
    <Action ID=""adjust_lighting""/>
  </TreeNodesModel>
</root>",two,97.50696468353271,"<root BTCPP_format=""3"" main_tree_to_execute=""LightingManagement"">  
	<BehaviorTree ID=""LightingManagement"">    
		<Fallback name=""Task Execution"">      
			<Sequence>        
				<is_light_available/>        
				<perform_task/>      
			</Sequence>      
			<Sequence>        
				<turn_on_lights/>        
				<adjust_lighting/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_light_available""/>    
		<Action ID=""turn_on_lights""/>    
		<Action ID=""perform_task""/>    
		<Action ID=""adjust_lighting""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  is_patrol_complete: Condition node: Check if the patrol route is complete. Returns SUCCESS if complete, FAILURE otherwise.;
  return_to_base: Action Node: Navigate the robot back to the base. Always returns SUCCESS.;
  initiate_charging: Action Node: Start the charging process. Always returns SUCCESS.;
  is_battery_low: Condition node: Check if the battery level is low. Returns SUCCESS if low, FAILURE otherwise.;
  continue_patrolling: Action Node: Continue patrolling the area. Always returns SUCCESS.;
  send_status_update: Action Node: Send a status update to the control center. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""if patrol is complete then return to base and initiate charging; if battery is low, send status update, otherwise continue patrolling"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""PatrolManagement"">
  <BehaviorTree ID=""PatrolManagement"">
    <Sequence>
      <is_patrol_complete/>
      <Fallback>
        <Sequence>
          <return_to_base/>
          <initiate_charging/>
          <Fallback>
            <Sequence>
              <is_battery_low/>
              <send_status_update/>
            </Sequence>
            <continue_patrolling/>
          </Fallback>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Action ID=""initiate_charging""/>
    <Condition ID=""is_patrol_complete""/>
    <Condition ID=""is_battery_low""/>
    <Action ID=""return_to_base""/>
    <Action ID=""send_status_update""/>
    <Action ID=""continue_patrolling""/>
  </TreeNodesModel>
</root>",two,127.16312766075134,"<root BTCPP_format=""3"" main_tree_to_execute=""PatrolManagement"">  
	<BehaviorTree ID=""PatrolManagement"">    
		<Fallback name=""High-Level Decision"">      
			<Sequence name=""Patrol Complete Sequence"">        
				<is_patrol_complete/>        
				<return_to_base/>        
				<initiate_charging/>      
			</Sequence>      
			<Fallback name=""Battery and Status Management"">        
				<Sequence>        
					<is_battery_low/>        
					<send_status_update/>      
				</Sequence>        
				<continue_patrolling/>    
			</Fallback>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_patrol_complete""/>    
		<Action ID=""return_to_base""/>    
		<Action ID=""initiate_charging""/>    
		<Condition ID=""is_battery_low""/>    
		<Action ID=""send_status_update""/>    
		<Action ID=""continue_patrolling""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  `is_delivery_available`: Condition node: Check if a delivery task is available. Returns SUCCESS if available, FAILURE otherwise.;
  `accept_delivery`: Action Node: Accept the delivery task. Always returns SUCCESS.;
  `navigate_to_destination`: Action Node: Navigate to the delivery destination. Always returns SUCCESS.;
  `deliver_package`: Action Node: Deliver the package. Always returns SUCCESS.;
  `is_destination_reachable`: Condition node: Check if the destination is reachable. Returns SUCCESS if reachable, FAILURE otherwise.;
  `report_failure`: Action Node: Report delivery failure. Always returns SUCCESS.;
  `idle`: Action Node: Remain idle awaiting tasks. Always returns SUCCESS.;
}
to construct a behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if a delivery is available then accept it and check if destination is reachable; if reachable, navigate and deliver the package; otherwise, report failure; else remain idle"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""DeliveryTask"">
  <BehaviorTree ID=""DeliveryTask"">
    <Fallback name=""Delivery Fallback"">
      <Sequence name=""Handle Delivery"">
        <is_delivery_available/>
        <accept_delivery/>
        <Fallback name=""Destination Check"">
          <Sequence name=""Reachable Destination"">
            <is_destination_reachable/>
            <navigate_to_destination/>
            <deliver_package/>
          </Sequence>
          <report_failure/>
        </Fallback>
      </Sequence>
      <idle/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Sequence ID=""Handle Delivery""/>
    <Fallback ID=""Destination Check""/>
    <Sequence ID=""Reachable Destination""/>
    <Condition ID=""is_delivery_available""/>
    <Condition ID=""is_destination_reachable""/>
    <Action ID=""accept_delivery""/>
    <Action ID=""navigate_to_destination""/>
    <Action ID=""deliver_package""/>
    <Action ID=""report_failure""/>
    <Action ID=""idle""/>
  </TreeNodesModel>
</root>",two,136.48517227172852,"<root BTCPP_format=""3"" main_tree_to_execute=""DeliveryManagement"">  
	<BehaviorTree ID=""DeliveryManagement"">    
		<Fallback name=""Main Delivery Sequence"">      
			<Sequence name=""Delivery Acceptance and Navigation"">        
				<is_delivery_available/>        
				<accept_delivery/>        
				<is_destination_reachable/>        
				<Fallback name=""Navigation and Delivery"">          
					<Sequence>            
						<navigate_to_destination/>            
						<deliver_package/>          
					</Sequence>          
					<report_failure/>      
				</Fallback>    
			</Sequence>      
			<idle/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_delivery_available""/>    
		<Action ID=""accept_delivery""/>    
		<Action ID=""navigate_to_destination""/>    
		<Action ID=""deliver_package""/>    
		<Condition ID=""is_destination_reachable""/>    
		<Action ID=""report_failure""/>    
		<Action ID=""idle""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_energy_full: Condition node: Check if the energy level is full. Returns SUCCESS if full, FAILURE otherwise.; recharge_energy: Action Node: Initiate energy recharging process. Always returns SUCCESS.; perform_task: Action Node: Execute the designated task. Always returns SUCCESS.; monitor_energy: Action Node: Continuously monitor energy levels. Always returns SUCCESS.; notify_manager: Action Node: Notify the manager about energy status. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if energy is not full, recharge energy and notify the manager; otherwise, perform the task"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EnergyManagement"">
  <BehaviorTree ID=""EnergyManagement"">
    <Fallback name=""Energy Fallback"">
      <Sequence name=""Recharge and Notify"">
        <is_energy_full/>
        <perform_task/>
      </Sequence>
      <Sequence name=""Handle Low Energy"">
        <monitor_energy/>
        <recharge_energy/>
        <notify_manager/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_energy_full""/>
    <Action ID=""perform_task""/>
    <Action ID=""monitor_energy""/>
    <Action ID=""recharge_energy""/>
    <Action ID=""notify_manager""/>
  </TreeNodesModel>
</root>",two,105.6328706741333,"<root BTCPP_format=""3"" main_tree_to_execute=""EnergyManagement"">  
	<BehaviorTree ID=""EnergyManagement"">    
		<Fallback name=""Energy Status Handling"">      
			<Sequence name=""Energy Recharge and Notification"">        
				<is_energy_full/>        
				<recharge_energy/>        
				<notify_manager/>      
			</Sequence>      
			<Sequence name=""Task Execution"">        
				<perform_task/>        
				<monitor_energy/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_energy_full""/>    
		<Action ID=""recharge_energy""/>    
		<Action ID=""perform_task""/>    
		<Action ID=""monitor_energy""/>    
		<Action ID=""notify_manager""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_charge_needed: Condition node: Check if the robot needs to charge. Returns SUCCESS if charging is needed, FAILURE otherwise.; navigate_to_charging_station: Action Node: Move the robot to the charging station. Always returns SUCCESS.; start_charging: Action Node: Begin the charging process. Always returns SUCCESS.; monitor_battery: Condition node: Continuously monitor the battery level. Returns SUCCESS if sufficient, FAILURE otherwise.; perform_task: Action Node: Execute the primary task. Always returns SUCCESS.; notify_low_battery: Action Node: Send a low battery notification. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""monitor the battery level continuously, perform tasks when battery is sufficient, and if charging is needed, navigate to the charging station and start charging"". Ensure the robot prioritizes charging when necessary.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Fallback name=""Battery Fallback"">
      <Sequence name=""Charging Sequence"">
        <is_charge_needed/>
        <notify_low_battery/>
        <navigate_to_charging_station/>
        <start_charging/>
      </Sequence>
      <Sequence name=""Task Execution"">
        <monitor_battery/>
        <perform_task/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_charge_needed""/>
    <Action ID=""navigate_to_charging_station""/>
    <Action ID=""start_charging""/>
    <Condition ID=""monitor_battery""/>
    <Action ID=""perform_task""/>
    <Action ID=""notify_low_battery""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence""/>
  </TreeNodesModel>
</root>",two,112.20427513122559,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""Main Decision"">      
			<Sequence name=""Charging Sequence"">        
				<is_charge_needed/>        
				<navigate_to_charging_station/>        
				<start_charging/>      
			</Sequence>      
			<Sequence name=""Task Execution Sequence"">        
				<monitor_battery/>        
				<perform_task/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_charge_needed""/>    
		<Action ID=""navigate_to_charging_station""/>    
		<Action ID=""start_charging""/>    
		<Condition ID=""monitor_battery""/>    
		<Action ID=""perform_task""/>    
		<Action ID=""notify_low_battery"" editable=""true"">
      	<input_port name=""battery_level""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_temperature_high: Condition node: Check if the environment temperature is above the safe limit. Returns SUCCESS if high, FAILURE otherwise.;  
activate_cooling_system: Action Node: Turn on the cooling system. Always returns SUCCESS.;  
is_fire_detected: Condition node: Detect the presence of fire. Returns SUCCESS if detected, FAILURE otherwise.;  
call_fire_fighters: Action Node: Notify fire fighters. Always returns SUCCESS.;  
monitor_environment: Action Node: Continuously monitor environmental conditions. Always returns SUCCESS.;  
shutdown_systems: Action Node: Safely shutdown all systems. Always returns SUCCESS.;  
}

To construct a behavior tree in XML format for the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if temperature is high then activate cooling system; if fire is detected, call fire fighters and shutdown systems; otherwise, continue monitoring the environment.""","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EmergencyResponse"">
  <BehaviorTree ID=""EmergencyResponse"">
    <Fallback name=""Main Fallback"">
      <Sequence name=""High Temperature Sequence"">
        <is_temperature_high/>
        <activate_cooling_system/>
      </Sequence>
      <Sequence name=""Fire Detection Sequence"">
        <is_fire_detected/>
        <call_fire_fighters/>
        <shutdown_systems/>
      </Sequence>
      <monitor_environment/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_temperature_high""/>
    <Action ID=""activate_cooling_system""/>
    <Condition ID=""is_fire_detected""/>
    <Action ID=""call_fire_fighters""/>
    <Action ID=""shutdown_systems""/>
    <Action ID=""monitor_environment""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence""/>
  </TreeNodesModel>
</root>",two,118.05231070518494,"<root BTCPP_format=""3"" main_tree_to_execute=""EnvironmentalControl"">  
	<BehaviorTree ID=""EnvironmentalControl"">    
		<Sequence name=""Temperature and Fire Handling"">      
			<is_temperature_high/>      
			<activate_cooling_system/>    
			<Fallback name=""Fire Response"">        
				<is_fire_detected/>        
				<call_fire_fighters/>        
				<shutdown_systems/>      
			</Fallback>    
		</Sequence>    
		<Fallback name=""Normal Monitoring"">      
			<monitor_environment/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_temperature_high""/>    
		<Action ID=""activate_cooling_system""/>    
		<Condition ID=""is_fire_detected""/>    
		<Action ID=""call_fire_fighters""/>    
		<Action ID=""shutdown_systems""/>    
		<Action ID=""monitor_environment""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  survey_area: Action Node: Survey the designated area. Always returns SUCCESS.;
  take_picture: Action Node: Capture an image of the area. Always returns SUCCESS.;
  return_home: Action Node: Return to the home base. Always returns SUCCESS
}
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""survey an area, take a picture, and then return home"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""DroneSurvey"">
  <BehaviorTree ID=""DroneSurvey"">
    <Sequence name=""Mission Sequence"">
      <survey_area/>
      <take_picture/>
      <return_home/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID=""return_home""/>
    <Action ID=""survey_area""/>
    <Action ID=""take_picture""/>
  </TreeNodesModel>
</root>",two,73.92343306541443,"<root BTCPP_format=""3"" main_tree_to_execute=""MissionExecution"">  
	<BehaviorTree ID=""MissionExecution"">    
		<Sequence name=""Mission Sequence"">      
			<survey_area/>      
			<take_picture/>      
			<return_home/>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Action ID=""survey_area""/>    
		<Action ID=""take_picture""/>    
		<Action ID=""return_home""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:
{is_humidity_high: Condition node: Check if humidity level is high. Returns SUCCESS if high, FAILURE otherwise.;
activate_dehumidifier: Action Node: Turn on the dehumidifier. Always returns SUCCESS.;
deactivate_dehumidifier: Action Node: Turn off the dehumidifier. Always returns SUCCESS.;
monitor_conditions: Action Node: Continuously monitor environmental conditions. Always returns SUCCESS.}

To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""if humidity is high, activate dehumidifier, else deactivate it while monitoring conditions"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""HumidityControl"">
  <BehaviorTree ID=""HumidityControl"">
    <Sequence name=""Main Sequence"">
      <Fallback name=""Humidity Check"">
        <is_humidity_high/>
        <activate_dehumidifier/>
      </Fallback>
      <deactivate_dehumidifier/>
      <monitor_conditions/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_humidity_high""/>
    <Action ID=""activate_dehumidifier""/>
    <Action ID=""deactivate_dehumidifier""/>
    <Action ID=""monitor_conditions""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",two,98.55408596992493,"<root BTCPP_format=""3"" main_tree_to_execute=""HumidityControl"">  
	<BehaviorTree ID=""HumidityControl"">    
		<Fallback name=""Humidity Management"">      
			<Sequence name=""High Humidity Sequence"">        
				<is_humidity_high/>        
				<activate_dehumidifier/>      
			</Sequence>      
			<Sequence name=""Low Humidity Sequence"">        
				<deactivate_dehumidifier/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_humidity_high""/>    
		<Action ID=""activate_dehumidifier""/>    
		<Action ID=""deactivate_dehumidifier""/>    
		<Action ID=""monitor_conditions""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_item_available: Condition node: Check if the target item is available for collection. Returns SUCCESS if available, FAILURE otherwise.; collect_item: Action Node: Collect the available item. Always returns SUCCESS.; search_for_item: Action Node: Search the environment for the item. Always returns SUCCESS; store_item: Action Node: Store the collected item in the inventory. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""if the target item is available then collect and store it, otherwise search for the item"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behaviors you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ItemCollection"">
  <BehaviorTree ID=""ItemCollection"">
    <Fallback name=""Item Availability Fallback"">
      <Sequence name=""Collect Sequence"">
        <is_item_available/>
        <collect_item/>
        <store_item/>
      </Sequence>
      <search_for_item/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_item_available""/>
    <Action ID=""collect_item""/>
    <Action ID=""store_item""/>
    <Action ID=""search_for_item""/>
  </TreeNodesModel>
</root>",two,95.5072226524353,"<root BTCPP_format=""3"" main_tree_to_execute=""ItemCollection"">  
	<BehaviorTree ID=""ItemCollection"">    
		<Fallback name=""Item Handling"">      
			<Sequence>        
				<is_item_available/>        
				<collect_item/>        
				<store_item/>      
			</Sequence>      
			<search_for_item/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_item_available""/>    
		<Action ID=""collect_item""/>    
		<Action ID=""search_for_item""/>    
		<Action ID=""store_item""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_intrusion_detected: Condition node: Check if an intrusion is detected. Returns SUCCESS if detected, FAILURE otherwise.; patrol_route: Action Node: Follow the designated patrol route. Always returns SUCCESS.; report_intrusion: Action Node: Send an intrusion alert to the base. Always returns SUCCESS.; update_patrol_status: Action Node: Update the patrol status in the system. Always returns SUCCESS.; idle: Action Node: Remain stationary and monitor the environment. Always returns SUCCESS.; return_to_base: Action Node: Navigate back to the base station. Always returns SUCCESS.; } To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""Patrol the perimeter and report any intrusion"". Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""PerimeterPatrol"">
  <BehaviorTree ID=""PerimeterPatrol"">
    <Fallback name=""Intrusion Handler"">
      <Sequence name=""Intrusion Detection and Reporting"">
        <is_intrusion_detected/>
        <report_intrusion/>
        <update_patrol_status/>
      </Sequence>
      <patrol_route/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_intrusion_detected""/>
    <Action ID=""report_intrusion""/>
    <Action ID=""update_patrol_status""/>
    <Action ID=""patrol_route""/>
    <Action ID=""idle""/>
    <Action ID=""return_to_base""/>
  </TreeNodesModel>
</root>",two,117.43081331253052,"<root BTCPP_format=""3"" main_tree_to_execute=""PatrolAndReport"">  
	<BehaviorTree ID=""PatrolAndReport"">    
		<Sequence name=""Main Patrol Loop"">      
			<patrol_route/>      
			<Fallback name=""Intrusion Handling"">        
				<is_intrusion_detected/>        
				<report_intrusion/>      
			</Fallback>    
		</Sequence>    
		<idle/>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_intrusion_detected""/>    
		<Action ID=""patrol_route""/>    
		<Action ID=""report_intrusion""/>    
		<Action ID=""update_patrol_status""/>    
		<Action ID=""idle""/>    
		<Action ID=""return_to_base""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","Use only the following behaviors structured as a dictionary: {MonitorTemperature: Condition Node: Check if the temperature is within acceptable limits. Returns SUCCESS if normal, FAILURE otherwise.; ActivateCoolingSystem: Action Node: Turn on the cooling system. Always returns SUCCESS.; DeactivateCoolingSystem: Action Node: Turn off the cooling system. Always returns SUCCESS.; LogTemperature: Action Node: Log the current temperature reading. Always returns SUCCESS.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.; SubTree: Special Node: Execute a referenced BehaviorTree as a subtree}. Including any behavior not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""continuously monitor temperature, activate cooling if high, log the temperature, and ensure the cooling system is deactivated when temperature is normal.""","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""TemperatureControl"">
  <BehaviorTree ID=""ActivateCooling"">
    <Sequence>
      <ActivateCoolingSystem/>
      <LogTemperature message=""Cooling system activated due to high temperature.""/>
    </Sequence>
  </BehaviorTree>
  <BehaviorTree ID=""DeactivateCooling"">
    <Sequence>
      <DeactivateCoolingSystem/>
      <LogTemperature message=""Cooling system deactivated as temperature is normal.""/>
    </Sequence>
  </BehaviorTree>
  <BehaviorTree ID=""TemperatureControl"">
    <Sequence>
      <MonitorTemperature/>
      <Fallback>
        <SubTree ID=""ActivateCooling""/>
        <SubTree ID=""DeactivateCooling""/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""MonitorTemperature""/>
    <Action ID=""ActivateCoolingSystem""/>
    <Action ID=""DeactivateCoolingSystem""/>
    <Action ID=""LogTemperature"" editable=""true"">
      <input_port name=""message""/>
    </Action>
  </TreeNodesModel>
</root>",two,88.31145668029785,"<root BTCPP_format=""3"" main_tree_to_execute=""TemperatureControl"">  
	<BehaviorTree ID=""TemperatureControl"">    
		<Sequence name=""Temperature Monitoring"">      
			<MonitorTemperature/>      
			<Fallback name=""Cooling System Control"">        
				<ActivateCoolingSystem/>        
				<LogTemperature/>      
			</Fallback>    
		</Sequence>    
		<DeactivateCoolingSystem/>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""MonitorTemperature""/>    
		<Action ID=""ActivateCoolingSystem""/>    
		<Action ID=""DeactivateCoolingSystem""/>    
		<Action ID=""LogTemperature""/>    
		<Decorator ID=""ForceSuccess""/>    
		<SubTree ID=""SubTree""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the robot's battery is low. Returns SUCCESS if low, FAILURE otherwise.; navigate_to_charging_station: Action Node: Navigate to the charging station. Always returns SUCCESS.; charge_battery: Action Node: Begin charging the battery. Always returns SUCCESS.; monitor_battery: Condition node: Continuously monitor the battery status. Returns SUCCESS while charging, FAILURE when fully charged.; resume_tasks: Action Node: Resume previous tasks after charging. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the battery is low, navigate to the charging station and begin charging; monitor the battery, and once fully charged, resume previous tasks"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Sequence>
      <is_battery_low/>
      <Fallback>
        <Sequence>
          <navigate_to_charging_station/>
          <charge_battery/>
          <monitor_battery/>
          <resume_tasks/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_battery_low""/>
    <Control ID=""Fallback""/>
    <Action ID=""navigate_to_charging_station""/>
    <Action ID=""charge_battery""/>
    <Condition ID=""monitor_battery""/>
    <Action ID=""resume_tasks""/>
  </TreeNodesModel>
</root>",two,113.86662483215332,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""Battery Management"">      
			<Sequence name=""Low Battery Sequence"">        
				<is_battery_low/>        
				<navigate_to_charging_station/>        
				<charge_battery/>      
			</Sequence>      
			<Sequence name=""Monitoring and Resumption"">        
				<monitor_battery/>        
				<resume_tasks/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_battery_low""/>    
		<Action ID=""navigate_to_charging_station""/>    
		<Action ID=""charge_battery""/>    
		<Condition ID=""monitor_battery""/>    
		<Action ID=""resume_tasks""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_obstacle: Condition node: Check if an obstacle is detected. Returns SUCCESS if detected, FAILURE otherwise.; avoid_obstacle: Action Node: Maneuver to avoid the detected obstacle. Always returns SUCCESS.; proceed_forward: Action Node: Move forward towards the goal. Always returns SUCCESS.; scan_area: Action Node: Perform a 360-degree scan of the surroundings. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if an obstacle is detected then avoid it and proceed forward, otherwise scan the area"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">
  <BehaviorTree ID=""ObstacleAvoidance"">
    <Fallback name=""Obstacle Fallback"">
      <Sequence name=""Navigate Path"">
        <detect_obstacle/>
        <avoid_obstacle maneuver=""""/>
        <proceed_forward speed=""""/>
      </Sequence>
      <scan_area/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""detect_obstacle""/>
    <Action ID=""avoid_obstacle"" editable=""true"">
      <input_port name=""maneuver""/>
    </Action>
    <Action ID=""proceed_forward"" editable=""true"">
      <input_port name=""speed""/>
    </Action>
    <Action ID=""scan_area""/>
  </TreeNodesModel>
</root>",two,91.89111876487732,"<root BTCPP_format=""3"" main_tree_to_execute=""ObstacleAvoidance"">  
	<BehaviorTree ID=""ObstacleAvoidance"">    
		<Sequence name=""Obstacle Handling"">      
			<detect_obstacle/>      
			<Fallback name=""Avoid and Proceed"">        
				<avoid_obstacle/>        
				<proceed_forward/>      
			</Fallback>    
		</Sequence>    
		<Fallback name=""Normal Operation"">      
			<scan_area/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""detect_obstacle""/>    
		<Action ID=""avoid_obstacle""/>    
		<Action ID=""proceed_forward""/>    
		<Action ID=""scan_area""/>    
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {
  is_object_collected: Condition node: Check if the object has been collected. Returns SUCCESS if collected, FAILURE otherwise.;
  move_to_object: Action Node: Move to the object's location. Always returns SUCCESS.;
  collect_object: Action Node: Collect the object. Always returns SUCCESS.;
  report_status: Action Node: Report the current status. Always returns SUCCESS.;
  Sequence: Control Node: Executes its children in order.
  Fallback: Control Node: Selects the first child that returns SUCCESS.
}. 
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the object is not collected, move to the object and collect it; then report status"". Ensure proper use of Sequence and Fallback nodes.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ObjectCollection"">
  <BehaviorTree ID=""ObjectCollection"">
    <Sequence name=""Collection Sequence"">
      <Fallback name=""Check and Collect"">
        <is_object_collected/>
        <Sequence>
          <move_to_object/>
          <collect_object/>
        </Sequence>
      </Fallback>
      <report_status/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_object_collected""/>
    <Action ID=""move_to_object""/>
    <Action ID=""collect_object""/>
    <Action ID=""report_status""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",two,90.60943078994751,"<root BTCPP_format=""3"" main_tree_to_execute=""ObjectCollection"">  
	<BehaviorTree ID=""ObjectCollection"">    
		<Fallback name=""Object Handling"">      
			<Sequence name=""Object Not Collected"">        
				<is_object_collected/>        
				<move_to_object/>        
				<collect_object/>      
			</Sequence>    
			<report_status/>  
		</Fallback>    
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_object_collected""/>    
		<Action ID=""move_to_object""/>    
		<Action ID=""collect_object""/>    
		<Action ID=""report_status""/>    
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_obstacle: Condition node: Check for obstacles in the path. Returns SUCCESS if obstacle detected, FAILURE otherwise.; avoid_obstacle: Action Node: Maneuver to avoid the detected obstacle. Always returns SUCCESS.; follow_path: Action Node: Follow the predefined path. Always returns SUCCESS.; report_status: Action Node: Report current status to the control center. Always returns SUCCESS.; wait_for_command: Action Node: Wait for further instructions. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""continuously follow the path; if an obstacle is detected, avoid it and report the status; otherwise wait for the next command."" Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""PathFollowing"">
  <BehaviorTree ID=""PathFollowing"">
    <Sequence>
      <follow_path/>
      <Fallback>
        <Sequence>
          <detect_obstacle/>
          <avoid_obstacle/>
          <report_status/>
        </Sequence>
        <wait_for_command/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""detect_obstacle""/>
    <Action ID=""avoid_obstacle""/>
    <Action ID=""follow_path""/>
    <Action ID=""report_status""/>
    <Action ID=""wait_for_command""/>
  </TreeNodesModel>
</root>",two,103.35874152183533,"<root BTCPP_format=""3"" main_tree_to_execute=""PathFollowing"">  
	<BehaviorTree ID=""PathFollowing"">    
		<Sequence name=""Main Operation"">      
			<follow_path/>      
			<Fallback name=""Obstacle Handling"">        
				<detect_obstacle/>        
				<avoid_obstacle/>        
				<report_status/>      
			</Fallback>    
		</Sequence>    
		<wait_for_command/>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""detect_obstacle""/>    
		<Action ID=""avoid_obstacle""/>    
		<Action ID=""follow_path""/>    
		<Action ID=""report_status""/>    
		<Action ID=""wait_for_command""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_illuminated: Condition node: Check if the operational area is sufficiently illuminated. Returns SUCCESS if illuminated, FAILURE otherwise.; activate_lights: Action Node: Turn on additional lights. Always returns SUCCESS.; begin_operation: Action Node: Start the main operational tasks. Always returns SUCCESS.; halt_operations: Action Node: Stop all operational activities. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the area is illuminated, begin operation; otherwise, activate additional lights and halt operations"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""IlluminationControl"">
  <BehaviorTree ID=""IlluminationControl"">
    <Fallback name=""Illumination Check"">
      <Sequence name=""Operate Area"">
        <is_area_illuminated/>
        <begin_operation/>
      </Sequence>
      <Sequence name=""Light Adjustment and Halt"">
        <activate_lights/>
        <halt_operations/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_area_illuminated""/>
    <Action ID=""activate_lights""/>
    <Action ID=""begin_operation""/>
    <Action ID=""halt_operations""/>
  </TreeNodesModel>
</root>",two,97.371262550354,"<root BTCPP_format=""3"" main_tree_to_execute=""OperationalControl"">  
	<BehaviorTree ID=""OperationalControl"">    
		<Fallback name=""Area Illumination Check"">      
			<Sequence>        
				<is_area_illuminated/>        
				<begin_operation/>      
			</Sequence>      
			<Sequence>        
				<activate_lights/>        
				<halt_operations/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_area_illuminated""/>    
		<Action ID=""activate_lights""/>    
		<Action ID=""begin_operation""/>    
		<Action ID=""halt_operations""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  BatteryLow: Condition node: Check if the battery level is below a threshold. Returns SUCCESS if low, FAILURE otherwise.; 
  ReturnToBase: Action Node: Navigate the agent back to the base station. Always returns SUCCESS.; 
  ChargeBattery: Action Node: Begin charging the battery. Always returns SUCCESS.; 
  NotifyOperator: Action Node: Send a notification to the operator. Always returns SUCCESS.; 
  Wait: Action Node: Pause for a specified duration. Always returns SUCCESS.; 
  Sequence: Control Node: Executes child nodes in sequence.;
  Fallback: Control Node: Executes child nodes until one succeeds.
}. 
To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if battery is low, then return to base and charge; if charging is successful, notify the operator, otherwise wait"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Sequence>
      <BatteryLow/>
      <Fallback>
        <Sequence>
          <ReturnToBase/>
          <ChargeBattery/>
          <NotifyOperator/>
        </Sequence>
        <Wait/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""BatteryLow""/>
    <Action ID=""ReturnToBase""/>
    <Action ID=""ChargeBattery""/>
    <Action ID=""NotifyOperator""/>
    <Action ID=""Wait""/>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
  </TreeNodesModel>
</root>",two,98.35485982894897,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Sequence name=""Battery Low Sequence"">      
			<BatteryLow/>      
			<Fallback name=""Return and Charge"">        
				<ReturnToBase/>        
				<ChargeBattery/>      
			</Fallback>    
		</Sequence>    
		<Sequence name=""Post-Charging Sequence"">      
			<NotifyOperator/>      
			<Wait/>      
		</Sequence>    
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""BatteryLow""/>    
		<Action ID=""ReturnToBase""/>    
		<Action ID=""ChargeBattery""/>    
		<Action ID=""NotifyOperator""/>    
		<Action ID=""Wait""/>    
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below the threshold. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the robot back to the charging station. Always returns SUCCESS.; charge_battery: Action Node: Charge the robot's battery. Always returns SUCCESS.; continue_task: Action Node: Continue performing the current task. Always returns SUCCESS.; notify_operator: Action Node: Send a notification to the operator about the low battery status. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the battery is low then return to base and charge; otherwise, continue the current task and notify the operator if battery becomes low during the task"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Sequence>
      <Fallback>
        <Sequence>
          <is_battery_low/>
          <Sequence>
            <return_to_base/>
            <charge_battery/>
          </Sequence>
        </Sequence>
        <Sequence>
          <continue_task/>
          <Fallback>
            <is_battery_low/>
            <notify_operator/>
          </Fallback>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Sequence""/>
    <Control ID=""Fallback""/>
    <Condition ID=""is_battery_low""/>
    <Action ID=""return_to_base""/>
    <Action ID=""charge_battery""/>
    <Action ID=""continue_task""/>
    <Action ID=""notify_operator""/>
  </TreeNodesModel>
</root>",two,119.96837568283081,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""Battery Status Handling"">      
			<Sequence name=""Low Battery Sequence"">        
				<is_battery_low/>        
				<return_to_base/>        
				<charge_battery/>      
			</Sequence>      
			<Sequence name=""Normal Operation Sequence"">        
				<continue_task/>        
				<Fallback name=""Battery Check"">          
					<is_battery_low/>          
					<notify_operator/>        
				</Fallback>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_battery_low""/>    
		<Action ID=""return_to_base""/>    
		<Action ID=""charge_battery""/>    
		<Action ID=""continue_task""/>    
		<Action ID=""notify_operator""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_resource_available: Condition node: Check if the desired resource is available. Returns SUCCESS if available, FAILURE otherwise.;  
collect_resource: Action Node: Collect the available resource. Always returns SUCCESS.;  
notify_teammates: Action Node: Send a notification to team members about resource status. Always returns SUCCESS.;  
search_alternate_source: Action Node: Search for an alternate resource source. Always returns SUCCESS.;  
}.  
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if the resource is available, collect it and notify teammates; otherwise, search for an alternate source"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
  <BehaviorTree ID=""ResourceCollection"">
    <Fallback>
      <Sequence>
        <is_resource_available/>
        <Sequence>
          <collect_resource/>
          <notify_teammates/>
        </Sequence>
      </Sequence>
      <search_alternate_source/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_resource_available""/>
    <Action ID=""collect_resource""/>
    <Action ID=""notify_teammates""/>
    <Action ID=""search_alternate_source""/>
  </TreeNodesModel>
</root>",two,96.8025472164154,"<root BTCPP_format=""3"" main_tree_to_execute=""ResourceManagement"">  
	<BehaviorTree ID=""ResourceManagement"">    
		<Fallback name=""Resource Handling"">      
			<Sequence name=""Resource Available"">        
				<is_resource_available/>        
				<collect_resource/>        
				<notify_teammates/>      
			</Sequence>      
			<search_alternate_source/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_resource_available""/>    
		<Action ID=""collect_resource""/>    
		<Action ID=""notify_teammates""/>    
		<Action ID=""search_alternate_source""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {MoveForward: Action Node: Move the robot forward. Always returns SUCCESS.; TurnLeft: Action Node: Turn the robot to the left. Always returns SUCCESS.; CheckBattery: Condition Node: Check if the battery level is above a threshold. Returns SUCCESS if true, FAILURE otherwise.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","Generate behavior tree to ""check the battery level, if sufficient move forward three times, then turn left"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryCheckTree"">
  <BehaviorTree ID=""BatteryCheckTree"">
    <Sequence>
      <CheckBattery threshold=""50%""/>
      <Sequence>
        <MoveForward times=""3""/>
        <TurnLeft/>
      </Sequence>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID=""MoveForward"" editable=""true"">
      <input_port name=""times""/>
    </Action>
    <Action ID=""TurnLeft""/>
    <Condition ID=""CheckBattery"" editable=""true"">
      <input_port name=""threshold""/>
    </Condition>
  </TreeNodesModel>
</root>",two,85.9685332775116,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryAndNavigation"">  
	<BehaviorTree ID=""BatteryAndNavigation"">    
		<Sequence name=""Navigation Sequence"">      
			<CheckBattery/>      
			<Fallback name=""Battery Check Fallback"">        
				<Sequence>          
					<MoveForward/>          
					<MoveForward/>          
					<MoveForward/>          
					<TurnLeft/>      
				</Sequence>    
			</Fallback>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""CheckBattery""/>    
		<Action ID=""MoveForward""/>    
		<Action ID=""TurnLeft""/>  
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_energy_full: Condition node: Check if energy is full. Returns SUCCESS if full, FAILURE otherwise.; is_charge_needed: Condition node: Check if charging is needed. Returns SUCCESS if needed, FAILURE otherwise.; move_to_charge_station: Action Node: Move to the charging station. Always returns SUCCESS.; start_charging: Action Node: Begin charging. Always returns SUCCESS.; monitor_energy: Action Node: Monitor energy levels. Always returns SUCCESS.; resume_operations: Action Node: Resume normal operations. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""if energy is full, monitor energy; if charging is needed, move to charge station and start charging; otherwise, resume operations."" Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EnergyManagement"">
  <BehaviorTree ID=""EnergyManagement"">
    <Fallback>
      <Sequence name=""Energy Full"">
        <is_energy_full/>
        <monitor_energy/>
      </Sequence>
      <Sequence name=""Charging Needed"">
        <is_charge_needed/>
        <move_to_charge_station/>
        <start_charging/>
      </Sequence>
      <resume_operations/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_energy_full""/>
    <Condition ID=""is_charge_needed""/>
    <Action ID=""move_to_charge_station""/>
    <Action ID=""start_charging""/>
    <Action ID=""monitor_energy""/>
    <Action ID=""resume_operations""/>
  </TreeNodesModel>
</root>",two,120.86545085906982,"<root BTCPP_format=""3"" main_tree_to_execute=""EnergyManagement"">  
	<BehaviorTree ID=""EnergyManagement"">    
		<Fallback name=""Energy Management"">      
			<Sequence name=""Full Energy Sequence"">        
				<is_energy_full/>        
				<monitor_energy/>      
			</Sequence>      
			<Sequence name=""Charging Needed Sequence"">        
				<is_charge_needed/>        
				<move_to_charge_station/>        
				<start_charging/>      
			</Sequence>      
			<resume_operations/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_energy_full""/>    
		<Condition ID=""is_charge_needed""/>    
		<Action ID=""move_to_charge_station""/>    
		<Action ID=""start_charging""/>    
		<Action ID=""monitor_energy""/>    
		<Action ID=""resume_operations""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {IsEnemyVisible: Condition node: Check if an enemy is currently visible. Returns SUCCESS if visible, FAILURE otherwise.; MoveToEnemy: Action Node: Navigate towards the detected enemy. Always returns SUCCESS.; AttackEnemy: Action Node: Engage and attack the enemy. Always returns SUCCESS.; Evade: Action Node: Perform evasive maneuvers. Always returns SUCCESS.; PatrolArea: Action Node: Continue patrolling the designated area. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if an enemy is visible, move to the enemy and attack; if no enemy is visible, evade and continue patrolling"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""EnemyEngagement"">
  <BehaviorTree ID=""EnemyEngagement"">
    <Fallback>
      <Sequence>
        <IsEnemyVisible/>
        <Sequence>
          <MoveToEnemy/>
          <AttackEnemy/>
        </Sequence>
      </Sequence>
      <Sequence>
        <Evade/>
        <PatrolArea/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""IsEnemyVisible""/>
    <Action ID=""MoveToEnemy""/>
    <Action ID=""AttackEnemy""/>
    <Action ID=""Evade""/>
    <Action ID=""PatrolArea""/>
    <Control ID=""Fallback""/>
    <Control ID=""Sequence""/>
  </TreeNodesModel>
</root>",two,101.84091758728027,"<root BTCPP_format=""3"" main_tree_to_execute=""CombatResponse"">  
	<BehaviorTree ID=""CombatResponse"">    
		<Sequence name=""Enemy Engagement"">      
			<IsEnemyVisible/>      
			<Fallback name=""Engage or Evade"">        
				<MoveToEnemy/>        
				<AttackEnemy/>      
			</Fallback>    
		</Sequence>    
		<Fallback name=""Patrol and Evade"">      
			<Evade/>      
			<PatrolArea/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""IsEnemyVisible""/>    
		<Action ID=""MoveToEnemy""/>    
		<Action ID=""AttackEnemy""/>    
		<Action ID=""Evade""/>    
		<Action ID=""PatrolArea""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","Use only the following behaviors structured as a dictionary: {DetectIntruder: Condition node: Detects presence of an intruder. Returns SUCCESS if detected, FAILURE otherwise.; SoundAlarm: Action Node: Sounds an alarm to alert the area. Always returns SUCCESS.; CallSecurity: Action Node: Initiates a call to security personnel. Always returns SUCCESS.; PatrolArea: Action Node: Begins or continues patrolling the area. Always returns SUCCESS.}. Including any behavior not in this dictionary will result in failure, so avoid using them.","generate behavior tree to ""continuously patrol the area, but if an intruder is detected, sound the alarm and call security"". Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""SecurityPatrol"">
  <BehaviorTree ID=""SecurityPatrol"">
    <Fallback>
      <Sequence>
        <DetectIntruder/>
        <SoundAlarm/>
        <CallSecurity/>
      </Sequence>
      <PatrolArea/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""DetectIntruder""/>
    <Action ID=""SoundAlarm""/>
    <Action ID=""CallSecurity""/>
    <Action ID=""PatrolArea""/>
  </TreeNodesModel>
</root>",two,83.70311641693115,"<root BTCPP_format=""3"" main_tree_to_execute=""PatrolAndAlert"">  
	<BehaviorTree ID=""PatrolAndAlert"">    
		<Sequence name=""Intrusion Handling"">      
			<DetectIntruder/>      
			<Fallback name=""Alert and Call"">        
				<SoundAlarm/>        
				<CallSecurity/>      
			</Fallback>    
		</Sequence>    
		<Sequence name=""Normal Operation"">      
			<PatrolArea/>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""DetectIntruder""/>    
		<Action ID=""SoundAlarm""/>    
		<Action ID=""CallSecurity""/>    
		<Action ID=""PatrolArea""/>    
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary:  
{
  `is_intruder_detected`: Condition node: Check if an intruder is present. Returns SUCCESS if detected, FAILURE otherwise.;  
  `lock_doors`: Action Node: Secure all entry points by locking doors. Always returns SUCCESS.;  
  `maintain_patrol`: Action Node: Continue patrolling the area. Always returns SUCCESS.
}.  
To construct a behavior tree in XML format for the following command, including any behavior outside the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","Generate behavior tree to ""if an intruder is detected then lock the doors, otherwise maintain patrol"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""SecurityProtocol"">
  <BehaviorTree ID=""SecurityProtocol"">
    <Fallback name=""Security Fallback"">
      <Sequence name=""Intrusion Sequence"">
        <is_intruder_detected/>
        <lock_doors/>
      </Sequence>
      <maintain_patrol/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Action ID=""lock_doors""/>
    <Action ID=""maintain_patrol""/>
    <Condition ID=""is_intruder_detected""/>
  </TreeNodesModel>
</root>",two,85.72728967666626,"<root BTCPP_format=""3"" main_tree_to_execute=""IntruderResponse"">  
	<BehaviorTree ID=""IntruderResponse"">    
		<Sequence name=""Intruder Handling"">      
			<is_intruder_detected/>      
			<lock_doors/>    
		</Sequence>    
		<Fallback name=""Normal Operation"">      
			<maintain_patrol/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_intruder_detected""/>    
		<Action ID=""lock_doors""/>    
		<Action ID=""maintain_patrol""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_intruder: Condition node: Identify if an intruder is present. Returns SUCCESS if detected, FAILURE otherwise.; activate_alarm: Action Node: Trigger the security alarm. Always returns SUCCESS.; investigate_area: Action Node: Investigate the area for intruders. Always returns SUCCESS.; return_to_patrol: Action Node: Resume regular patrol duties. Always returns SUCCESS.; log_event: Action Node: Log the detected event. Always returns SUCCESS; call_security: Action Node: Contact security personnel. Always returns SUCCESS}. To construct a behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""Detect intruder, if detected activate alarm and call security, else continue patrol"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""IntrusionResponse"">
  <BehaviorTree ID=""IntrusionResponse"">
    <Sequence name=""Main Sequence"">
      <detect_intruder/>
      <Fallback name=""Intrusion Handling"">
        <Sequence>
          <detect_intruder/>
          <activate_alarm/>
          <call_security/>
          <log_event/>
        </Sequence>
        <return_to_patrol/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""detect_intruder""/>
    <Action ID=""activate_alarm""/>
    <Action ID=""call_security""/>
    <Action ID=""log_event""/>
    <Action ID=""return_to_patrol""/>
    <Action ID=""investigate_area"" editable=""false""/>
  </TreeNodesModel>
</root>",two,105.95276522636414,"<root BTCPP_format=""3"" main_tree_to_execute=""IntruderResponse"">  
	<BehaviorTree ID=""IntruderResponse"">    
		<Sequence name=""Intruder Handling"">      
			<detect_intruder/>      
			<Fallback name=""Alarm and Security Call"">        
				<activate_alarm/>        
				<call_security/>      
			</Fallback>    
		</Sequence>    
		<Fallback name=""Normal Operations"">      
			<return_to_patrol/>      
			<log_event/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""detect_intruder""/>    
		<Action ID=""activate_alarm""/>    
		<Action ID=""call_security""/>    
		<Action ID=""return_to_patrol""/>    
		<Action ID=""log_event""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  is_area_mapped: Condition node: Check if the area is mapped. Returns SUCCESS if mapped, FAILURE otherwise.;
  is_path_blocked: Condition node: Check if the path is blocked. Returns SUCCESS if blocked, FAILURE otherwise.;
  turn_left: Action Node: Turn the agent left. Always returns SUCCESS.;
  turn_right: Action Node: Turn the agent right. Always returns SUCCESS.;
  move_forward: Action Node: Move the agent forward. Always returns SUCCESS.;
  update_map: Action Node: Update the mapping data. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if area is mapped, then if the path is blocked, turn left or right; otherwise, move forward and update the map"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""MapArea"">
  <BehaviorTree ID=""MapArea"">
    <Sequence>
      <is_area_mapped/>
      <Fallback>
        <Sequence>
          <is_path_blocked/>
          <Fallback>
            <turn_left/>
            <turn_right/>
          </Fallback>
        </Sequence>
        <Sequence>
          <move_forward/>
          <update_map/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID=""Fallback""/>
    <Condition ID=""is_area_mapped""/>
    <Condition ID=""is_path_blocked""/>
    <Action ID=""move_forward""/>
    <Action ID=""turn_left""/>
    <Action ID=""turn_right""/>
    <Action ID=""update_map""/>
  </TreeNodesModel>
</root>",two,113.17755484580994,"<root BTCPP_format=""3"" main_tree_to_execute=""NavigationBehavior"">  
	<BehaviorTree ID=""NavigationBehavior"">    
		<Sequence name=""Area Navigation"">      
			<is_area_mapped/>      
			<Fallback name=""Path Handling"">        
				<is_path_blocked/>        
				<Sequence name=""Turn Decision"">          
					<turn_left/>          
					<turn_right/>        
				</Sequence>      
			</Fallback>      
			<Sequence name=""Normal Movement"">        
				<move_forward/>        
				<update_map/>      
			</Sequence>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_area_mapped""/>    
		<Condition ID=""is_path_blocked""/>    
		<Action ID=""turn_left""/>    
		<Action ID=""turn_right""/>    
		<Action ID=""move_forward""/>    
		<Action ID=""update_map""/>    
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","Use only the following behaviors structured as a dictionary: {IsBatteryLow: Condition node: Checks if the battery level is below threshold. Returns SUCCESS if low, FAILURE otherwise.; GoToChargingStation: Action Node: Navigates the robot to the charging station. Always returns SUCCESS.; ChargeBattery: Action Node: Initiates battery charging. Always returns SUCCESS.; ResumeTask: Action Node: Resumes the previous task after charging. Always returns SUCCESS.}. Including any behavior not in this dictionary will result in failure, so avoid using them.","generate behavior tree to ""if the battery is low, go to the charging station, charge the battery, and then resume the previous task"". Output only the XML behavior tree without extra text.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">
  <BehaviorTree ID=""BatteryManagement"">
    <Sequence>
      <IsBatteryLow/>
      <GoToChargingStation/>
      <ChargeBattery/>
      <ResumeTask/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""IsBatteryLow""/>
    <Action ID=""GoToChargingStation""/>
    <Action ID=""ChargeBattery""/>
    <Action ID=""ResumeTask""/>
  </TreeNodesModel>
</root>",two,90.58287978172302,"<root BTCPP_format=""3"" main_tree_to_execute=""BatteryManagement"">  
	<BehaviorTree ID=""BatteryManagement"">    
		<Fallback name=""Battery Management"">      
			<Sequence name=""Low Battery Sequence"">        
				<IsBatteryLow/>        
				<GoToChargingStation/>        
				<ChargeBattery/>        
				<ResumeTask/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""IsBatteryLow""/>    
		<Action ID=""GoToChargingStation""/>    
		<Action ID=""ChargeBattery""/>    
		<Action ID=""ResumeTask""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_clear: Condition node: Check if the designated area is clear of obstacles. Returns SUCCESS if clear, FAILURE otherwise.; start_cleaning: Action Node: Begin the cleaning process. Always returns SUCCESS.; alert_obstruction: Action Node: Alert the system of an obstruction. Always returns SUCCESS.; navigate_to_area: Action Node: Navigate to the designated cleaning area. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. Including any behavior not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.","generate behavior tree to ""if the area is clear then start cleaning, otherwise navigate to area and alert obstruction"". Take a step back and think deeply about the behavior.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""CleaningProcess"">
  <BehaviorTree ID=""CleaningProcess"">
    <Fallback name=""Cleaning Fallback"">
      <Sequence name=""Start Cleaning Sequence"">
        <is_area_clear/>
        <start_cleaning/>
      </Sequence>
      <Sequence name=""Handle Obstruction Sequence"">
        <navigate_to_area/>
        <alert_obstruction/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_area_clear""/>
    <Action ID=""start_cleaning""/>
    <Action ID=""navigate_to_area""/>
    <Action ID=""alert_obstruction""/>
  </TreeNodesModel>
</root>",two,103.15381336212158,"<root BTCPP_format=""3"" main_tree_to_execute=""AreaManagement"">  
	<BehaviorTree ID=""AreaManagement"">    
		<Fallback name=""Area Status Handling"">      
			<Sequence name=""Clear Area Sequence"">        
				<is_area_clear/>        
				<start_cleaning/>      
			</Sequence>      
			<Sequence name=""Obstruction Handling"">        
				<navigate_to_area/>        
				<alert_obstruction/>      
			</Sequence>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_area_clear""/>    
		<Action ID=""start_cleaning""/>    
		<Action ID=""navigate_to_area""/>    
		<Action ID=""alert_obstruction""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
"<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>","It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_clear: Condition node: Verify that the area is free of obstacles. Returns SUCCESS if clear, FAILURE otherwise.; scan_for_resources: Action Node: Perform a scan to locate resources in the area. Always returns SUCCESS.; collect_resource: Action Node: Gather the identified resource. Always returns SUCCESS.; alert_obstacle: Action Node: Notify the system of any detected obstacle. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).","generate behavior tree to ""if the area is clear then scan for resources and collect them, else alert obstacle"". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.","<?xml version=""1.0"" encoding=""UTF-8""?>
<root BTCPP_format=""3"" main_tree_to_execute=""ResourceCollection"">
  <BehaviorTree ID=""ResourceCollection"">
    <Sequence name=""Collection Sequence"">
      <is_area_clear/>
      <Sequence name=""Scan and Collect"">
        <scan_for_resources/>
        <collect_resource/>
      </Sequence>
    </Sequence>
    <alert_obstacle/>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID=""is_area_clear""/>
    <Action ID=""scan_for_resources""/>
    <Action ID=""collect_resource""/>
    <Action ID=""alert_obstacle""/>
  </TreeNodesModel>
</root>",two,104.9054536819458,"<root BTCPP_format=""3"" main_tree_to_execute=""ResourceManagement"">  
	<BehaviorTree ID=""ResourceManagement"">    
		<Sequence name=""Area Clear Sequence"">      
			<is_area_clear/>      
			<Sequence>        
				<scan_for_resources/>        
				<collect_resource/>      
			</Sequence>    
		</Sequence>    
		<Fallback name=""Obstacle Handling"">      
			<alert_obstacle/>    
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_area_clear""/>    
		<Action ID=""scan_for_resources""/>    
		<Action ID=""collect_resource""/>    
		<Action ID=""alert_obstacle""/>    
		<Action ID=""change_color"" editable=""true"">
      	<input_port name=""color""/>
    	</Action>
	</TreeNodesModel>
</root>",Falcon3-10B-Instruct-BehaviorTree-1epochs.Q4_K_M
