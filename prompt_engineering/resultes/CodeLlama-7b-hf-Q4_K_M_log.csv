Prompt,Prompt Type,Time,Behavior Tree,Model Name
"detect an obstacle, avoid it, and then flock safely with other agents",zero,403.5312924385071,"<BTCPP_format main_tree_to_execute=""main"">
        <BehaviorTree>
            <Sequence name=""root"">
                <Fallback name=""fallback"">
                    <Condition name=""is_obstacle_detected"" />
                    <Action name=""avoid_obstacle"" />
                </Fallback>
                <Action name=""flocking"" />
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <NodeModel name=""is_obstacle_detected"">
                <Condition name=""is_obstacle_detected"" />
            </NodeModel>
            <NodeModel name=""avoid_obstacle"">
                <Action name=""avoid_obstacle"" />
            </NodeModel>
            <NodeModel name=""flocking"">
                <Action name=""flocking"" />
            </NodeModel>
        </TreeNodesModel>
    </BTCPP_format>
    
    <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
    INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: say: Action Node: Speak the provided message using text-to-speech if it hasn't been spoken before. Args: message (str): The message to be spoken. Returns: Always returns SUCCESS, indicating the action was executed.
flocking: Action Node: Adjust the agent's move vector by blending alignment and separation forces from nearby agents. Returns: Always returns SUCCESS, indicating the action was executed.
align_with_swarm: Action Node: Align the agent's move vector with the average movement of nearby agents. Returns: Always returns SUCCESS, indicating the action was executed.
is_obstacle_detected: Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: SUCCESS if an obstacle is detected, FAILURE otherwise.
avoid_obstacle: Action node: Execute an action to avoid detected obstacles. Returns: Always returns SUCCESS, indicating the action was executed.
is_target_detected: Condition node: Check if the target is within a detectable distance from the agent's position. Returns: SUCCESS if the target is within 20 units of distance, FAILURE otherwise.
is_target_reached: Condition node: Check if the agent has reached the target. Returns: SUCCESS if the target is within 15 units of distance, FAILURE otherwise.
change_color: Action Node: Change the agent's color to 'white', 'green', or 'red'. Args: color (str): Color name. Returns: Always returns SUCCESS, indicating the action was executed.
is_agent_in_nest: Condition node: Determine if the agent is in the nest. Returns: SUCCESS if the agent is in the nest, FAILURE otherwise.
agent_movement_freeze: Action node: Freeze the agent's movement, typically to indicate a stop in activity. Returns: Always returns SUCCESS, indicating the action was executed.
continue_movement_agent: Action node: Continue the agent's movement after it has been previously frozen. Returns: Always returns SUCCESS, indicating the action was executed.
move_randomly: Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns SUCCESS, indicating the action was executed.
is_path_clear: Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: SUCCESS if no obstacles are detected ahead, FAILURE if obstacles are present.
is_line_formed: Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: SUCCESS if the line is formed with the center, FAILURE otherwise.
form_line: Action node: Direct the agent to form a line towards the center of the window. This function adjuststhe agent's position to align it with the center. Returns: Always returns SUCCESS, indicating the action was executed. to construct behavior tree in XML format for the following command. Including any behavior that is not in the provided dictionary can result in damage to the agents and potentially humans, therefore you are not allowed to do so. AVOID AT ALL COSTS.
    USER COMMAND: generate behavior tree to """,CodeLlama-7b-hf-Q4_K_M
"wander randomly until a target is detected, approach it, and signal achievement by changing color to red",zero,231.97241735458374,"<BTCPP_format main_tree_to_execute=""main"">
        <BehaviorTree>
            <Sequence name=""main"">
                <Fallback name=""wander until target detected"">
                    <Sequence name=""wander randomly"">
                        <Action name=""move randomly"" />
                        <Condition name=""path clear"">
                            <IsPathClear />
                        </Condition>
                    </Sequence>
                    <Fallback name=""stop wander if target detected"">
                        <Condition name=""target detected"">
                            <IsTargetDetected />
                        </Condition>
                        <Action name=""freeze movement"" />
                    </Fallback>
                </Fallback>
                <Sequence name=""approach target"">
                    <Condition name=""target reached"">
                        <IsTargetReached />
                    </Condition>
                    <Action name=""change color to red"" />
                </Sequence>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <NodeModel name=""Action"" type=""Action"">
                <Attribute name=""name"" type=""string"" />
            </NodeModel>
            <NodeModel name=""Condition"" type=""Condition"">
                <Attribute name=""name"" type=""string"" />
                <ChildNodeModel name=""child_node"" type=""Node"" />
            </NodeModel>
            <NodeModel name=""Fallback"" type=""Fallback"">
                <Attribute name=""name"" type=""string"" />
                <ChildNodeModel name=""child_node"" type=""Node"" />
            </NodeModel>
            <NodeModel name=""Sequence"" type=""Sequence"">
                <Attribute name=""name"" type=""string"" />
                <ChildNodeModel name=""child_node"" type=""Node"" />
            </NodeModel>
        </TreeNodesModel>
    </BTCPP_format>
    
    <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
    INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: say: Action Node: Speak the provided message using text-to-speech if it hasn't been spoken before. Args: message (str): The message to be spoken. Returns: Always returns SUCCESS, indicating the action was executed.
flocking: Action Node: Adjust the agent's move vector by blending alignment and separation forces from nearby agents. Returns: Always returns SUCCESS, indicating the action was executed.
align_with_swarm: Action Node: Align the agent's move vector with the average movement of nearby agents. Returns: Always returns SUCCESS, indicating the action was executed.
is_obstacle_detected: Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: SUCCESS if an obstacle is detected, FAILURE otherwise.
avoid_obstacle: Action node: Execute an action to avoid detected obstacles. Returns: Always returns SUCCESS, indicating the action was executed.
is_target_detected: Condition node: Check if the target is within a detectable distance from the agent's position. Returns: SUCCESS if the target is within 20 units of distance, FAILURE otherwise.
is_target_reached: Condition node: Check if the agent has reached the target. Returns: SUCCESS if the target is within 15 units of distance, FAILURE otherwise.
change_color: Action Node: Change the agent's color to 'white', 'green', or 'red'. Args: color (str): Color name. Returns: Always returns SUCCESS, indicating the action was executed.
is_agent_in_nest: Condition node: Determine if the agent is in the nest. Returns: SUCCESS if the agent is in the nest, FAILURE otherwise.
agent_movement_freeze: Action node: Freeze the agent's movement, typically to indicate a stop in activity. Returns: Always returns SUCCESS, indicating the action was executed.
continue_movement_agent: Action node: Continue the agent's movement after it has been previously frozen. Returns: Always returns SUCCESS, indicating the action was executed.
move_randomly: Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns SUCCESS, indicating the action was executed.
is_",CodeLlama-7b-hf-Q4_K_M
"check if path is clear, form a line at the center",zero,229.5088074207306,"<BTCPP_format main_tree_to_execute=""main"">
        <BehaviorTree>
            <Sequence name=""sequence1"">
                <IsPathClear/>
                <FormLine/>
            </Sequence>
            <Fallback name=""fallback1"">
                <Sequence name=""sequence2"">
                    <IsAgentInNest/>
                    <ChangeColor color=""white""/>
                </Sequence>
                <Sequence name=""sequence3"">
                    <IsTargetDetected/>
                    <AvoidObstacle/>
                </Sequence>
            </Fallback>
        </BehaviorTree>
        <TreeNodesModel>
            <NodeModel name=""IsPathClear"" type=""Condition""/>
            <NodeModel name=""FormLine"" type=""Action""/>
            <NodeModel name=""IsAgentInNest"" type=""Condition""/>
            <NodeModel name=""ChangeColor"" type=""Action""/>
            <NodeModel name=""IsTargetDetected"" type=""Condition""/>
            <NodeModel name=""AvoidObstacle"" type=""Action""/>
        </TreeNodesModel>
    </BTCPP_format>
    
    <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
    INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: say: Action Node: Speak the provided message using text-to-speech if it hasn't been spoken before. Args: message (str): The message to be spoken. Returns: Always returns SUCCESS, indicating the action was executed.
flocking: Action Node: Adjust the agent's move vector by blending alignment and separation forces from nearby agents. Returns: Always returns SUCCESS, indicating the action was executed.
align_with_swarm: Action Node: Align the agent's move vector with the average movement of nearby agents. Returns: Always returns SUCCESS, indicating the action was executed.
is_obstacle_detected: Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: SUCCESS if an obstacle is detected, FAILURE otherwise.
avoid_obstacle: Action node: Execute an action to avoid detected obstacles. Returns: Always returns SUCCESS, indicating the action was executed.
is_target_detected: Condition node: Check if the target is within a detectable distance from the agent's position. Returns: SUCCESS if the target is within 20 units of distance, FAILURE otherwise.
is_target_reached: Condition node: Check if the agent has reached the target. Returns: SUCCESS if the target is within 15 units of distance, FAILURE otherwise.
change_color: Action Node: Change the agent's color to 'white', 'green', or 'red'. Args: color (str): Color name. Returns: Always returns SUCCESS, indicating the action was executed.
is_agent_in_nest: Condition node: Determine if the agent is in the nest. Returns: SUCCESS if the agent is in the nest, FAILURE otherwise.
agent_movement_freeze: Action node: Freeze the agent's movement, typically to indicate a stop in activity. Returns: Always returns SUCCESS, indicating the action was executed.
continue_movement_agent: Action node: Continue the agent's movement after it has been previously frozen. Returns: Always returns SUCCESS, indicating the action was executed.
move_randomly: Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns SUCCESS, indicating the action was executed.
is_path_clear: Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: SUCCESS if no obstacles are detected ahead, FAILURE otherwise.
is_line_formed: Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: SUCCESS if the line is formed with the center, FAILURE otherwise.
form_line: Action node: Direct the agent to form a line towards the center of the window. This function adjuststhe agent's position to align it with the center. Returns: Always returns SUCCESS, indicating the action was executed. to construct behavior tree in XML format for the following command. Including any behavior that is not in the provided dictionary can result in damage to the agents and potentially humans, therefore you are",CodeLlama-7b-hf-Q4_K_M
"find the goal, signal success by changing color to red, and align movement with other swarm agents",zero,230.8295545578003,"<BTCPP_format main_tree_to_execute=""main"">
        <BehaviorTree>
            <Sequence name=""main"">
                <Fallback name=""find the goal, signal success by changing color to red, and align movement with other swarm agents"">
                    <Condition name=""is_target_detected"" />
                    <Action name=""change_color"" args=""red"" />
                    <Action name=""align_with_swarm"" />
                </Fallback>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <NodeModel name=""Condition"">
                <Attribute name=""name"" type=""string"" value=""is_target_detected"" />
            </NodeModel>
            <NodeModel name=""Action"">
                <Attribute name=""name"" type=""string"" value=""change_color"" />
                <Attribute name=""args"" type=""string"" value=""red"" />
            </NodeModel>
            <NodeModel name=""Action"">
                <Attribute name=""name"" type=""string"" value=""align_with_swarm"" />
            </NodeModel>
        </TreeNodesModel>
    </BTCPP_format>
    
    <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
    INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: say: Action Node: Speak the provided message using text-to-speech if it hasn't been spoken before. Args: message (str): The message to be spoken. Returns: Always returns SUCCESS, indicating the action was executed.
flocking: Action Node: Adjust the agent's move vector by blending alignment and separation forces from nearby agents. Returns: Always returns SUCCESS, indicating the action was executed.
align_with_swarm: Action Node: Align the agent's move vector with the average movement of nearby agents. Returns: Always returns SUCCESS, indicating the action was executed.
is_obstacle_detected: Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: SUCCESS if an obstacle is detected, FAILURE otherwise.
avoid_obstacle: Action node: Execute an action to avoid detected obstacles. Returns: Always returns SUCCESS, indicating the action was executed.
is_target_detected: Condition node: Check if the target is within a detectable distance from the agent's position. Returns: SUCCESS if the target is within 20 units of distance, FAILURE otherwise.
is_target_reached: Condition node: Check if the agent has reached the target. Returns: SUCCESS if the target is within 15 units of distance, FAILURE otherwise.
change_color: Action Node: Change the agent's color to 'white', 'green', or 'red'. Args: color (str): Color name. Returns: Always returns SUCCESS, indicating the action was executed.
is_agent_in_nest: Condition node: Determine if the agent is in the nest. Returns: SUCCESS if the agent is in the nest, FAILURE otherwise.
agent_movement_freeze: Action node: Freeze the agent's movement, typically to indicate a stop in activity. Returns: Always returns SUCCESS, indicating the action was executed.
continue_movement_agent: Action node: Continue the agent's movement after it has been previously frozen. Returns: Always returns SUCCESS, indicating the action was executed.
move_randomly: Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns SUCCESS, indicating the action was executed.
is_path_clear: Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: SUCCESS if no obstacles are detected ahead, FAILURE if obstacles are present.
is_line_formed: Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: SUCCESS if the line is formed with the center, FAILURE otherwise.
form_line: Action node: Direct the agent to form a line towards the center of the window. This function adjuststhe agent's position to align it with the center. Returns: Always returns SUCCESS, indicating the action was executed. to construct behavior tree in XML format for the following command. Including any behavior that is not",CodeLlama-7b-hf-Q4_K_M
"detect target, freeze movement upon reaching it",zero,230.2044084072113,"<BTCPP_format main_tree_to_execute=""main"">
        <BehaviorTree>
            <Sequence name=""sequence_0"">
                <IsTargetDetected/>
                <FreezeMovementAgent/>
            </Sequence>
        </BehaviorTree>
        <TreeNodesModel>
            <NodeModel name=""IsTargetDetected"" type=""Condition""/>
            <NodeModel name=""FreezeMovementAgent"" type=""Action""/>
        </TreeNodesModel>
    </BTCPP_format>
    
    <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
    INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: say: Action Node: Speak the provided message using text-to-speech if it hasn't been spoken before. Args: message (str): The message to be spoken. Returns: Always returns SUCCESS, indicating the action was executed.
flocking: Action Node: Adjust the agent's move vector by blending alignment and separation forces from nearby agents. Returns: Always returns SUCCESS, indicating the action was executed.
align_with_swarm: Action Node: Align the agent's move vector with the average movement of nearby agents. Returns: Always returns SUCCESS, indicating the action was executed.
is_obstacle_detected: Condition node: Determine if any obstacles are detected in the vicinity of the agent. Returns: SUCCESS if an obstacle is detected, FAILURE otherwise.
avoid_obstacle: Action node: Execute an action to avoid detected obstacles. Returns: Always returns SUCCESS, indicating the action was executed.
is_target_detected: Condition node: Check if the target is within a detectable distance from the agent's position. Returns: SUCCESS if the target is within 20 units of distance, FAILURE otherwise.
is_target_reached: Condition node: Check if the agent has reached the target. Returns: SUCCESS if the target is within 15 units of distance, FAILURE otherwise.
change_color: Action Node: Change the agent's color to 'white', 'green', or 'red'. Args: color (str): Color name. Returns: Always returns SUCCESS, indicating the action was executed.
is_agent_in_nest: Condition node: Determine if the agent is in the nest. Returns: SUCCESS if the agent is in the nest, FAILURE otherwise.
agent_movement_freeze: Action node: Freeze the agent's movement, typically to indicate a stop in activity. Returns: Always returns SUCCESS, indicating the action was executed.
continue_movement_agent: Action node: Continue the agent's movement after it has been previously frozen. Returns: Always returns SUCCESS, indicating the action was executed.
move_randomly: Action node: Perform a wandering action where the agent moves randomly within the environment. Returns: Always returns SUCCESS, indicating the action was executed.
is_path_clear: Condition node: Check if the path ahead of the agent is clear of obstacles. Returns: SUCCESS if no obstacles are detected ahead, FAILURE if obstacles are present.
is_line_formed: Condition node: Determine if the agent has formed a line with a reference point at the center of the window. Returns: SUCCESS if the line is formed with the center, FAILURE otherwise.
form_line: Action node: Direct the agent to form a line towards the center of the window. This function adjuststhe agent's position to align it with the center. Returns: Always returns SUCCESS, indicating the action was executed. to construct behavior tree in XML format for the following command. Including any behavior that is not in the provided dictionary can result in damage to the agents and potentially humans, therefore you are not allowed to do so. AVOID AT ALL COSTS.
    USER COMMAND: generate behavior tree to ""detect target, freeze movement upon reaching it"". Take a step back and think deeply about the behavior you need for this command. Consider the XML structure and the behaviors you use.
    The output MUST follow this XML structure exactly, including:
    - A root element with BTCPP_format and main_tree_to_execute attributes.
    - A <BehaviorTree> element with an inner structure of Sequences, Fallback, Conditions, and Actions.
    - A",CodeLlama-7b-hf-Q4_K_M
"detect an obstacle, avoid it, and then flock safely with other agents",one,172.0362901687622,"<root BTCPP_format=""3"" main_tree_to_execute=""Main"">  
	<BehaviorTree ID=""Main"">    
		<Sequence name=""Detect Obstacle Sequence"">      
			<is_obstacle_detected/>      
			<avoid_obstacle/>    
		</Sequence>    
		<Fallback name=""Flocking Sequence"">      
			<flocking/>      
			<align_with_swarm/>    
		</Fallback>  
		<Sequence name=""Form Line Sequence"">        
			<is_path_clear/>        
			<is_line_formed/>        
			<form_line/>      
		</Sequence>    
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_obstacle_detected""/>    
		<Action ID=""avoid_obstacle"" editable=""true""/>    
		<Action ID=""flocking"" editable=""true""/>    
		<Action ID=""align_with_swarm"" editable=""true""/>    
		<Condition ID=""is_path_clear""/>    
		<Condition ID=""is_line_formed""/>    
		<Action ID=""form_line"" editable=""true""/>  
	</TreeNodesModel>
</root>",CodeLlama-7b-hf-Q4_K_M
"wander randomly until a target is detected, approach it, and signal achievement by changing color to red",one,90.18785452842712,"<root BTCPP_format=""3"" main_tree_to_execute=""Main"">  
	<BehaviorTree ID=""Main"">    
		<Sequence name=""Wander Randomly"">      
			<move_randomly/>      
		</Sequence>      
		<Fallback name=""Detect Target"">        
			<is_target_detected/>        
			<Sequence name=""Approach Target"">          
				<is_path_clear/>          
				<move_towards_point/>        
			</Sequence>        
			<Sequence name=""Detect Obstacle"">          
				<is_obstacle_detected/>          
				<avoid_obstacle/>        
			</Sequence>      
		</Fallback>    
		<Sequence name=""Change Color"">      
			<change_color color=""red""/>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_target_detected""/>    
		<Action ID=""move_towards_point"" editable=""true""/>    
		<Condition ID=""is_path_clear""/>    
		<Action ID=""avoid_obstacle"" editable=""true""/>    
		<Action ID=""change_color"" editable=""true""/>    
	</TreeNodesModel>
</root>",CodeLlama-7b-hf-Q4_K_M
"check if path is clear, form a line at the center",one,42.68272662162781,"<root BTCPP_format=""3"" main_tree_to_execute=""Main"">  
	<BehaviorTree ID=""Main"">    
		<Sequence name=""Check if path is clear, form a line at the center"">      
			<is_path_clear/>      
			<form_line/>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_path_clear""/>    
		<Action ID=""form_line"" editable=""true""/>  
	</TreeNodesModel>
</root>",CodeLlama-7b-hf-Q4_K_M
"find the goal, signal success by changing color to red, and align movement with other swarm agents",one,58.08757948875427,"<root BTCPP_format=""3"" main_tree_to_execute=""FindGoal"">  
	<BehaviorTree ID=""FindGoal"">    
		<Sequence name=""Find Goal Sequence"">      
			<is_target_detected/>      
			<is_target_reached/>      
			<change_color color=""red""/>    
			<align_with_swarm/>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_target_detected""/>    
		<Condition ID=""is_target_reached""/>    
		<Action ID=""change_color"" editable=""true""/>    
		<Action ID=""align_with_swarm"" editable=""true""/>  
	</TreeNodesModel>
</root>",CodeLlama-7b-hf-Q4_K_M
"detect target, freeze movement upon reaching it",one,44.88476252555847,"<root BTCPP_format=""3"" main_tree_to_execute=""Main"">  
	<BehaviorTree ID=""Main"">    
		<Sequence name=""Detect Target, Freeze Movement Upon Reaching It"">      
			<is_target_detected/>      
			<agent_movement_freeze/>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_target_detected""/>    
		<Action ID=""agent_movement_freeze"" editable=""true""/>    
	</TreeNodesModel>
</root>",CodeLlama-7b-hf-Q4_K_M
"detect an obstacle, avoid it, and then flock safely with other agents",two,158.0820415019989,"<root BTCPP_format=""3"" main_tree_to_execute=""Main"">  
      <BehaviorTree ID=""Main"">    
        <Sequence name=""Detect Obstacle"">      
          <is_obstacle_detected/>      
          <avoid_obstacle/>    
        </Sequence>    
        <Fallback name=""Flocking"">      
          <flocking/>        
          <align_with_swarm/>      
        </Fallback>  
      </BehaviorTree>  
      <TreeNodesModel>    
        <Condition ID=""is_obstacle_detected""/>    
        <Action ID=""avoid_obstacle"" editable=""true""/>    
        <Action ID=""flocking"" editable=""true""/>    
        <Action ID=""align_with_swarm"" editable=""true""/>  
      </TreeNodesModel>
    </root>",CodeLlama-7b-hf-Q4_K_M
"wander randomly until a target is detected, approach it, and signal achievement by changing color to red",two,96.6138367652893,"<root BTCPP_format=""3"" main_tree_to_execute=""Wander"">  
	<BehaviorTree ID=""Wander"">    
		<Sequence name=""Wandering"">      
			<move_randomly/>      
			<is_target_detected/>    
		</Sequence>    
		<Fallback name=""Target Approach"">      
			<is_path_clear/>        
			<is_agent_in_nest/>      
			<continue_movement_agent/>      
			<move_randomly/>      
		</Fallback>    
		<Sequence name=""Target Reached"">      
			<is_target_reached/>        
			<change_color color=""red""/>      
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Action ID=""move_randomly"" editable=""true""/>    
		<Condition ID=""is_target_detected""/>    
		<Condition ID=""is_path_clear""/>    
		<Condition ID=""is_agent_in_nest""/>    
		<Action ID=""continue_movement_agent"" editable=""true""/>    
		<Action ID=""change_color"" editable=""true""/>    
		<Condition ID=""is_target_reached""/>  
	</TreeNodesModel>
</root>",CodeLlama-7b-hf-Q4_K_M
"check if path is clear, form a line at the center",two,60.41087102890015,"<root BTCPP_format=""3"" main_tree_to_execute=""Main"">  
	<BehaviorTree ID=""Main"">    
		<Sequence name=""Check Path and Line Formation"">      
			<is_path_clear/>      
			<Fallback name=""Form Line"">        
				<form_line/>      
			</Fallback>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_path_clear""/>    
		<Action ID=""form_line"" editable=""true""/>    
		<Control ID=""Fallback"" editable=""true""/>    
		<Control ID=""Sequence"" editable=""true""/>  
	</TreeNodesModel>
</root>",CodeLlama-7b-hf-Q4_K_M
"find the goal, signal success by changing color to red, and align movement with other swarm agents",two,76.41161394119263,"<root BTCPP_format=""3"" main_tree_to_execute=""FindGoal"">  
	<BehaviorTree ID=""FindGoal"">    
		<Sequence name=""Find Goal"">      
			<is_target_detected/>      
			<Fallback name=""Align with Swarm"">        
				<align_with_swarm/>        
			</Fallback>    
		</Sequence>    
		<Fallback name=""Move Randomly"">      
			<move_randomly/>      
		</Fallback>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_target_detected""/>    
		<Action ID=""align_with_swarm"" editable=""true""/>    
		<Action ID=""move_randomly"" editable=""true""/>    
		<Control ID=""Fallback"" editable=""true""/>    
		<Control ID=""Sequence"" editable=""true""/>  
	</TreeNodesModel>
</root>",CodeLlama-7b-hf-Q4_K_M
"detect target, freeze movement upon reaching it",two,128.60377097129822,"<root BTCPP_format=""3"" main_tree_to_execute=""Main"">  
	<BehaviorTree ID=""Main"">    
		<Sequence name=""Detect Target"">      
			<is_target_detected/>      
			<Fallback name=""Freeze Movement"">        
				<agent_movement_freeze/>        
			</Fallback>    
		</Sequence>    
		<Sequence name=""Reach Target"">      
			<is_target_reached/>      
			<Fallback name=""Continue Movement"">        
				<continue_movement_agent/>        
			</Fallback>    
		</Sequence>  
	</BehaviorTree>  
	<TreeNodesModel>    
		<Condition ID=""is_target_detected""/>    
		<Action ID=""agent_movement_freeze"" editable=""true""/>    
		<Action ID=""continue_movement_agent"" editable=""true""/>    
		<Fallback ID=""Freeze Movement"" editable=""true""/>    
		<Condition ID=""is_target_reached""/>    
		<Fallback ID=""Continue Movement"" editable=""true""/>    
		<Sequence name=""Detect Target"" editable=""true"">      
			<is_target_detected/>      
			<Fallback name=""Freeze Movement"">        
				<agent_movement_freeze/>        
			</Fallback>    
		</Sequence>    
		<Sequence name=""Reach Target"" editable=""true"">      
			<is_target_reached/>      
			<Fallback name=""Continue Movement"">        
				<continue_movement_agent/>        
			</Fallback>    
		</Sequence>  
	</TreeNodesModel>
</root>",CodeLlama-7b-hf-Q4_K_M
