###
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary:
{
    `is_battery_low`: Condition node: Check if the battery level is below a predefined threshold. Returns SUCCESS if low, FAILURE otherwise.;
    `initiate_charging`: Action Node: Start the charging process. Always returns SUCCESS.;
    `continue_patrol`: Action Node: Continue the patrol routine. Always returns SUCCESS.;
    `send_alert`: Action Node: Send a low battery alert to the control center. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND: Generate behavior tree to "if the battery is low then initiate charging and send an alert, otherwise continue patrol". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Sequence name="Low Battery Sequence">
      <is_battery_low/>
      <initiate_charging/>
      <send_alert/>
    </Sequence>
    <continue_patrol/>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Sequence"/>
    <Condition ID="is_battery_low"/>
    <Action ID="initiate_charging"/>
    <Action ID="send_alert"/>
    <Action ID="continue_patrol"/>
  </TreeNodesModel>
</root>

###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary:
{
    `is_obstacle_detected`: Condition node: Check if there is an obstacle in the path. Returns SUCCESS if detected, FAILURE otherwise.;
    `avoid_obstacle`: Action Node: Execute obstacle avoidance maneuvers. Always returns SUCCESS.;
    `proceed_forward`: Action Node: Continue moving forward. Always returns SUCCESS.;
    `wait_for_clearance`: Action Node: Wait until the path is clear. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND:
Generate behavior tree to "if an obstacle is detected then avoid it, otherwise proceed forward". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ObstacleAvoidance">
  <BehaviorTree ID="ObstacleAvoidance">
    <Fallback name="Obstacle Fallback">
      <Sequence name="Avoid Obstacle Sequence">
        <is_obstacle_detected/>
        <avoid_obstacle/>
      </Sequence>
      <proceed_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_obstacle_detected"/>
    <Action ID="avoid_obstacle"/>
    <Action ID="proceed_forward"/>
  </TreeNodesModel>
</root>

###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary:
{
    `is_intruder_present`: Condition node: Detect the presence of an intruder. Returns SUCCESS if present, FAILURE otherwise.;
    `activate_alarm`: Action Node: Activate the security alarm. Always returns SUCCESS.;
    `notify_security`: Action Node: Send a notification to the security team. Always returns SUCCESS.;
    `continue_monitoring`: Action Node: Continue monitoring the area. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND:
Generate behavior tree to "if an intruder is present then activate the alarm and notify security, otherwise continue monitoring". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="SecuritySystem">
  <BehaviorTree ID="SecuritySystem">
    <Sequence name="Intruder Response Sequence">
      <is_intruder_present/>
      <activate_alarm/>
      <notify_security/>
    </Sequence>
    <continue_monitoring/>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Sequence"/>
    <Condition ID="is_intruder_present"/>
    <Action ID="activate_alarm"/>
    <Action ID="notify_security"/>
    <Action ID="continue_monitoring"/>
  </TreeNodesModel>
</root>

###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary:
{
    `is_package_available`: Condition node: Check if a delivery package has arrived. Returns SUCCESS if available, FAILURE otherwise.;
    `pick_up_package`: Action Node: Pick up the delivery package. Always returns SUCCESS.;
    `deliver_package`: Action Node: Deliver the package to the designated location. Always returns SUCCESS.;
    `await_package`: Action Node: Wait for the next package arrival. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND:
Generate behavior tree to "if a package is available then pick it up and deliver it, otherwise await the next package". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="DeliveryProcess">
  <BehaviorTree ID="DeliveryProcess">
    <Sequence name="Package Handling Sequence">
      <is_package_available/>
      <pick_up_package/>
      <deliver_package/>
    </Sequence>
    <await_package/>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Sequence"/>
    <Condition ID="is_package_available"/>
    <Action ID="pick_up_package"/>
    <Action ID="deliver_package"/>
    <Action ID="await_package"/>
  </TreeNodesModel>
</root>

###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary:
{
    `is_light_level_low`: Condition node: Check if the ambient light level is below a predefined threshold. Returns SUCCESS if low, FAILURE otherwise.;
    `turn_on_lights`: Action Node: Activate the lighting system. Always returns SUCCESS.;
    `continue_operation`: Action Node: Continue normal operations. Always returns SUCCESS.;
    `adjust_sensors`: Action Node: Adjust sensor sensitivity based on light levels. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND:
Generate behavior tree to "if the light level is low then turn on the lights and adjust sensors, otherwise continue operation". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="LightManagement">
  <BehaviorTree ID="LightManagement">
    <Sequence name="Low Light Sequence">
      <is_light_level_low/>
      <turn_on_lights/>
      <adjust_sensors/>
    </Sequence>
    <continue_operation/>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Sequence"/>
    <Condition ID="is_light_level_low"/>
    <Action ID="turn_on_lights"/>
    <Action ID="adjust_sensors"/>
    <Action ID="continue_operation"/>
  </TreeNodesModel>
</root>

###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary:
{
    `is_enemy_detected`: Condition node: Detect the presence of an enemy. Returns SUCCESS if detected, FAILURE otherwise.;
    `engage_enemy`: Action Node: Initiate engagement protocols with the enemy. Always returns SUCCESS.;
    `evade_enemy`: Action Node: Execute evasion maneuvers to avoid confrontation. Always returns SUCCESS.;
    `maintain_patrol`: Action Node: Continue regular patrol duties. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND:
Generate behavior tree to "if an enemy is detected then engage the enemy, otherwise evade and maintain patrol". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="SecurityPatrol">
  <BehaviorTree ID="SecurityPatrol">
    <Fallback name="Enemy Response Fallback">
      <Sequence name="Engage Enemy Sequence">
        <is_enemy_detected/>
        <engage_enemy/>
      </Sequence>
      <Sequence name="Evade and Patrol Sequence">
        <evade_enemy/>
        <maintain_patrol/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_enemy_detected"/>
    <Action ID="engage_enemy"/>
    <Action ID="evade_enemy"/>
    <Action ID="maintain_patrol"/>
  </TreeNodesModel>
</root>

###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary:
{
    `is_area_clear`: Condition node: Verify if the operational area is free from hazards. Returns SUCCESS if clear, FAILURE otherwise.;
    `initiate_cleanup`: Action Node: Start the cleanup process in the area. Always returns SUCCESS.;
    `halt_operations`: Action Node: Stop all ongoing operations. Always returns SUCCESS.;
    `resume_tasks`: Action Node: Resume routine tasks after ensuring safety. Always returns SUCCESS.
}.
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND:
Generate behavior tree to "if the area is clear then initiate cleanup, otherwise halt operations and resume tasks once safe". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="OperationSafety">
  <BehaviorTree ID="OperationSafety">
    <Fallback name="Safety Fallback">
      <Sequence name="Cleanup Sequence">
        <is_area_clear/>
        <initiate_cleanup/>
      </Sequence>
      <Sequence name="Halt and Resume Sequence">
        <halt_operations/>
        <resume_tasks/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_area_clear"/>
    <Action ID="initiate_cleanup"/>
    <Action ID="halt_operations"/>
    <Action ID="resume_tasks"/>
  </TreeNodesModel>
</root>
###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {battery_low: Condition node: Check if battery level is low. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate back to the base station. Always returns SUCCESS.; recharge_battery: Action Node: Begin battery recharge. Always returns SUCCESS.; continue_mission: Action Node: Continue with the current mission. Always returns SUCCESS.; notify_operator: Action Node: Send a notification to the operator. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if the battery is low then return to base and recharge; after recharging, notify the operator, otherwise continue the mission". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Fallback name="Battery Check">
      <Sequence name="Handle Low Battery">
        <battery_low/>
        <return_to_base/>
        <recharge_battery/>
        <notify_operator/>
      </Sequence>
      <continue_mission/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="battery_low"/>
    <Action ID="return_to_base"/>
    <Action ID="recharge_battery"/>
    <Action ID="notify_operator"/>
    <Action ID="continue_mission"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {obstacle_detected: Condition node: Check if an obstacle is in the path. Returns SUCCESS if detected, FAILURE otherwise.; navigate_around: Action Node: Navigate around the detected obstacle. Always returns SUCCESS.; proceed_forward: Action Node: Move forward towards the destination. Always returns SUCCESS.; stop_movement: Action Node: Stop all movements. Always returns SUCCESS.; signal_obstacle: Action Node: Signal the presence of an obstacle to the control center. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if an obstacle is detected then navigate around it and signal the control center, otherwise proceed forward". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ObstacleAvoidance">
  <BehaviorTree ID="ObstacleAvoidance">
    <Fallback name="Obstacle Fallback">
      <Sequence name="Handle Obstacle">
        <obstacle_detected/>
        <navigate_around/>
        <signal_obstacle/>
      </Sequence>
      <proceed_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="obstacle_detected"/>
    <Action ID="navigate_around"/>
    <Action ID="proceed_forward"/>
    <Action ID="signal_obstacle"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {area_clean: Condition node: Check if the designated area is clean. Returns SUCCESS if clean, FAILURE otherwise.; start_cleaning: Action Node: Initiate the cleaning process. Always returns SUCCESS.; return_to_dock: Action Node: Return to the charging dock. Always returns SUCCESS.; notify_completion: Action Node: Notify that cleaning is complete. Always returns SUCCESS.; report_issue: Action Node: Report any issues encountered during cleaning. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if the area is not clean then start cleaning and report completion; if an issue is detected, return to dock and report the issue". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CleaningRoutine">
  <BehaviorTree ID="CleaningRoutine">
    <Fallback name="Cleaning Check">
      <Sequence name="Clean Area">
        <area_clean status="false"/>
        <start_cleaning/>
        <notify_completion/>
      </Sequence>
      <Fallback name="Issue Handling">
        <report_issue/>
        <Sequence>
          <return_to_dock/>
          <report_issue/>
        </Sequence>
      </Fallback>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="area_clean"/>
    <Action ID="start_cleaning"/>
    <Action ID="notify_completion"/>
    <Action ID="return_to_dock"/>
    <Action ID="report_issue"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {weather_bad: Condition node: Check if the weather is bad. Returns SUCCESS if bad, FAILURE otherwise.; seek_shelter: Action Node: Move to the nearest shelter. Always returns SUCCESS.; continue_operation: Action Node: Continue normal operations. Always returns SUCCESS.; alert_team: Action Node: Alert the team about weather conditions. Always returns SUCCESS.; suspend_tasks: Action Node: Suspend current tasks. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if the weather is bad then seek shelter and alert the team, otherwise continue operation". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="WeatherManagement">
  <BehaviorTree ID="WeatherManagement">
    <Fallback name="Weather Fallback">
      <Sequence name="Handle Bad Weather">
        <weather_bad/>
        <seek_shelter/>
        <alert_team/>
      </Sequence>
      <continue_operation/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="weather_bad"/>
    <Action ID="seek_shelter"/>
    <Action ID="alert_team"/>
    <Action ID="continue_operation"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {task_assigned: Condition node: Check if a new task is assigned. Returns SUCCESS if a task is assigned, FAILURE otherwise.; accept_task: Action Node: Accept the new task. Always returns SUCCESS.; execute_task: Action Node: Execute the assigned task. Always returns SUCCESS.; idle: Action Node: Remain idle if no task is assigned. Always returns SUCCESS.; notify_completion: Action Node: Notify upon task completion. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if a task is assigned then accept and execute it, then notify completion; otherwise remain idle". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TaskManagement">
  <BehaviorTree ID="TaskManagement">
    <Fallback name="Task Fallback">
      <Sequence name="Handle New Task">
        <task_assigned/>
        <accept_task/>
        <execute_task/>
        <notify_completion/>
      </Sequence>
      <idle/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="task_assigned"/>
    <Action ID="accept_task"/>
    <Action ID="execute_task"/>
    <Action ID="notify_completion"/>
    <Action ID="idle"/>
  </TreeNodesModel>
</root>



###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {
- CheckBatteryLevel: Condition node: Verify if the battery level is above a specified threshold. Returns SUCCESS if above, FAILURE otherwise.;
- NavigateToChargingStation: Action Node: Navigate the robot to the charging station. Always returns SUCCESS.;
- SendLowBatteryAlert: Action Node: Send an alert about low battery. Always returns SUCCESS.;
- ContinuePatrol: Action Node: Continue patrol routine. Always returns SUCCESS.
}. To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND: Generate behavior tree to "if the battery is low then navigate to charging station and send low battery alert; otherwise, continue patrol". Take a step back and think deeply about the behavior.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryCheckTree">
  <BehaviorTree ID="BatteryCheckTree">
    <Fallback>
      <Sequence>
        <CheckBatteryLevel threshold="20"/>
        <ContinuePatrol/>
      </Sequence>
      <Sequence>
        <NavigateToChargingStation/>
        <SendLowBatteryAlert/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="CheckBatteryLevel"/>
    <Action ID="NavigateToChargingStation"/>
    <Action ID="SendLowBatteryAlert"/>
    <Action ID="ContinuePatrol"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>


###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {
- IsObstacleDetected: Condition node: Check if an obstacle is detected in the robot's path. Returns SUCCESS if detected, FAILURE otherwise.;
- AvoidObstacle: Action Node: Maneuver the robot to avoid the obstacle. Always returns SUCCESS.;
- MoveForward: Action Node: Move the robot forward. Always returns SUCCESS.;
- RecalculatePath: Action Node: Recalculate the navigation path. Always returns SUCCESS.
}. To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND: Generate behavior tree to "if an obstacle is detected then avoid it and recalculate path; otherwise, move forward". Take a step back and think deeply about the behavior.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ObstacleAvoidanceTree">
  <BehaviorTree ID="ObstacleAvoidanceTree">
    <Fallback>
      <Sequence>
        <IsObstacleDetected/>
        <Sequence>
          <AvoidObstacle/>
          <RecalculatePath/>
        </Sequence>
      </Sequence>
      <MoveForward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="IsObstacleDetected"/>
    <Action ID="AvoidObstacle"/>
    <Action ID="RecalculatePath"/>
    <Action ID="MoveForward"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>


###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {
- IsAreaClear: Condition node: Determine if the designated area is clear for operation. Returns SUCCESS if clear, FAILURE otherwise.;
- StartScanning: Action Node: Initiate scanning of the area. Always returns SUCCESS.;
- ReportClear: Action Node: Report that the area is clear. Always returns SUCCESS.;
- InitiateCleanup: Action Node: Begin cleanup procedure in the area. Always returns SUCCESS.;
- NotifySupervisor: Action Node: Notify supervisor of cleanup initiation. Always returns SUCCESS.
}. To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND: Generate behavior tree to "if the area is clear, start scanning and report it; otherwise, initiate cleanup and notify supervisor". Take a step back and think deeply about the behavior.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="AreaAssessmentTree">
  <BehaviorTree ID="AreaAssessmentTree">
    <Sequence>
      <IsAreaClear/>
      <Fallback>
        <Sequence>
          <StartScanning/>
          <ReportClear/>
        </Sequence>
        <Sequence>
          <InitiateCleanup/>
          <NotifySupervisor/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="IsAreaClear"/>
    <Action ID="StartScanning"/>
    <Action ID="ReportClear"/>
    <Action ID="InitiateCleanup"/>
    <Action ID="NotifySupervisor"/>
    <Control ID="Sequence"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>


###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {
- IsResourceAvailable: Condition node: Check if necessary resources are available for the task. Returns SUCCESS if available, FAILURE otherwise.;
- GatherResources: Action Node: Gather the required resources. Always returns SUCCESS.;
- StartTask: Action Node: Begin the primary task. Always returns SUCCESS.;
- LogError: Action Node: Log an error due to missing resources. Always returns SUCCESS.;
- RetryGathering: Action Node: Attempt to gather resources again. Always returns SUCCESS.
}. To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND: Generate behavior tree to "if resources are available then start the task; otherwise, gather resources and retry; if gathering fails, log an error". Take a step back and think deeply about the behavior.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ResourceManagementTree">
  <BehaviorTree ID="ResourceManagementTree">
    <Fallback>
      <Sequence>
        <IsResourceAvailable/>
        <StartTask/>
      </Sequence>
      <Sequence>
        <GatherResources/>
        <Fallback>
          <Sequence>
            <IsResourceAvailable/>
            <StartTask/>
          </Sequence>
          <LogError/>
        </Fallback>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="IsResourceAvailable"/>
    <Action ID="GatherResources"/>
    <Action ID="StartTask"/>
    <Action ID="LogError"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>




###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary: {
    patrol_area: Action Node: Patrol the designated area. Always returns SUCCESS.;
    is_enemy_near: Condition node: Check if an enemy is nearby. Returns SUCCESS if detected, FAILURE otherwise.;
    engage_enemy: Action Node: Engage the detected enemy. Always returns SUCCESS.;
    retreat: Action Node: Retreat to a safe location. Always returns SUCCESS.
}. To construct a behavior tree in XML format for the following command, including a behavior not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:Generate behavior tree to "if an enemy is near then engage the enemy, otherwise patrol the area". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="EnemyEngagement">
  <BehaviorTree ID="EnemyEngagement">
    <Fallback name="Engagement Fallback">
      <Sequence name="Engage Enemy Sequence">
        <is_enemy_near/>
        <engage_enemy combat_mode=""/>
      </Sequence>
      <patrol_area area=""/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Action ID="engage_enemy" editable="true">
      <input_port name="combat_mode"/>
    </Action>
    <Condition ID="is_enemy_near"/>
    <Action ID="patrol_area" editable="true">
      <input_port name="area"/>
    </Action>
  </TreeNodesModel>
</root>


###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary: {
    is_low_battery: Condition node: Check if the battery level is low. Returns SUCCESS if low, FAILURE otherwise.;
    return_to_base: Action Node: Navigate back to the base for recharging. Always returns SUCCESS.;
    continue_operation: Action Node: Continue current operations. Always returns SUCCESS.;
    notify_operator: Action Node: Send a notification to the operator. Always returns SUCCESS.
}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND:Generate behavior tree to "if the battery is low then return to base and notify the operator, otherwise continue operation". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Fallback name="Battery Fallback">
      <Sequence name="Low Battery Sequence">
        <is_low_battery/>
        <Sequence name="Return and Notify">
          <return_to_base location=""/>
          <notify_operator message="Battery low"/>
        </Sequence>
      </Sequence>
      <continue_operation task=""/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Action ID="return_to_base" editable="true">
      <input_port name="location"/>
    </Action>
    <Action ID="notify_operator" editable="true">
      <input_port name="message"/>
    </Action>
    <Condition ID="is_low_battery"/>
    <Action ID="continue_operation" editable="true">
      <input_port name="task"/>
    </Action>
  </TreeNodesModel>
</root>


###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary: {
    is_package_detected: Condition node: Check if a package is detected. Returns SUCCESS if detected, FAILURE otherwise.;
    pick_up_package: Action Node: Pick up the detected package. Always returns SUCCESS.;
    deliver_package: Action Node: Deliver the package to the destination. Always returns SUCCESS.;
    scan_area: Action Node: Scan the area for packages. Always returns SUCCESS.
}. To construct a behavior tree in XML format for the following command, including a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:Generate behavior tree to "if a package is detected then pick it up and deliver it, otherwise scan the area". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="PackageHandling">
  <BehaviorTree ID="PackageHandling">
    <Fallback name="Package Fallback">
      <Sequence name="Handle Package Sequence">
        <is_package_detected/>
        <Sequence name="Pick and Deliver">
          <pick_up_package/>
          <deliver_package destination=""/>
        </Sequence>
      </Sequence>
      <scan_area thoroughness=""/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_package_detected"/>
    <Action ID="pick_up_package"/>
    <Action ID="deliver_package" editable="true">
      <input_port name="destination"/>
    </Action>
    <Action ID="scan_area" editable="true">
      <input_port name="thoroughness"/>
    </Action>
  </TreeNodesModel>
</root>


###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary: {
    is_temperature_high: Condition node: Check if the temperature exceeds the threshold. Returns SUCCESS if high, FAILURE otherwise.;
    activate_cooling_system: Action Node: Activate the cooling system. Always returns SUCCESS.;
    monitor_temperature: Action Node: Continue monitoring the temperature. Always returns SUCCESS.;
    send_alert: Action Node: Send an alert to the monitoring station. Always returns SUCCESS.
}. To construct a behavior tree in XML format for the following command, including a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:Generate behavior tree to "if temperature is high then activate cooling system and send alert, otherwise monitor temperature". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TemperatureControl">
  <BehaviorTree ID="TemperatureControl">
    <Fallback name="Temperature Fallback">
      <Sequence name="High Temperature Sequence">
        <is_temperature_high/>
        <Sequence name="Activate and Alert">
          <activate_cooling_system mode=""/>
          <send_alert level="critical"/>
        </Sequence>
      </Sequence>
      <monitor_temperature interval=""/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_temperature_high"/>
    <Action ID="activate_cooling_system" editable="true">
      <input_port name="mode"/>
    </Action>
    <Action ID="send_alert" editable="true">
      <input_port name="level"/>
    </Action>
    <Action ID="monitor_temperature" editable="true">
      <input_port name="interval"/>
    </Action>
  </TreeNodesModel>
</root>


###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary: {
    is_guest_present: Condition node: Check if a guest is present at the door. Returns SUCCESS if present, FAILURE otherwise.;
    greet_guest: Action Node: Greet the guest warmly. Always returns SUCCESS.;
    deny_access: Action Node: Deny entry to unauthorized individuals. Always returns SUCCESS.;
    scan_identity: Action Node: Scan the guest's identity. Always returns SUCCESS.
}. To construct a behavior tree in XML format for the following command, including a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:Generate behavior tree to "if a guest is present then scan their identity and greet them, otherwise deny access". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="AccessControl">
  <BehaviorTree ID="AccessControl">
    <Fallback name="Access Fallback">
      <Sequence name="Guest Handling Sequence">
        <is_guest_present/>
        <Sequence name="Verify and Greet">
          <scan_identity method="biometric"/>
          <greet_guest tone="friendly"/>
        </Sequence>
      </Sequence>
      <deny_access reason="No guest detected"/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_guest_present"/>
    <Action ID="scan_identity" editable="true">
      <input_port name="method"/>
    </Action>
    <Action ID="greet_guest" editable="true">
      <input_port name="tone"/>
    </Action>
    <Action ID="deny_access" editable="true">
      <input_port name="reason"/>
    </Action>
  </TreeNodesModel>
</root>


###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary: {
    is_light_off: Condition node: Check if the room lights are off. Returns SUCCESS if off, FAILURE otherwise.;
    turn_on_light: Action Node: Turn on the room lights. Always returns SUCCESS.;
    activate_motion_sensor: Action Node: Activate motion sensors in the room. Always returns SUCCESS.;
    deactivate_motion_sensor: Action Node: Deactivate motion sensors in the room. Always returns SUCCESS.
}. To construct a behavior tree in XML format for the following command, including a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:Generate behavior tree to "if the light is off then turn it on and activate motion sensors, otherwise deactivate motion sensors". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="LightingControl">
  <BehaviorTree ID="LightingControl">
    <Fallback name="Lighting Fallback">
      <Sequence name="Turn On Lights Sequence">
        <is_light_off/>
        <Sequence name="Activate Lights and Sensors">
          <turn_on_light brightness="full"/>
          <activate_motion_sensor sensitivity="high"/>
        </Sequence>
      </Sequence>
      <deactivate_motion_sensor mode="low_energy"/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_light_off"/>
    <Action ID="turn_on_light" editable="true">
      <input_port name="brightness"/>
    </Action>
    <Action ID="activate_motion_sensor" editable="true">
      <input_port name="sensitivity"/>
    </Action>
    <Action ID="deactivate_motion_sensor" editable="true">
      <input_port name="mode"/>
    </Action>
  </TreeNodesModel>
</root>


###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary: {
    is_fire_detected: Condition node: Check if fire is detected in the area. Returns SUCCESS if detected, FAILURE otherwise.;
    activate_fire_alarm: Action Node: Activate the fire alarm system. Always returns SUCCESS.;
    evacuate_area: Action Node: Initiate evacuation procedures. Always returns SUCCESS.;
    monitor_environment: Action Node: Continuously monitor the environment for hazards. Always returns SUCCESS.
}. To construct a behavior tree in XML format for the following command, including a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:Generate behavior tree to "if a fire is detected then activate the fire alarm and evacuate the area, otherwise monitor the environment". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="FireSafety">
  <BehaviorTree ID="FireSafety">
    <Fallback name="Fire Fallback">
      <Sequence name="Fire Detected Sequence">
        <is_fire_detected/>
        <Sequence name="Alarm and Evacuate">
          <activate_fire_alarm sound_level="loud"/>
          <evacuate_area exit_route="nearest"/>
        </Sequence>
      </Sequence>
      <monitor_environment frequency="5s"/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_fire_detected"/>
    <Action ID="activate_fire_alarm" editable="true">
      <input_port name="sound_level"/>
    </Action>
    <Action ID="evacuate_area" editable="true">
      <input_port name="exit_route"/>
    </Action>
    <Action ID="monitor_environment" editable="true">
      <input_port name="frequency"/>
    </Action>
  </TreeNodesModel>
</root>


Each task is crafted to ensure diversity in scenarios and behaviors, testing the LLM's ability to understand and implement behavior trees accurately within the specified constraints.
###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the robot's battery is below 20%. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the robot back to its charging base. Always returns SUCCESS.; continue_task: Action Node: Continue with the current task. Always returns SUCCESS.; recharge_battery: Action Node: Initiate battery recharge process. Always returns SUCCESS.; notify_operator: Action Node: Send a notification to the operator about low battery. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND: generate behavior tree to "if the battery is low then return to base and recharge; otherwise, continue the current task and notify the operator if battery becomes low during the task". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Fallback name="Battery Check">
      <Sequence name="Handle Low Battery">
        <is_battery_low/>
        <Sequence name="Return and Recharge">
          <return_to_base/>
          <recharge_battery/>
          <notify_operator/>
        </Sequence>
      </Sequence>
      <continue_task/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_battery_low"/>
    <Action ID="return_to_base"/>
    <Action ID="recharge_battery"/>
    <Action ID="notify_operator"/>
    <Action ID="continue_task"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_obstacle_detected: Condition node: Check if an obstacle is present in the path. Returns SUCCESS if detected, FAILURE otherwise.; avoid_obstacle: Action Node: Maneuver the robot to avoid the obstacle. Always returns SUCCESS.; follow_path: Action Node: Continue following the predefined path. Always returns SUCCESS.; request_new_path: Action Node: Request a new path from the central controller. Always returns SUCCESS.; is_new_path_available: Condition node: Check if a new path has been provided. Returns SUCCESS if available, FAILURE otherwise.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND: generate behavior tree to "if an obstacle is detected then avoid it and follow the path; if unable to follow the path, request a new path and follow it when available". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ObstacleAvoidance">
  <BehaviorTree ID="ObstacleAvoidance">
    <Sequence name="Main Sequence">
      <is_obstacle_detected/>
      <Fallback name="Handle Obstacle">
        <Sequence name="Avoid and Follow">
          <avoid_obstacle/>
          <follow_path/>
        </Sequence>
        <Sequence name="Request New Path">
          <request_new_path/>
          <is_new_path_available/>
          <follow_path/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_obstacle_detected"/>
    <Condition ID="is_new_path_available"/>
    <Action ID="avoid_obstacle"/>
    <Action ID="follow_path"/>
    <Action ID="request_new_path"/>
    <Control ID="Sequence"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_resource_available: Condition node: Check if a resource (e.g., battery, tool) is available. Returns SUCCESS if available, FAILURE otherwise.; collect_resource: Action Node: Collect the specified resource. Always returns SUCCESS.; deliver_resource: Action Node: Deliver the collected resource to the designated location. Always returns SUCCESS.; search_for_resource: Action Node: Search the environment for available resources. Always returns SUCCESS.; report_status: Action Node: Report the current status to the central system. Always returns SUCCESS.; is_delivery_complete: Condition node: Check if the resource delivery is complete. Returns SUCCESS if complete, FAILURE otherwise.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND: generate behavior tree to "if a resource is available, collect and deliver it; after delivery, report status; if no resource is available, search for resources and report status". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ResourceManagement">
  <BehaviorTree ID="ResourceManagement">
    <Fallback name="Resource Availability">
      <Sequence name="Handle Available Resource">
        <is_resource_available/>
        <Sequence name="Collect and Deliver">
          <collect_resource/>
          <deliver_resource/>
          <is_delivery_complete/>
          <report_status/>
        </Sequence>
      </Sequence>
      <Sequence name="Search and Report">
        <search_for_resource/>
        <report_status/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_resource_available"/>
    <Condition ID="is_delivery_complete"/>
    <Action ID="collect_resource"/>
    <Action ID="deliver_resource"/>
    <Action ID="search_for_resource"/>
    <Action ID="report_status"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_communication_lost: Condition node: Check if communication with the base is lost. Returns SUCCESS if lost, FAILURE otherwise.; attempt_reconnect: Action Node: Try to reconnect to the base. Always returns SUCCESS.; switch_to_autonomy: Action Node: Switch the robot to autonomous mode. Always returns SUCCESS.; monitor_environment: Action Node: Continuously monitor the environment for changes. Always returns SUCCESS.; send_status_update: Action Node: Send a status update to the base. Always returns SUCCESS.; resume_normal_operations: Action Node: Resume normal operations after reconnection. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if communication is lost, attempt to reconnect; if reconnection fails, switch to autonomous mode and monitor the environment; if communication is restored, send a status update and resume normal operations". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CommunicationHandler">
  <BehaviorTree ID="CommunicationHandler">
    <Fallback name="Communication Check">
      <Sequence name="Handle Lost Communication">
        <is_communication_lost/>
        <Fallback name="Reconnection Strategy">
          <Sequence name="Reconnect and Resume">
            <attempt_reconnect/>
            <send_status_update/>
            <resume_normal_operations/>
          </Sequence>
          <Sequence name="Switch to Autonomy">
            <switch_to_autonomy/>
            <monitor_environment/>
          </Sequence>
        </Fallback>
      </Sequence>
      <send_status_update/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_communication_lost"/>
    <Action ID="attempt_reconnect"/>
    <Action ID="switch_to_autonomy"/>
    <Action ID="monitor_environment"/>
    <Action ID="send_status_update"/>
    <Action ID="resume_normal_operations"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>
###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {check_battery: Condition node: Check if the battery level is above the threshold. Returns SUCCESS if sufficient, FAILURE otherwise.; recharge: Action Node: Initiate battery recharge procedure. Always returns SUCCESS.; report_low_battery: Action Node: Report low battery status to the base station. Always returns SUCCESS.; clean_robot: Action Node: Perform cleaning of robot sensors and exterior. Always returns SUCCESS.; perform_diagnostics: Action Node: Run system diagnostics on the robot. Always returns SUCCESS.; move_to_charging_station: Action Node: Navigate the robot to the charging station. Always returns SUCCESS.; return_to_operation: Action Node: Resume normal operations after recharging. Always returns SUCCESS.; halt_operations: Action Node: Halt all operations due to critical battery failure. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if battery is low then navigate to charging station and recharge; after recharging, resume operations". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Fallback>
      <check_battery/>
      <Sequence>
        <move_to_charging_station/>
        <recharge/>
        <return_to_operation/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="check_battery"/>
    <Action ID="move_to_charging_station"/>
    <Action ID="recharge"/>
    <Action ID="return_to_operation"/>
  </TreeNodesModel>
</root>

###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_patrol_complete: Condition node: Check if the patrol route is complete. Returns SUCCESS if complete, FAILURE otherwise.; start_patrol: Action Node: Begin patrolling the designated area. Always returns SUCCESS.; report_patrol_complete: Action Node: Report completion of patrol to the command center. Always returns SUCCESS.; investigate_anomaly: Action Node: Investigate detected anomaly in the area. Always returns SUCCESS.; is_anomaly_detected: Condition node: Check if there is an anomaly detected during patrol. Returns SUCCESS if detected, FAILURE otherwise.; return_to_base: Action Node: Navigate back to the base station. Always returns SUCCESS.; idle: Action Node: Remain idle and await further instructions. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "start patrolling; if an anomaly is detected, investigate it; after patrol is complete, report to command center". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="PatrolRoutine">
  <BehaviorTree ID="PatrolRoutine">
    <Sequence>
      <start_patrol/>
      <Fallback>
        <is_anomaly_detected/>
        <investigate_anomaly/>
      </Fallback>
      <is_patrol_complete/>
      <report_patrol_complete/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Sequence"/>
    <Action ID="start_patrol"/>
    <Control ID="Fallback"/>
    <Condition ID="is_anomaly_detected"/>
    <Action ID="investigate_anomaly"/>
    <Condition ID="is_patrol_complete"/>
    <Action ID="report_patrol_complete"/>
  </TreeNodesModel>
</root>

###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_communication_available: Condition node: Check if communication link is active. Returns SUCCESS if active, FAILURE otherwise.; send_status_update: Action Node: Send current status to base station. Always returns SUCCESS.; establish_communication: Action Node: Attempt to establish communication with base station. Always returns SUCCESS.; log_error: Action Node: Log communication error details. Always returns SUCCESS.; wait_for_reconnection: Action Node: Wait for a specified time before retrying communication. Always returns SUCCESS.; perform_self_check: Action Node: Conduct a self-check of communication modules. Always returns SUCCESS.; notify_operator: Action Node: Notify human operator of communication failure. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if communication is available send status update; otherwise, attempt to establish communication and log error". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CommunicationProtocol">
  <BehaviorTree ID="CommunicationProtocol">
    <Fallback>
      <is_communication_available/>
      <Sequence>
        <establish_communication/>
        <log_error/>
      </Sequence>
      <send_status_update/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_communication_available"/>
    <Action ID="establish_communication"/>
    <Action ID="log_error"/>
    <Action ID="send_status_update"/>
  </TreeNodesModel>
</root>


###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_obstacle: Condition node: Detect if there is an obstacle in the path. Returns SUCCESS if obstacle is detected, FAILURE otherwise.; navigate_around_obstacle: Action Node: Maneuver around the detected obstacle. Always returns SUCCESS.; continue_forward: Action Node: Continue moving forward. Always returns SUCCESS.; stop_movement: Action Node: Halt all movements immediately. Always returns SUCCESS.; scan_environment: Action Node: Scan the surrounding environment for obstacles. Always returns SUCCESS.; update_navigation_map: Action Node: Update the internal navigation map with new obstacle data. Always returns SUCCESS.; request_assistance: Action Node: Request assistance from nearby robots. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "continuously scan environment; if an obstacle is detected, navigate around it and update the navigation map". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ObstacleAvoidance">
  <BehaviorTree ID="ObstacleAvoidance">
    <Sequence>
      <scan_environment/>
      <Fallback>
        <detect_obstacle/>
        <Sequence>
          <navigate_around_obstacle/>
          <update_navigation_map/>
        </Sequence>
      </Fallback>
      <continue_forward/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Sequence"/>
    <Action ID="scan_environment"/>
    <Control ID="Fallback"/>
    <Condition ID="detect_obstacle"/>
    <Action ID="navigate_around_obstacle"/>
    <Action ID="update_navigation_map"/>
    <Action ID="continue_forward"/>
  </TreeNodesModel>
</root>

###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_task_assigned: Condition node: Check if a new task has been assigned. Returns SUCCESS if a task is assigned, FAILURE otherwise.; accept_task: Action Node: Accept the newly assigned task. Always returns SUCCESS.; decline_task: Action Node: Decline the task due to current workload. Always returns SUCCESS.; prioritize_task: Action Node: Reorganize current tasks to prioritize the new task. Always returns SUCCESS.; notify_team: Action Node: Notify team members about the new task assignment. Always returns SUCCESS.; postpone_current_task: Action Node: Postpone the current task to accommodate the new one. Always returns SUCCESS.; evaluate_task_importance: Condition node: Assess the importance of the new task. Returns SUCCESS if important, FAILURE otherwise.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if a new task is assigned, evaluate its importance; if important, prioritize it and notify the team; otherwise, decline the task". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TaskManagement">
  <BehaviorTree ID="TaskManagement">
    <Fallback>
      <is_task_assigned/>
      <Sequence>
        <evaluate_task_importance/>
        <Fallback>
          <Condition ID="evaluate_task_importance"/>
          <Sequence>
            <prioritize_task/>
            <notify_team/>
          </Sequence>
          <decline_task/>
        </Fallback>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_task_assigned"/>
    <Control ID="Sequence"/>
    <Condition ID="evaluate_task_importance"/>
    <Control ID="Fallback"/>
    <Sequence>
      <prioritize_task/>
      <notify_team/>
    </Sequence>
    <Action ID="decline_task"/>
  </TreeNodesModel>
</root>

###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_weather_clear: Condition node: Check if the current weather is clear. Returns SUCCESS if clear, FAILURE otherwise.; proceed_with_operation: Action Node: Continue with the current operation. Always returns SUCCESS.; wait_for_clear_weather: Action Node: Pause operations until weather improves. Always returns SUCCESS.; deploy_weather_protection: Action Node: Activate weather protection mechanisms. Always returns SUCCESS.; report_weather_status: Action Node: Send weather status report to base. Always returns SUCCESS.; evaluate_weather_severity: Condition node: Assess the severity of the current weather conditions. Returns SUCCESS if severe, FAILURE otherwise.; initiate_emergency_protocol: Action Node: Start emergency procedures due to severe weather. Always returns SUCCESS.; maintain_operational_readiness: Action Node: Ensure systems are ready for operation post-weather. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "check weather; if clear, proceed with operation; if not clear and severe, initiate emergency protocol; otherwise, wait for clear weather". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="WeatherResponse">
  <BehaviorTree ID="WeatherResponse">
    <Sequence>
      <is_weather_clear/>
      <proceed_with_operation/>
      <Fallback>
        <evaluate_weather_severity/>
        <Sequence>
          <initiate_emergency_protocol/>
          <maintain_operational_readiness/>
        </Sequence>
        <wait_for_clear_weather/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Sequence"/>
    <Condition ID="is_weather_clear"/>
    <Action ID="proceed_with_operation"/>
    <Control ID="Fallback"/>
    <Condition ID="evaluate_weather_severity"/>
    <Action ID="initiate_emergency_protocol"/>
    <Action ID="maintain_operational_readiness"/>
    <Action ID="wait_for_clear_weather"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below the threshold. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the agent back to the base station. Always returns SUCCESS.; charge_battery: Action Node: Initiate battery charging process. Always returns SUCCESS.; continue_operation: Action Node: Continue with the current task. Always returns SUCCESS.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.}. To construct a behavior tree in XML format for the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "if the battery is low then return to base and charge; otherwise, continue operation". Take a step back and think deeply about the behavior.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Fallback>
      <Sequence>
        <is_battery_low/>
        <return_to_base/>
        <charge_battery/>
      </Sequence>
      <continue_operation/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_battery_low"/>
    <Action ID="return_to_base"/>
    <Action ID="charge_battery"/>
    <Action ID="continue_operation"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_enemy_in_range: Condition node: Check if an enemy is within attack range. Returns SUCCESS if yes, FAILURE otherwise.; attack_enemy: Action Node: Perform an attack on the enemy. Always returns SUCCESS.; evade_enemy: Action Node: Execute evasive maneuvers. Always returns SUCCESS.; patrol_area: Action Node: Patrol the designated area. Always returns SUCCESS.; ForceFailure: Decorator Node: Forces its child to return FAILURE.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if an enemy is in range then attack; if the attack fails, evade; otherwise, continue patrolling". Take a step back and think deeply about the behavior you need for this command.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CombatBehavior">
  <BehaviorTree ID="CombatBehavior">
    <Sequence>
      <is_enemy_in_range/>
      <Fallback>
        <Sequence>
          <attack_enemy/>
          <ForceFailure>
            <evade_enemy/>
          </ForceFailure>
        </Sequence>
        <patrol_area/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_enemy_in_range"/>
    <Action ID="attack_enemy"/>
    <Action ID="evade_enemy"/>
    <Action ID="patrol_area"/>
    <Control ID="Fallback"/>
    <Decorator ID="ForceFailure"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_weather_bad: Condition node: Check if the current weather is adverse. Returns SUCCESS if bad, FAILURE otherwise.; seek_shelter: Action Node: Navigate to a shelter location. Always returns SUCCESS.; wait_out_weather: Action Node: Wait until weather conditions improve. Always returns SUCCESS.; continue_mission: Action Node: Proceed with the assigned mission. Always returns SUCCESS.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.; ForceFailure: Decorator Node: Forces its child to return FAILURE.}. To construct a behavior tree in XML format for the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "if the weather is bad then seek shelter and wait until it improves; otherwise, continue the mission". Take a step back and think deeply about the behavior.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="WeatherManagement">
  <BehaviorTree ID="WeatherManagement">
    <Fallback>
      <Sequence>
        <is_weather_bad/>
        <seek_shelter/>
        <wait_out_weather/>
      </Sequence>
      <continue_mission/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_weather_bad"/>
    <Action ID="seek_shelter"/>
    <Action ID="wait_out_weather"/>
    <Action ID="continue_mission"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_resource_available: Condition node: Check if required resources are available. Returns SUCCESS if available, FAILURE otherwise.; gather_resources: Action Node: Collect necessary resources. Always returns SUCCESS.; notify_team: Action Node: Inform the team about resource status. Always returns SUCCESS.; proceed_with_task: Action Node: Continue with the assigned task. Always returns SUCCESS.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.; ForceFailure: Decorator Node: Forces its child to return FAILURE.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if resources are available then proceed with the task; otherwise, gather resources and notify the team". Take a step back and think deeply about the behavior you need for this command.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ResourceManagement">
  <BehaviorTree ID="ResourceManagement">
    <Fallback>
      <Sequence>
        <is_resource_available/>
        <proceed_with_task/>
      </Sequence>
      <Sequence>
        <gather_resources/>
        <notify_team/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_resource_available"/>
    <Action ID="proceed_with_task"/>
    <Action ID="gather_resources"/>
    <Action ID="notify_team"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_target_detected: Condition node: Check if a target is detected. Returns SUCCESS if detected, FAILURE otherwise.; engage_target: Action Node: Engage the detected target. Always returns SUCCESS.; scan_area: Action Node: Scan the surrounding area for targets. Always returns SUCCESS.; report_status: Action Node: Report the current status to the base. Always returns SUCCESS.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.; ForceFailure: Decorator Node: Forces its child to return FAILURE.}. To construct a behavior tree in XML format for the following command. Including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "continuously scan the area; if a target is detected, engage it and report status; otherwise, keep scanning". Take a step back and think deeply about the behavior.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ContinuousScan">
  <BehaviorTree ID="ContinuousScan">
    <Sequence>
      <scan_area/>
      <Fallback>
        <Sequence>
          <is_target_detected/>
          <engage_target/>
          <report_status/>
        </Sequence>
        <scan_area/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_target_detected"/>
    <Action ID="engage_target"/>
    <Action ID="scan_area"/>
    <Action ID="report_status"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_clear: Condition node: Check if the designated area is clear. Returns SUCCESS if clear, FAILURE otherwise.; deploy_sensor: Action Node: Deploy a sensor to monitor the area. Always returns SUCCESS.; retract_sensor: Action Node: Retract the deployed sensor. Always returns SUCCESS.; notify_security: Action Node: Notify the security team of any issues. Always returns SUCCESS.; patrol_successfully: Action Node: Complete the patrol successfully. Always returns SUCCESS.; ForceFailure: Decorator Node: Forces its child to return FAILURE.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if the area is clear then deploy sensor and patrol; if the area is not clear, notify security and retract sensor". Take a step back and think deeply about the behavior you need for this command.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="AreaPatrol">
  <BehaviorTree ID="AreaPatrol">
    <Fallback>
      <Sequence>
        <is_area_clear/>
        <deploy_sensor/>
        <patrol_successfully/>
      </Sequence>
      <Sequence>
        <ForceFailure>
          <is_area_clear/>
        </ForceFailure>
        <notify_security/>
        <retract_sensor/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_area_clear"/>
    <Action ID="deploy_sensor"/>
    <Action ID="patrol_successfully"/>
    <Action ID="notify_security"/>
    <Action ID="retract_sensor"/>
    <Decorator ID="ForceFailure"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_storage_full: Condition node: Check if the storage is full. Returns SUCCESS if full, FAILURE otherwise.; unload_storage: Action Node: Unload the storage contents. Always returns SUCCESS.; find_nearest_storage: Action Node: Locate the nearest storage facility. Always returns SUCCESS.; load_storage: Action Node: Load items into storage. Always returns SUCCESS.; continue_delivery: Action Node: Continue with delivery tasks. Always returns SUCCESS.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.}. To construct a behavior tree in XML format for the following command. Including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "if storage is full then unload storage and find the nearest storage location; otherwise, continue with delivery". Take a step back and think deeply about the behavior.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="StorageManagement">
  <BehaviorTree ID="StorageManagement">
    <Fallback>
      <Sequence>
        <is_storage_full/>
        <unload_storage/>
        <find_nearest_storage/>
      </Sequence>
      <continue_delivery/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_storage_full"/>
    <Action ID="unload_storage"/>
    <Action ID="find_nearest_storage"/>
    <Action ID="continue_delivery"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_power_available: Condition node: Check if power is available. Returns SUCCESS if available, FAILURE otherwise.; power_on_system: Action Node: Turn on the system. Always returns SUCCESS.; power_off_system: Action Node: Turn off the system. Always returns SUCCESS.; run_diagnostics: Action Node: Perform system diagnostics. Always returns SUCCESS.; idle: Action Node: Enter idle state. Always returns SUCCESS.; ForceFailure: Decorator Node: Forces its child to return FAILURE.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if power is available then power on the system and run diagnostics; if power is not available, power off the system and enter idle state". Take a step back and think deeply about the behavior you need for this command.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="PowerManagement">
  <BehaviorTree ID="PowerManagement">
    <Fallback>
      <Sequence>
        <is_power_available/>
        <power_on_system/>
        <run_diagnostics/>
      </Sequence>
      <Sequence>
        <ForceFailure>
          <is_power_available/>
        </ForceFailure>
        <power_off_system/>
        <idle/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_power_available"/>
    <Action ID="power_on_system"/>
    <Action ID="run_diagnostics"/>
    <Action ID="power_off_system"/>
    <Action ID="idle"/>
    <Decorator ID="ForceFailure"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_light_detected: Condition node: Check if light is detected in the environment. Returns SUCCESS if detected, FAILURE otherwise.; turn_on_lights: Action Node: Activate the environment lighting. Always returns SUCCESS.; turn_off_lights: Action Node: Deactivate the environment lighting. Always returns SUCCESS.; adjust_sensors: Action Node: Adjust sensor sensitivity based on lighting conditions. Always returns SUCCESS.; maintain_lighting: Action Node: Maintain current lighting state. Always returns SUCCESS.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.; ForceFailure: Decorator Node: Forces its child to return FAILURE.}. To construct a behavior tree in XML format for the following command. Including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "if light is detected then turn on lights and adjust sensors; otherwise, turn off lights and maintain lighting". Take a step back and think deeply about the behavior.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="LightingControl">
  <BehaviorTree ID="LightingControl">
    <Fallback>
      <Sequence>
        <is_light_detected/>
        <turn_on_lights/>
        <adjust_sensors/>
      </Sequence>
      <Sequence>
        <ForceFailure>
          <is_light_detected/>
        </ForceFailure>
        <turn_off_lights/>
        <maintain_lighting/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_light_detected"/>
    <Action ID="turn_on_lights"/>
    <Action ID="adjust_sensors"/>
    <Action ID="turn_off_lights"/>
    <Action ID="maintain_lighting"/>
    <Decorator ID="ForceFailure"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_task_assigned: Condition node: Check if a new task has been assigned. Returns SUCCESS if assigned, FAILURE otherwise.; accept_task: Action Node: Accept the new task assignment. Always returns SUCCESS.; reject_task: Action Node: Reject the task and request clarification. Always returns SUCCESS.; prioritize_tasks: Action Node: Organize tasks based on priority. Always returns SUCCESS.; execute_tasks: Action Node: Execute the organized tasks. Always returns SUCCESS.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.; ForceFailure: Decorator Node: Forces its child to return FAILURE.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if a task is assigned then accept it and prioritize tasks; otherwise, reject the task and request clarification". Take a step back and think deeply about the behavior you need for this command.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TaskManagement">
  <BehaviorTree ID="TaskManagement">
    <Fallback>
      <Sequence>
        <is_task_assigned/>
        <accept_task/>
        <prioritize_tasks/>
      </Sequence>
      <Sequence>
        <ForceFailure>
          <is_task_assigned/>
        </ForceFailure>
        <reject_task/>
        <execute_tasks/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_task_assigned"/>
    <Action ID="accept_task"/>
    <Action ID="prioritize_tasks"/>
    <Action ID="reject_task"/>
    <Action ID="execute_tasks"/>
    <Decorator ID="ForceFailure"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_temperature_high: Condition node: Check if the environment temperature exceeds the threshold. Returns SUCCESS if high, FAILURE otherwise.; activate_cooling_system: Action Node: Turn on the cooling system. Always returns SUCCESS.; deactivate_cooling_system: Action Node: Turn off the cooling system. Always returns SUCCESS.; monitor_temperature: Action Node: Continuously monitor the temperature. Always returns SUCCESS.; maintain_temperature: Action Node: Maintain current temperature settings. Always returns SUCCESS.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.; ForceFailure: Decorator Node: Forces its child to return FAILURE.}. To construct a behavior tree in XML format for the following command. Including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "if the temperature is high then activate the cooling system and monitor temperature; otherwise, deactivate the cooling system and maintain temperature". Take a step back and think deeply about the behavior.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TemperatureControl">
  <BehaviorTree ID="TemperatureControl">
    <Fallback>
      <Sequence>
        <is_temperature_high/>
        <activate_cooling_system/>
        <monitor_temperature/>
      </Sequence>
      <Sequence>
        <ForceFailure>
          <is_temperature_high/>
        </ForceFailure>
        <deactivate_cooling_system/>
        <maintain_temperature/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_temperature_high"/>
    <Action ID="activate_cooling_system"/>
    <Action ID="monitor_temperature"/>
    <Action ID="deactivate_cooling_system"/>
    <Action ID="maintain_temperature"/>
    <Decorator ID="ForceFailure"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_inventory_full: Condition node: Check if the inventory is full. Returns SUCCESS if full, FAILURE otherwise.; deploy_drone: Action Node: Deploy a drone to collect additional inventory. Always returns SUCCESS.; return_drone: Action Node: Retrieve the deployed drone. Always returns SUCCESS.; manage_inventory: Action Node: Organize and manage the current inventory. Always returns SUCCESS.; continue_operations: Action Node: Continue with ongoing operations. Always returns SUCCESS.; ForceSuccess: Decorator Node: Forces its child to return SUCCESS.; ForceFailure: Decorator Node: Forces its child to return FAILURE.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if the inventory is full then deploy a drone and manage inventory; otherwise, continue operations". Take a step back and think deeply about the behavior you need for this command.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="InventoryManagement">
  <BehaviorTree ID="InventoryManagement">
    <Fallback>
      <Sequence>
        <is_inventory_full/>
        <deploy_drone/>
        <manage_inventory/>
      </Sequence>
      <continue_operations/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_inventory_full"/>
    <Action ID="deploy_drone"/>
    <Action ID="manage_inventory"/>
    <Action ID="continue_operations"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below the threshold. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the agent back to the base station. Always returns SUCCESS.; continue_operation: Action Node: Continue current task. Always returns SUCCESS.; notify_operator: Action Node: Send a notification to the operator. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if the battery is low then return to base and notify the operator, otherwise continue operation". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Fallback name="Check Battery">
      <Sequence name="Low Battery Sequence">
        <is_battery_low/>
        <return_to_base/>
        <notify_operator/>
      </Sequence>
      <continue_operation/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_battery_low"/>
    <Action ID="return_to_base" editable="true">
      <input_port name="destination"/>
    </Action>
    <Action ID="notify_operator" editable="true">
      <input_port name="message"/>
    </Action>
    <Action ID="continue_operation"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_target_visible: Condition node: Determine if the target is within the sensor range. Returns SUCCESS if visible, FAILURE otherwise.; approach_target: Action Node: Move the agent closer to the target. Always returns SUCCESS.; search_for_target: Action Node: Initiate a search pattern to locate the target. Always returns SUCCESS.; idle: Action Node: Remain stationary and perform idle behavior. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if the target is visible then approach it, otherwise search for the target or remain idle". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TargetAcquisition">
  <BehaviorTree ID="TargetAcquisition">
    <Fallback name="Target Fallback">
      <Sequence name="Approach Sequence">
        <is_target_visible/>
        <approach_target/>
      </Sequence>
      <Fallback name="Search or Idle">
        <search_for_target/>
        <idle/>
      </Fallback>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_target_visible"/>
    <Action ID="approach_target" editable="true">
      <input_port name="speed"/>
    </Action>
    <Action ID="search_for_target"/>
    <Action ID="idle"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_clean: Condition node: Verify if the designated area is clean. Returns SUCCESS if clean, FAILURE otherwise.; clean_area: Action Node: Perform cleaning operations on the area. Always returns SUCCESS.; report_status: Action Node: Report the current status to the monitoring system. Always returns SUCCESS.; perform_diagnostics: Action Node: Run system diagnostics. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "check if the area is clean; if not, clean the area and report the status; otherwise perform system diagnostics". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="AreaMaintenance">
  <BehaviorTree ID="AreaMaintenance">
    <Sequence name="Maintenance Sequence">
      <is_area_clean/>
      <Fallback name="Clean or Diagnose">
        <Sequence name="Clean and Report">
          <clean_area/>
          <report_status/>
        </Sequence>
        <perform_diagnostics/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_area_clean"/>
    <Action ID="clean_area" editable="true">
      <input_port name="tool_type"/>
    </Action>
    <Action ID="report_status" editable="true">
      <input_port name="report_level"/>
    </Action>
    <Action ID="perform_diagnostics"/>
    <Control ID="Sequence"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_enemy_detected: Condition node: Check for presence of enemies. Returns SUCCESS if detected, FAILURE otherwise.; engage_enemy: Action Node: Initiate combat with the detected enemy. Always returns SUCCESS.; evade_enemy: Action Node: Perform evasion maneuvers. Always returns SUCCESS.; patrol_area: Action Node: Continue patrolling the designated area. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if an enemy is detected then engage it; if engagement fails then evade, otherwise continue patrolling". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CombatBehavior">
  <BehaviorTree ID="CombatBehavior">
    <Sequence name="Enemy Engagement Sequence">
      <is_enemy_detected/>
      <Fallback name="Engage or Evade">
        <engage_enemy/>
        <evade_enemy/>
      </Fallback>
    </Sequence>
    <patrol_area/>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_enemy_detected"/>
    <Action ID="engage_enemy" editable="true">
      <input_port name="weapon_type"/>
    </Action>
    <Action ID="evade_enemy" editable="true">
      <input_port name="evasion_speed"/>
    </Action>
    <Action ID="patrol_area"/>
    <Control ID="Sequence"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_task_complete: Condition node: Check if the current task is completed. Returns SUCCESS if completed, FAILURE otherwise.; start_next_task: Action Node: Initiate the next task in the queue. Always returns SUCCESS.; log_completion: Action Node: Log the completion of the task. Always returns SUCCESS.; wait: Action Node: Pause operation for a specified duration. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if the task is complete then log the completion and start the next task, otherwise wait before rechecking". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TaskManagement">
  <BehaviorTree ID="TaskManagement">
    <Fallback name="Task Completion Check">
      <Sequence name="Complete Task Sequence">
        <is_task_complete/>
        <Sequence name="Log and Start">
          <log_completion/>
          <start_next_task/>
        </Sequence>
      </Sequence>
      <wait/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_task_complete"/>
    <Action ID="log_completion" editable="true">
      <input_port name="log_level"/>
    </Action>
    <Action ID="start_next_task" editable="true">
      <input_port name="task_id"/>
    </Action>
    <Action ID="wait" editable="true">
      <input_port name="duration"/>
    </Action>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_hazard_present: Condition node: Detect the presence of environmental hazards. Returns SUCCESS if a hazard is detected, FAILURE otherwise.; activate_safety_protocol: Action Node: Engage safety measures to mitigate hazards. Always returns SUCCESS.; continue_operation_safe: Action Node: Proceed with operations if the environment is safe. Always returns SUCCESS.; notify_team: Action Node: Inform the team about the hazard status. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if a hazard is present then activate safety protocols and notify the team, otherwise continue operations safely". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="SafetyManagement">
  <BehaviorTree ID="SafetyManagement">
    <Sequence name="Safety Sequence">
      <is_hazard_present/>
      <Sequence name="Activate and Notify">
        <activate_safety_protocol/>
        <notify_team/>
      </Sequence>
    </Sequence>
    <continue_operation_safe/>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_hazard_present"/>
    <Action ID="activate_safety_protocol" editable="true">
      <input_port name="protocol_level"/>
    </Action>
    <Action ID="notify_team" editable="true">
      <input_port name="notification_message"/>
    </Action>
    <Action ID="continue_operation_safe"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below threshold. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate the robot back to the base station. Always returns SUCCESS.; charge_battery: Action Node: Start charging the battery. Always returns SUCCESS.; patrol_area: Action Node: Patrol the designated area. Always returns SUCCESS.; report_status: Action Node: Send status report to the control center. Always returns SUCCESS.; is_obstacle_detected: Condition node: Check if an obstacle is in the path. Returns SUCCESS if detected, FAILURE otherwise.; navigate_around_obstacle: Action Node: Maneuver around the detected obstacle. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if battery is low then return to base and charge; otherwise patrol the area and report status. If an obstacle is detected during patrol, navigate around it and continue." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagementPatrol">
  <BehaviorTree ID="BatteryManagementPatrol">
    <Fallback>
      <Sequence>
        <is_battery_low/>
        <Sequence>
          <return_to_base/>
          <charge_battery/>
        </Sequence>
      </Sequence>
      <Sequence>
        <patrol_area/>
        <report_status/>
        <Fallback>
          <is_obstacle_detected/>
          <navigate_around_obstacle/>
        </Fallback>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_battery_low"/>
    <Action ID="return_to_base"/>
    <Action ID="charge_battery"/>
    <Action ID="patrol_area"/>
    <Action ID="report_status"/>
    <Condition ID="is_obstacle_detected"/>
    <Action ID="navigate_around_obstacle"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_door_locked: Condition node: Check if the door is locked. Returns SUCCESS if locked, FAILURE otherwise.; unlock_door: Action Node: Unlock the door. Always returns SUCCESS.; open_door: Action Node: Open the door. Always returns SUCCESS.; enter_building: Action Node: Enter the building. Always returns SUCCESS.; secure_area: Action Node: Secure the area after entry. Always returns SUCCESS.; is_intruder_present: Condition node: Check if an intruder is detected in the area. Returns SUCCESS if present, FAILURE otherwise.; alert_security: Action Node: Alert the security team. Always returns SUCCESS.; investigate_noise: Action Node: Investigate the source of the noise. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if the door is locked, unlock and open it, then enter the building and secure the area; if an intruder is present, alert security, otherwise investigate the noise." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="SecurityEntry">
  <BehaviorTree ID="SecurityEntry">
    <Sequence>
      <Fallback>
        <is_door_locked/>
        <Sequence>
          <unlock_door/>
          <open_door/>
        </Sequence>
      </Fallback>
      <enter_building/>
      <secure_area/>
      <Fallback>
        <is_intruder_present/>
        <alert_security/>
        <investigate_noise/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_door_locked"/>
    <Action ID="unlock_door"/>
    <Action ID="open_door"/>
    <Action ID="enter_building"/>
    <Action ID="secure_area"/>
    <Condition ID="is_intruder_present"/>
    <Action ID="alert_security"/>
    <Action ID="investigate_noise"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_fire_detected: Condition node: Check if fire is detected in the area. Returns SUCCESS if detected, FAILURE otherwise.; activate_fire_suppression: Action Node: Activate the fire suppression system. Always returns SUCCESS.; evacuate_area: Action Node: Initiate evacuation procedures. Always returns SUCCESS.; sound_alarm: Action Node: Sound the emergency alarm. Always returns SUCCESS.; is_path_clear: Condition node: Check if the evacuation path is clear. Returns SUCCESS if clear, FAILURE otherwise.; block_path: Action Node: Block the obstructed path. Always returns SUCCESS.; guide_people: Action Node: Guide people to safety. Always returns SUCCESS.; notify_authorities: Action Node: Notify emergency authorities. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if fire is detected, activate suppression and sound alarm; check if the evacuation path is clear, if not block the path, then evacuate the area and guide people to safety; notify authorities." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="FireResponse">
  <BehaviorTree ID="FireResponse">
    <Sequence>
      <Fallback>
        <is_fire_detected/>
        <Sequence>
          <activate_fire_suppression/>
          <sound_alarm/>
        </Sequence>
      </Fallback>
      <Fallback>
        <is_path_clear/>
        <block_path/>
      </Fallback>
      <Sequence>
        <evacuate_area/>
        <guide_people/>
      </Sequence>
      <notify_authorities/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_fire_detected"/>
    <Action ID="activate_fire_suppression"/>
    <Action ID="sound_alarm"/>
    <Condition ID="is_path_clear"/>
    <Action ID="block_path"/>
    <Action ID="evacuate_area"/>
    <Action ID="guide_people"/>
    <Action ID="notify_authorities"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_task_assigned: Condition node: Check if a task is assigned to the robot. Returns SUCCESS if assigned, FAILURE otherwise.; fetch_tool: Action Node: Retrieve the necessary tool for the task. Always returns SUCCESS.; perform_task: Action Node: Execute the assigned task. Always returns SUCCESS.; report_completion: Action Node: Report task completion to the control center. Always returns SUCCESS.; is_tool_available: Condition node: Check if the required tool is available. Returns SUCCESS if available, FAILURE otherwise.; request_tool: Action Node: Request the necessary tool from storage. Always returns SUCCESS.; log_idle: Action Node: Log that the robot is idle. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if a task is assigned, check if the tool is available; if so, fetch the tool and perform the task; then report completion; otherwise, request the tool. If no task is assigned, log that the robot is idle." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TaskManagement">
  <BehaviorTree ID="TaskManagement">
    <Fallback>
      <Sequence>
        <is_task_assigned/>
        <Fallback>
          <is_tool_available/>
          <request_tool/>
        </Fallback>
        <fetch_tool/>
        <perform_task/>
        <report_completion/>
      </Sequence>
      <log_idle/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_task_assigned"/>
    <Action ID="fetch_tool"/>
    <Action ID="perform_task"/>
    <Action ID="report_completion"/>
    <Condition ID="is_tool_available"/>
    <Action ID="request_tool"/>
    <Action ID="log_idle"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_weather_clear: Condition node: Check if the weather is clear. Returns SUCCESS if clear, FAILURE otherwise.; start_mission: Action Node: Initiate the mission. Always returns SUCCESS.; wait_until_clear: Action Node: Wait until the weather becomes clear. Always returns SUCCESS.; perform_reconnaissance: Action Node: Conduct reconnaissance of the area. Always returns SUCCESS.; report_findings: Action Node: Report reconnaissance findings to the command center. Always returns SUCCESS.; is_mission_complete: Condition node: Check if the mission objectives are fulfilled. Returns SUCCESS if complete, FAILURE otherwise.; end_mission: Action Node: Terminate the mission. Always returns SUCCESS.; return_to_base: Action Node: Return to the base station. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if the weather is clear, start the mission and perform reconnaissance; after completion, report findings and end the mission; if the weather is not clear, wait until it becomes clear and then start the mission." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="WeatherDependentMission">
  <BehaviorTree ID="WeatherDependentMission">
    <Fallback>
      <Sequence>
        <is_weather_clear/>
        <Sequence>
          <start_mission/>
          <perform_reconnaissance/>
          <report_findings/>
          <is_mission_complete/>
          <end_mission/>
        </Sequence>
      </Sequence>
      <Sequence>
        <wait_until_clear/>
        <start_mission/>
        <perform_reconnaissance/>
        <report_findings/>
        <is_mission_complete/>
        <end_mission/>
      </Sequence>
    </Fallback>
    <return_to_base/>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_weather_clear"/>
    <Action ID="start_mission"/>
    <Action ID="perform_reconnaissance"/>
    <Action ID="report_findings"/>
    <Condition ID="is_mission_complete"/>
    <Action ID="end_mission"/>
    <Action ID="wait_until_clear"/>
    <Action ID="return_to_base"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_load_available: Condition node: Check if the desired load is available in storage. Returns SUCCESS if available, FAILURE otherwise.; retrieve_load: Action Node: Retrieve the load from storage. Always returns SUCCESS.; transport_load: Action Node: Transport the load to the destination. Always returns SUCCESS.; is_destination_reached: Condition node: Check if the destination has been reached. Returns SUCCESS if reached, FAILURE otherwise.; unload_load: Action Node: Unload the load at the destination. Always returns SUCCESS.; report_transport: Action Node: Report the completion of the transport task. Always returns SUCCESS.; is_load_heavy: Condition node: Check if the load is heavy. Returns SUCCESS if heavy, FAILURE otherwise.; request_assistance: Action Node: Request assistance for heavy load transport. Always returns SUCCESS.; secure_load: Action Node: Secure the load before transport. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if the load is available, check if it is heavy; if heavy, request assistance and secure the load; then retrieve and transport the load to the destination; unload it upon arrival and report transport completion. If the load is not available, do nothing." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="LoadTransport">
  <BehaviorTree ID="LoadTransport">
    <Fallback>
      <Sequence>
        <is_load_available/>
        <Fallback>
          <is_load_heavy/>
          <Sequence>
            <request_assistance/>
            <secure_load/>
          </Sequence>
        </Fallback>
        <retrieve_load/>
        <transport_load/>
        <Fallback>
          <is_destination_reached/>
          <unload_load/>
        </Fallback>
        <report_transport/>
      </Sequence>
      <!-- Do nothing if load is not available -->
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_load_available"/>
    <Condition ID="is_load_heavy"/>
    <Action ID="request_assistance"/>
    <Action ID="secure_load"/>
    <Action ID="retrieve_load"/>
    <Action ID="transport_load"/>
    <Condition ID="is_destination_reached"/>
    <Action ID="unload_load"/>
    <Action ID="report_transport"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_energy_level_high: Condition node: Check if the energy level is above the threshold. Returns SUCCESS if high, FAILURE otherwise.; harvest_resources: Action Node: Collect resources from the environment. Always returns SUCCESS.; store_resources: Action Node: Store collected resources. Always returns SUCCESS.; is_storage_full: Condition node: Check if the storage is full. Returns SUCCESS if full, FAILURE otherwise.; deploy_additional_units: Action Node: Deploy more units to assist in harvesting. Always returns SUCCESS.; analyze_resources: Action Node: Analyze the quality of collected resources. Always returns SUCCESS.; report_status: Action Node: Report the current status to the control center. Always returns SUCCESS.; recharge: Action Node: Recharge the robot's energy. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if energy level is high, harvest and store resources; if storage is full, deploy additional units and analyze resources; report status after each main action; if energy level is low, recharge." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ResourceManagement">
  <BehaviorTree ID="ResourceManagement">
    <Fallback>
      <Sequence>
        <is_energy_level_high/>
        <Sequence>
          <harvest_resources/>
          <store_resources/>
          <Fallback>
            <is_storage_full/>
            <Sequence>
              <deploy_additional_units/>
              <analyze_resources/>
            </Sequence>
          </Fallback>
          <report_status/>
        </Sequence>
      </Sequence>
      <Sequence>
        <recharge/>
        <report_status/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_energy_level_high"/>
    <Action ID="harvest_resources"/>
    <Action ID="store_resources"/>
    <Condition ID="is_storage_full"/>
    <Action ID="deploy_additional_units"/>
    <Action ID="analyze_resources"/>
    <Action ID="report_status"/>
    <Action ID="recharge"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_payload_attached: Condition node: Check if the payload is attached to the drone. Returns SUCCESS if attached, FAILURE otherwise.; detach_payload: Action Node: Detach the payload safely. Always returns SUCCESS.; fly_to_coordinates: Action Node: Fly the drone to specified GPS coordinates. Always returns SUCCESS.; take_photo: Action Node: Capture a photo of the target area. Always returns SUCCESS.; is_photo_cleared: Condition node: Check if the captured photo is clear and usable. Returns SUCCESS if clear, FAILURE otherwise.; retake_photo: Action Node: Retake the photo. Always returns SUCCESS.; send_photo: Action Node: Send the captured photo to the base station. Always returns SUCCESS.; return_to_launch: Action Node: Return the drone to the launch point. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if the payload is attached, fly to coordinates (37.7749,-122.4194,30), take a photo; if the photo is not clear, retake it until clear, then send the photo and return to launch; if payload is not attached, detach payload and do nothing else." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="DroneMission">
  <BehaviorTree ID="DroneMission">
    <Fallback>
      <Sequence>
        <is_payload_attached/>
        <fly_to_coordinates latitude="37.7749" longitude="-122.4194" altitude="30"/>
        <take_photo/>
        <Fallback>
          <is_photo_cleared/>
          <Sequence>
            <retake_photo/>
            <!-- Loop until photo is clear -->
          </Sequence>
        </Fallback>
        <send_photo/>
        <return_to_launch/>
      </Sequence>
      <Sequence>
        <detach_payload/>
        <!-- Do nothing else -->
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_payload_attached"/>
    <Action ID="detach_payload"/>
    <Action ID="fly_to_coordinates"/>
    <Action ID="take_photo"/>
    <Condition ID="is_photo_cleared"/>
    <Action ID="retake_photo"/>
    <Action ID="send_photo"/>
    <Action ID="return_to_launch"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
    <Control ID="Loop" editable="false"/> <!-- Assuming looping is handled -->
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  patrol_area: Action Node: Patrol the designated area. Always returns SUCCESS.;
  detect_intruder: Condition: Detect if an intruder is present. Returns SUCCESS if detected, FAILURE otherwise.;
  alert_security: Action Node: Send an alert to the security team. Always returns SUCCESS.;
  investigate_area: Action Node: Investigate the suspicious activity. Always returns SUCCESS.;
  return_to_patrol: Action Node: Resume patrolling the area. Always returns SUCCESS.;
  is_area_clear: Condition: Check if the area is clear of intruders. Returns SUCCESS if clear, FAILURE otherwise.;
}. 
To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND: Generate behavior tree to "Patrol the area. If an intruder is detected, alert security and investigate before returning to patrol." Ensure the behavior tree follows a logical flow.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="PatrolIntrusionResponse">
  <BehaviorTree ID="PatrolIntrusionResponse">
    <Sequence name="Main Sequence">
      <patrol_area/>
      <Fallback name="Intruder Handling">
        <Sequence name="Intruder Detected">
          <detect_intruder/>
          <Sequence name="Alert and Investigate">
            <alert_security/>
            <investigate_area/>
          </Sequence>
        </Sequence>
        <Sequence name="No Intruder">
          <is_area_clear/>
        </Sequence>
      </Fallback>
      <return_to_patrol/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID="alert_security"/>
    <Action ID="detect_intruder"/>
    <Action ID="investigate_area"/>
    <Action ID="patrol_area"/>
    <Action ID="return_to_patrol"/>
    <Condition ID="is_area_clear"/>
  </TreeNodesModel>
</root>


###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  gather_resources: Action Node: Collect resources from the environment. Always returns SUCCESS.;
  deposit_resources: Action Node: Deposit collected resources at the base. Always returns SUCCESS.;
  check_resource_level: Condition: Check if resource level is above threshold. Returns SUCCESS if above, FAILURE otherwise.;
  navigate_to_resource: Action Node: Move towards resource location. Always returns SUCCESS.;
  navigate_to_base: Action Node: Move towards the base. Always returns SUCCESS.;
  is_base_available: Condition: Verify if the base is available for depositing resources. Returns SUCCESS if available, FAILURE otherwise.;
  idle: Action Node: Remain idle. Always returns SUCCESS.;
}.
To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:Generate behavior tree to "If resource level is sufficient, navigate to base and deposit resources; otherwise, gather more resources." Ensure the behavior tree has clear decision-making.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ResourceManagement">
  <BehaviorTree ID="ResourceManagement">
    <Fallback name="Resource Decision">
      <Sequence name="Sufficient Resources">
        <check_resource_level/>
        <Sequence name="Navigate and Deposit">
          <navigate_to_base/>
          <is_base_available/>
          <deposit_resources/>
        </Sequence>
      </Sequence>
      <Sequence name="Insufficient Resources">
        <navigate_to_resource/>
        <gather_resources/>
      </Sequence>
    </Fallback>
    <idle/>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID="check_resource_level"/>
    <Action ID="deposit_resources"/>
    <Action ID="gather_resources"/>
    <Action ID="navigate_to_base"/>
    <Action ID="navigate_to_resource"/>
    <Condition ID="is_base_available"/>
    <Action ID="idle"/>
  </TreeNodesModel>
</root>


###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  monitor_temperature: Condition: Check if temperature is within safe limits. Returns SUCCESS if safe, FAILURE otherwise.;
  activate_cooling_system: Action Node: Turn on the cooling system. Always returns SUCCESS.;
  deactivate_cooling_system: Action Node: Turn off the cooling system. Always returns SUCCESS.;
  send_alert: Action Node: Send temperature alert to the control center. Always returns SUCCESS.;
  perform_system_check: Action Node: Conduct a system health check. Always returns SUCCESS.;
  report_status: Action Node: Report current status to the central server. Always returns SUCCESS.;
  idle: Action Node: Remain idle. Always returns SUCCESS.;
}.
To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:Generate behavior tree to "Continuously monitor temperature. If overheating is detected, activate cooling and send an alert. If temperature returns to normal, deactivate cooling." Ensure continuous monitoring.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TemperatureControl">
  <BehaviorTree ID="TemperatureControl">
    <Sequence name="Continuous Monitoring">
      <monitor_temperature/>
      <Fallback name="Overheating Response">
        <Sequence name="Overheat Detected">
          <monitor_temperature/>
          <activate_cooling_system/>
          <send_alert/>
        </Sequence>
        <Sequence name="Temperature Normal">
          <monitor_temperature/>
          <deactivate_cooling_system/>
        </Sequence>
      </Fallback>
      <perform_system_check/>
      <report_status/>
      <idle/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="monitor_temperature"/>
    <Action ID="activate_cooling_system"/>
    <Action ID="deactivate_cooling_system"/>
    <Action ID="send_alert"/>
    <Action ID="perform_system_check"/>
    <Action ID="report_status"/>
    <Action ID="idle"/>
  </TreeNodesModel>
</root>


###
SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  explore_area: Action Node: Explore the assigned area. Always returns SUCCESS.;
  map_environment: Action Node: Create a map of the environment. Always returns SUCCESS.;
  detect_landmark: Condition: Identify if a landmark is present. Returns SUCCESS if detected, FAILURE otherwise.;
  navigate_to_landmark: Action Node: Move towards the identified landmark. Always returns SUCCESS.;
  analyze_landmark: Action Node: Analyze the properties of the landmark. Always returns SUCCESS.;
  return_to_base: Action Node: Return to the base station. Always returns SUCCESS.;
  idle: Action Node: Remain idle. Always returns SUCCESS.;
}.
To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:Generate behavior tree to "Explore the area and map the environment. If a landmark is detected, navigate to it and analyze it before returning to base." Ensure the behavior tree handles detection appropriately.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ExplorationMission">
  <BehaviorTree ID="ExplorationMission">
    <Sequence name="Mission Sequence">
      <explore_area/>
      <map_environment/>
      <Fallback name="Landmark Handling">
        <Sequence name="Landmark Detected">
          <detect_landmark/>
          <Sequence name="Navigate and Analyze">
            <navigate_to_landmark/>
            <analyze_landmark/>
          </Sequence>
        </Sequence>
        <Sequence name="No Landmark">
          <idle/>
        </Sequence>
      </Fallback>
      <return_to_base/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID="analyze_landmark"/>
    <Action ID="detect_landmark"/>
    <Action ID="explore_area"/>
    <Action ID="map_environment"/>
    <Action ID="navigate_to_landmark"/>
    <Action ID="return_to_base"/>
    <Action ID="idle"/>
  </TreeNodesModel>
</root>


###

SYSTEM:
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:
It is CRITICAL to use only the following behaviors structured as a dictionary:
{
  monitor_battery: Condition: Check if battery level is above 20%. Returns SUCCESS if sufficient, FAILURE otherwise.;
  navigate_to_charging_station: Action Node: Move to the charging station. Always returns SUCCESS.;
  initiate_charging: Action Node: Start the charging process. Always returns SUCCESS.;
  charge_complete: Condition: Check if charging is complete. Returns SUCCESS if charged, FAILURE otherwise.;
  resume_task: Action Node: Resume previous task after charging. Always returns SUCCESS.;
  shutdown_system: Action Node: Power down the system safely. Always returns SUCCESS.;
  idle: Action Node: Remain idle. Always returns SUCCESS.;
}.
To construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:Generate behavior tree to "Continuously monitor battery levels. If battery is low, navigate to charging station and initiate charging. Once charging is complete, resume the previous task." Ensure the behavior tree can handle repeated cycles.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Sequence name="Battery Monitoring">
      <monitor_battery/>
      <Fallback name="Charging Procedure">
        <Sequence name="Low Battery">
          <monitor_battery/>
          <navigate_to_charging_station/>
          <initiate_charging/>
          <Fallback name="Charging Status">
            <charge_complete/>
            <resume_task/>
          </Fallback>
        </Sequence>
        <Sequence name="Sufficient Battery">
          <resume_task/>
        </Sequence>
      </Fallback>
      <idle/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID="charge_complete"/>
    <Action ID="initiate_charging"/>
    <Action ID="navigate_to_charging_station"/>
    <Action ID="monitor_battery"/>
    <Action ID="resume_task"/>
    <Action ID="shutdown_system"/>
    <Action ID="idle"/>
  </TreeNodesModel>
</root>


These seven tasks provide diverse scenarios for swarm robots, ensuring the use of specific behaviors within defined constraints. Each task includes clear conditions and actions, utilizes a mix of Sequence and Fallback nodes, and follows a logical flow within an XML-formatted behavior tree.
Certainly! Below is a set of 7 diverse task instructions designed to evaluate a Language Learning Model (LLM) for generating well-structured XML behavior trees for swarm robots. Each task adheres to the specified requirements, ensuring diversity in scenarios, behaviors, and node usage.


###

SYSTEM:  
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:  
It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_battery_low: Condition node: Check if the battery level is low. Returns SUCCESS if low, FAILURE otherwise.;  
return_to_base: Action Node: Navigate the robot back to the base station. Always returns SUCCESS.;  
charge_battery: Action Node: Begin charging the robot's battery. Always returns SUCCESS.;  
continue_task: Action Node: Continue with the current task. Always returns SUCCESS.  
}.  
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:  
Generate behavior tree to "if the battery is low, return to base and charge; otherwise, continue with the current task". Take a step back and think deeply about the behavior tree.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Fallback>
      <Sequence>
        <is_battery_low/>
        <Sequence>
          <return_to_base/>
          <charge_battery/>
        </Sequence>
      </Sequence>
      <continue_task/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_battery_low"/>
    <Action ID="return_to_base"/>
    <Action ID="charge_battery"/>
    <Action ID="continue_task"/>
  </TreeNodesModel>
</root>


###

SYSTEM:  
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:  
It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
detect_corridor: Condition node: Check if a corridor is detected. Returns SUCCESS if detected, FAILURE otherwise.;  
align_corridor: Action Node: Align with the detected corridor. Always returns SUCCESS.;  
move_forward: Action Node: Move forward along the corridor. Always returns SUCCESS.;  
search_for_corridor: Action Node: Search for a corridor. Always returns SUCCESS.  
}.  
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:  
Generate behavior tree to "if a corridor is detected then align with it and move forward, otherwise search for a corridor". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CorridorNavigation">
  <BehaviorTree ID="CorridorNavigation">
    <Fallback name="Corridor Fallback">
      <Sequence name="Navigate Corridor">
        <detect_corridor/>
        <align_corridor/>
        <move_forward/>
      </Sequence>
      <search_for_corridor/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="detect_corridor"/>
    <Action ID="align_corridor"/>
    <Action ID="move_forward"/>
    <Action ID="search_for_corridor"/>
  </TreeNodesModel>
</root>


###

SYSTEM:  
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:  
It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_target_visible: Condition node: Check if a target is visible. Returns SUCCESS if visible, FAILURE otherwise.;  
approach_target: Action Node: Move towards the visible target. Always returns SUCCESS.;  
scan_area: Action Node: Scan the surrounding area for targets. Always returns SUCCESS.;  
idle: Action Node: Remain idle. Always returns SUCCESS.  
}.  
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:  
Generate behavior tree to "if a target is visible, approach the target; otherwise, scan the area and remain idle". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TargetAcquisition">
  <BehaviorTree ID="TargetAcquisition">
    <Fallback>
      <Sequence>
        <is_target_visible/>
        <approach_target/>
      </Sequence>
      <Sequence>
        <scan_area/>
        <idle/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_target_visible"/>
    <Action ID="approach_target"/>
    <Action ID="scan_area"/>
    <Action ID="idle"/>
  </TreeNodesModel>
</root>


###

SYSTEM:  
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:  
It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_storage_full: Condition node: Check if the storage is full. Returns SUCCESS if full, FAILURE otherwise.;  
return_to_base: Action Node: Navigate the robot back to the base station. Always returns SUCCESS.;  
empty_storage: Action Node: Empty the storage compartments. Always returns SUCCESS.;  
collect_resources: Action Node: Collect resources from the environment. Always returns SUCCESS.  
}.  
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:  
Generate behavior tree to "if storage is full, return to base and empty storage; otherwise, collect resources". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ResourceManagement">
  <BehaviorTree ID="ResourceManagement">
    <Fallback>
      <Sequence>
        <is_storage_full/>
        <Sequence>
          <return_to_base/>
          <empty_storage/>
        </Sequence>
      </Sequence>
      <collect_resources/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_storage_full"/>
    <Action ID="return_to_base"/>
    <Action ID="empty_storage"/>
    <Action ID="collect_resources"/>
  </TreeNodesModel>
</root>


###

SYSTEM:  
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:  
It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_enemy_near: Condition node: Check if an enemy is nearby. Returns SUCCESS if an enemy is detected, FAILURE otherwise.;  
engage_enemy: Action Node: Engage and neutralize the detected enemy. Always returns SUCCESS.;  
evade: Action Node: Evade from potential threats. Always returns SUCCESS.;  
patrol_area: Action Node: Continue patrolling the designated area. Always returns SUCCESS.;  
}.  
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:  
Generate behavior tree to "if an enemy is near, engage the enemy; otherwise, continue patrolling the area or evade if necessary". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CombatBehavior">
  <BehaviorTree ID="CombatBehavior">
    <Fallback>
      <Sequence>
        <is_enemy_near/>
        <engage_enemy/>
      </Sequence>
      <Sequence>
        <evade/>
        <patrol_area/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_enemy_near"/>
    <Action ID="engage_enemy"/>
    <Action ID="evade"/>
    <Action ID="patrol_area"/>
  </TreeNodesModel>
</root>


###

SYSTEM:  
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:  
It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_resource_available: Condition node: Check if the desired resource is available. Returns SUCCESS if available, FAILURE otherwise.;  
collect_resource: Action Node: Collect the available resource. Always returns SUCCESS.;  
notify_teammates: Action Node: Send a notification to team members about resource status. Always returns SUCCESS.;  
search_alternate_source: Action Node: Search for an alternate resource source. Always returns SUCCESS.;  
}.  
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:  
Generate behavior tree to "if the resource is available, collect it and notify teammates; otherwise, search for an alternate source". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ResourceCollection">
  <BehaviorTree ID="ResourceCollection">
    <Fallback>
      <Sequence>
        <is_resource_available/>
        <Sequence>
          <collect_resource/>
          <notify_teammates/>
        </Sequence>
      </Sequence>
      <search_alternate_source/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_resource_available"/>
    <Action ID="collect_resource"/>
    <Action ID="notify_teammates"/>
    <Action ID="search_alternate_source"/>
  </TreeNodesModel>
</root>


###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_weather_favorable: Condition node: Check if the current weather conditions are favorable. Returns SUCCESS if favorable, FAILURE otherwise.;  
deploy_sensors: Action Node: Deploy environmental sensors. Always returns SUCCESS.;  
wait_for_conditions: Action Node: Wait until weather conditions improve. Always returns SUCCESS.;  
proceed_with_mission: Action Node: Continue with the planned mission. Always returns SUCCESS.  
}.  
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND: Generate behavior tree to "if the weather is favorable, deploy sensors and proceed with the mission; otherwise, wait for conditions to improve". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="WeatherAdaptiveMission">
  <BehaviorTree ID="WeatherAdaptiveMission">
    <Fallback>
      <Sequence>
        <is_weather_favorable/>
        <Sequence>
          <deploy_sensors/>
          <proceed_with_mission/>
        </Sequence>
      </Sequence>
      <wait_for_conditions/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_weather_favorable"/>
    <Action ID="deploy_sensors"/>
    <Action ID="proceed_with_mission"/>
    <Action ID="wait_for_conditions"/>
  </TreeNodesModel>
</root>


###

SYSTEM:  
<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS:  
It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_communication_lost: Condition node: Check if communication with the base is lost. Returns SUCCESS if lost, FAILURE otherwise.;  
attempt_reconnect: Action Node: Attempt to reconnect communication with the base. Always returns SUCCESS.;  
base_detection: Condition node: Detect the base's location. Returns SUCCESS if detected, FAILURE otherwise.;  
navigate_to_base: Action Node: Navigate back to the base location. Always returns SUCCESS.;  
send_status_report: Action Node: Send a status report to the base. Always returns SUCCESS.;  
}.  
to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.

USER COMMAND:  
Generate behavior tree to "if communication is lost, attempt to reconnect; if reconnection fails, detect base location and navigate to base; then send a status report". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CommunicationRecovery">
  <BehaviorTree ID="CommunicationRecovery">
    <Sequence>
      <Fallback>
        <Sequence>
          <is_communication_lost/>
          <attempt_reconnect/>
        </Sequence>
        <Sequence>
          <base_detection/>
          <navigate_to_base/>
        </Sequence>
      </Fallback>
      <send_status_report/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_communication_lost"/>
    <Action ID="attempt_reconnect"/>
    <Condition ID="base_detection"/>
    <Action ID="navigate_to_base"/>
    <Action ID="send_status_report"/>
  </TreeNodesModel>
</root>


###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {scan_area: Action Node: Scan the surrounding area for items. Always returns SUCCESS.; collect_item: Action Node: Collect the identified item. Always returns SUCCESS.; is_item_detected: Condition Node: Check if any item is detected during scanning. Returns SUCCESS if an item is detected, FAILURE otherwise.; move_to_item: Action Node: Move towards the detected item. Always returns SUCCESS.; log_collection: Action Node: Log the collection of the item. Always returns SUCCESS.; RetryUntilSuccessful: Decorator Node: Retry a child node until successful. Has attribute num_attempts.; Inverter: Decorator Node: Invert the result of the child node. Always returns the inverted result.; Sequence: Composite Node: Executes child nodes in sequence.; Fallback: Composite Node: Executes child nodes until one succeeds.; PassThrough: Action Node: Pass through the current state without action. Always returns SUCCESS.} to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "scan the area for items, and if an item is detected, move to it, collect it, log the collection, and then continue scanning." Ensure the tree handles failures in moving to the item by retrying up to three times.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ItemCollection">
  <BehaviorTree ID="ItemCollection">
    <Sequence>
      <scan_area/>
      <Fallback>
        <Sequence>
          <is_item_detected/>
          <RetryUntilSuccessful num_attempts="3">
            <move_to_item/>
          </RetryUntilSuccessful>
          <collect_item/>
          <log_collection/>
        </Sequence>
        <PassThrough/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Condition ID="is_item_detected"/>
    <Action ID="scan_area"/>
    <Action ID="move_to_item"/>
    <Action ID="collect_item"/>
    <Action ID="log_collection"/>
    <Decorator ID="RetryUntilSuccessful"/>
    <Action ID="PassThrough"/>
    <Composite ID="Sequence"/>
    <Composite ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {check_battery: Condition Node: Check if battery level is above 20%. Returns SUCCESS if above, FAILURE otherwise.; navigate_to_charging_station: Action Node: Navigate to the charging station. Always returns SUCCESS.; start_charging: Action Node: Begin charging the battery. Always returns SUCCESS.; wait_until_charged: Action Node: Wait until the battery is fully charged. Always returns SUCCESS.; resume_task: Action Node: Resume the previous task after charging. Always returns SUCCESS.; Sequence: Composite Node: Executes child nodes in sequence.; Fallback: Composite Node: Executes child nodes until one succeeds.; Inverter: Decorator Node: Invert the result of the child node. Always returns the inverted result.; Fallback: Composite Node: Selects the first successful child.; PassThrough: Action Node: Pass through without performing any action. Always returns SUCCESS.} to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "monitor the battery level, and if it drops below 20%, navigate to the charging station, start charging, wait until fully charged, and then resume the previous task." Ensure that if navigation fails, it retries twice before failing.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Sequence>
      <check_battery/>
      <Fallback>
        <Sequence>
          <RetryUntilSuccessful num_attempts="2">
            <navigate_to_charging_station/>
          </RetryUntilSuccessful>
          <start_charging/>
          <wait_until_charged/>
          <resume_task/>
        </Sequence>
        <PassThrough/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Condition ID="check_battery"/>
    <Action ID="navigate_to_charging_station"/>
    <Action ID="start_charging"/>
    <Action ID="wait_until_charged"/>
    <Action ID="resume_task"/>
    <Decorator ID="RetryUntilSuccessful"/>
    <Action ID="PassThrough"/>
    <Composite ID="Sequence"/>
    <Composite ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_enemy: Condition Node: Detect if an enemy is present. Returns SUCCESS if detected, FAILURE otherwise.; engage_enemy: Action Node: Engage the detected enemy. Always returns SUCCESS.; evade_enemy: Action Node: Evade the enemy. Always returns SUCCESS.; patrol_area: Action Node: Patrol the designated area. Always returns SUCCESS.; is_low_on_health: Condition Node: Check if health is below 30%. Returns SUCCESS if low, FAILURE otherwise.; seek_health_pack: Action Node: Seek out a health pack. Always returns SUCCESS.; Sequence: Composite Node: Executes child nodes in sequence.; Fallback: Composite Node: Executes child nodes until one succeeds.; Fallback: Composite Node: Selects the first successful child.; Inverter: Decorator Node: Invert the result of the child node. Always returns the inverted result.; Decorator: General Decorator Node.} to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "constantly patrol the area, and if an enemy is detected, check health levels. If health is low, seek a health pack; otherwise, engage the enemy."  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CombatBehavior">
  <BehaviorTree ID="CombatBehavior">
    <Fallback>
      <Sequence>
        <detect_enemy/>
        <Fallback>
          <Sequence>
            <is_low_on_health/>
            <seek_health_pack/>
          </Sequence>
          <engage_enemy/>
        </Fallback>
      </Sequence>
      <patrol_area/>
    </Fallback>
  </BehaviorTree>
  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Condition ID="detect_enemy"/>
    <Condition ID="is_low_on_health"/>
    <Action ID="engage_enemy"/>
    <Action ID="evade_enemy"/>
    <Action ID="patrol_area"/>
    <Action ID="seek_health_pack"/>
    <Composite ID="Fallback"/>
    <Composite ID="Sequence"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {check_weather: Condition Node: Check current weather conditions. Returns SUCCESS if weather is clear, FAILURE otherwise.; start_mission: Action Node: Start the primary mission. Always returns SUCCESS.; wait: Action Node: Wait for a specified duration. Always returns SUCCESS.; take_shelter: Action Node: Seek shelter to wait out bad weather. Always returns SUCCESS.; Sequence: Composite Node: Executes child nodes in sequence.; Fallback: Composite Node: Executes child nodes until one succeeds.; Parallel: Composite Node: Execute multiple child nodes in parallel.; Inverter: Decorator Node: Invert the result of the child node.; Decorator: General Decorator Node.; Fallback: Composite Node: Selects the first successful child.} to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "check the weather, and if it is clear, start the mission. If the weather is bad, take shelter and wait until conditions improve before starting the mission."  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="WeatherAwareMission">
  <BehaviorTree ID="WeatherAwareMission">
    <Fallback>
      <Sequence>
        <check_weather/>
        <start_mission/>
      </Sequence>
      <Sequence>
        <take_shelter/>
        <wait/>
        <check_weather/>
        <Fallback>
          <Sequence>
            <check_weather/>
            <start_mission/>
          </Sequence>
          <wait/>
        </Fallback>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Condition ID="check_weather"/>
    <Action ID="start_mission"/>
    <Action ID="take_shelter"/>
    <Action ID="wait"/>
    <Composite ID="Fallback"/>
    <Composite ID="Sequence"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {identify_resource: Condition Node: Identify if a specific resource is available. Returns SUCCESS if available, FAILURE otherwise.; harvest_resource: Action Node: Harvest the identified resource. Always returns SUCCESS.; store_resource: Action Node: Store the harvested resource in the inventory. Always returns SUCCESS.; explore_area: Action Node: Explore a new area to find resources. Always returns SUCCESS.; is_inventory_full: Condition Node: Check if the inventory is full. Returns SUCCESS if full, FAILURE otherwise.; Sequence: Composite Node: Executes child nodes in sequence.; Fallback: Composite Node: Executes child nodes until one succeeds.; Inverter: Decorator Node: Invert the result of the child node.; Decorator: General Decorator Node.; Fallback: Composite Node: Selects the first successful child.; Parallel: Composite Node: Execute multiple child nodes in parallel.} to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "continually explore areas to find resources. If a resource is found and the inventory is not full, harvest and store it. If the inventory is full, stop harvesting and continue exploring."  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ResourceManagement">
  <BehaviorTree ID="ResourceManagement">
    <Sequence>
      <Fallback>
        <Sequence>
          <identify_resource/>
          <Inverter>
            <is_inventory_full/>
          </Inverter>
          <Sequence>
            <harvest_resource/>
            <store_resource/>
          </Sequence>
        </Sequence>
        <explore_area/>
      </Fallback>
      <Fallback>
        <Sequence>
          <is_inventory_full/>
          <explore_area/>
        </Sequence>
        <explore_area/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Condition ID="identify_resource"/>
    <Condition ID="is_inventory_full"/>
    <Action ID="harvest_resource"/>
    <Action ID="store_resource"/>
    <Action ID="explore_area"/>
    <Composite ID="Sequence"/>
    <Composite ID="Fallback"/>
    <Decorator ID="Inverter"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {monitor_temperature: Condition Node: Monitor the current temperature. Returns SUCCESS if within safe range, FAILURE otherwise.; activate_cooling_system: Action Node: Activate the cooling system. Always returns SUCCESS.; deactivate_cooling_system: Action Node: Deactivate the cooling system. Always returns SUCCESS.; log_temperature: Action Node: Log the current temperature readings. Always returns SUCCESS.; alert_overheat: Action Node: Send an alert for overheating. Always returns SUCCESS.; Sequence: Composite Node: Executes child nodes in sequence.; Fallback: Composite Node: Executes child nodes until one succeeds.; Fallback: Composite Node: Selects the first successful child.; Inverter: Decorator Node: Invert the result of the child node.; Decorator: General Decorator Node.; RepeatUntilFailure: Decorator Node: Repeat a child node until it fails.} to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "continuously monitor the temperature. If the temperature exceeds safe limits, activate the cooling system and log the event. If activation fails, send an overheat alert."  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TemperatureControl">
  <BehaviorTree ID="TemperatureControl">
    <RepeatUntilFailure>
      <Sequence>
        <monitor_temperature/>
        <Fallback>
          <Sequence>
            <activate_cooling_system/>
            <log_temperature/>
          </Sequence>
          <alert_overheat/>
        </Fallback>
      </Sequence>
    </RepeatUntilFailure>
  </BehaviorTree>
  <!-- Description of Node Models (used by Groot) -->
  <TreeNodesModel>
    <Condition ID="monitor_temperature"/>
    <Action ID="activate_cooling_system"/>
    <Action ID="deactivate_cooling_system"/>
    <Action ID="log_temperature"/>
    <Action ID="alert_overheat"/>
    <Composite ID="Sequence"/>
    <Composite ID="Fallback"/>
    <Decorator ID="RepeatUntilFailure"/>
  </TreeNodesModel>
</root>
###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {CheckEnvironment: Condition node: Check current environmental conditions. Returns SUCCESS if conditions are optimal, FAILURE otherwise.; ActivateCooling: Action Node: Activate cooling systems. Always returns SUCCESS.; ActivateHeating: Action Node: Activate heating systems. Always returns SUCCESS.; MonitorTemperature: Condition node: Continuously monitor temperature. Returns RUNNING while monitoring.; AdjustTemperature: Sequence Node: Adjust temperature by activating cooling or heating based on conditions.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "continuously monitor the temperature, and if conditions are not optimal, activate cooling or heating accordingly". Take a step back and think deeply about the behavior.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>  
<root BTCPP_format="3" main_tree_to_execute="TemperatureControl">  
  <BehaviorTree ID="TemperatureControl">  
    <ReactiveSequence>  
      <MonitorTemperature/>  
      <Fallback>  
        <Sequence>  
          <CheckEnvironment/>  
          <AdjustTemperature/>  
        </Sequence>  
        <Action ID="MaintainStability"/> <!-- This behavior is not in the provided dictionary and should be avoided -->  
      </Fallback>  
    </ReactiveSequence>  
  </BehaviorTree>  
  <TreeNodesModel>  
    <Condition ID="CheckEnvironment"/>  
    <Action ID="ActivateCooling"/>  
    <Action ID="ActivateHeating"/>  
    <Condition ID="MonitorTemperature"/>  
    <Sequence ID="AdjustTemperature" editable="true">  
      <Fallback>  
        <Condition ID="CheckEnvironment"/>  
        <Action ID="ActivateCooling"/>  
        <Action ID="ActivateHeating"/>  
      </Fallback>  
    </Sequence>  
  </TreeNodesModel>  
</root>  

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {DetectEmergency: Condition node: Detect if an emergency situation exists. Returns SUCCESS if emergency is detected, FAILURE otherwise.; ShutdownSystems: Action Node: Initiate system shutdown procedures. Always returns SUCCESS.; NotifySupervisor: Action Node: Send notification to supervisor. Always returns SUCCESS.; MaintainOperations: Action Node: Continue normal operations. Always returns SUCCESS.; EmergencyHandling: Sequence Node: Handle emergency by shutting down systems and notifying supervisor.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "if an emergency is detected, shut down systems and notify the supervisor; otherwise, maintain normal operations". Take a step back and think deeply about the behavior.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>  
<root BTCPP_format="3" main_tree_to_execute="EmergencyResponse">  
  <BehaviorTree ID="EmergencyResponse">  
    <Fallback>  
      <Sequence>  
        <DetectEmergency/>  
        <EmergencyHandling/>  
      </Sequence>  
      <MaintainOperations/>  
    </Fallback>  
  </BehaviorTree>  
  <TreeNodesModel>  
    <Condition ID="DetectEmergency"/>  
    <Action ID="ShutdownSystems"/>  
    <Action ID="NotifySupervisor"/>  
    <Action ID="MaintainOperations"/>  
    <Sequence ID="EmergencyHandling" editable="true">  
      <ShutdownSystems/>  
      <NotifySupervisor/>  
    </Sequence>  
  </TreeNodesModel>  
</root>  

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {CheckResourceAvailability: Condition node: Check if required resources are available. Returns SUCCESS if available, FAILURE otherwise.; CollectResource: Action Node: Collect the specified resource. Always returns SUCCESS.; ReportStatus: Action Node: Report the current status. Always returns SUCCESS.; ManageResources: Sequence Node: Manage resource collection and reporting.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "check resource availability and if available, collect the resource and report status". Take a step back and think deeply about the behavior.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>  
<root BTCPP_format="3" main_tree_to_execute="ResourceManagement">  
  <BehaviorTree ID="ResourceManagement">  
    <Sequence>  
      <CheckResourceAvailability/>  
      <ManageResources/>  
    </Sequence>  
  </BehaviorTree>  
  <TreeNodesModel>  
    <Condition ID="CheckResourceAvailability"/>  
    <Action ID="CollectResource" editable="true">  
      <input_port name="resource_type"/>  
    </Action>  
    <Action ID="ReportStatus"/>  
    <Sequence ID="ManageResources" editable="true">  
      <CollectResource/>  
      <ReportStatus/>  
    </Sequence>  
  </TreeNodesModel>  
</root>  

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {CheckBattery: Condition node: Check the battery level. Returns SUCCESS if battery is sufficient, FAILURE otherwise.; ReturnToBase: Action Node: Navigate back to the base station. Always returns SUCCESS.; RechargeBattery: Action Node: Begin recharging the battery. Always returns SUCCESS.; PatrolArea: Action Node: Patrol a designated area. Always returns SUCCESS.;LowBatterySequence: Sequence Node: Handle low battery by returning to base and recharging.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "if the battery is low, return to base and recharge; otherwise, patrol the area". Take a step back and think deeply about the behavior.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>  
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">  
  <BehaviorTree ID="BatteryManagement">  
    <Fallback>  
      <Sequence>  
        <CheckBattery/>  
        <LowBatterySequence/>  
      </Sequence>  
      <PatrolArea/>  
    </Fallback>  
  </BehaviorTree>  
  <TreeNodesModel>  
    <Condition ID="CheckBattery"/>  
    <Action ID="ReturnToBase"/>  
    <Action ID="RechargeBattery"/>  
    <Action ID="PatrolArea"/>  
    <Sequence ID="LowBatterySequence" editable="true">  
      <ReturnToBase/>  
      <RechargeBattery/>  
    </Sequence>  
  </TreeNodesModel>  
</root>  

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {CheckObstacle: Condition node: Detect if an obstacle is in the path. Returns SUCCESS if obstacle is present, FAILURE otherwise.; NavigateAround: Action Node: Perform navigation around the detected obstacle. Always returns SUCCESS.; ContinuePath: Action Node: Continue moving along the predefined path. Always returns SUCCESS.; ObstacleHandling: Fallback Node: Decide to navigate around or stop based on obstacle type.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "check for obstacles and navigate around them if detected; otherwise, continue on the path". Take a step back and think deeply about the behavior.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>  
<root BTCPP_format="3" main_tree_to_execute="ObstacleAvoidance">  
  <BehaviorTree ID="ObstacleAvoidance">  
    <Fallback>  
      <Sequence>  
        <CheckObstacle/>  
        <NavigateAround/>  
      </Sequence>  
      <ContinuePath/>  
    </Fallback>  
  </BehaviorTree>  
  <TreeNodesModel>  
    <Condition ID="CheckObstacle"/>  
    <Action ID="NavigateAround"/>  
    <Action ID="ContinuePath"/>  
    <Fallback ID="ObstacleHandling" editable="true">  
      <NavigateAround/>  
      <StopMovement/> <!-- This behavior is not in the provided dictionary and should be avoided -->  
    </Fallback>  
  </TreeNodesModel>  
</root>  

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {CheckCommunication: Condition node: Verify communication with other agents. Returns SUCCESS if communication is active, FAILURE otherwise.; SendSignal: Action Node: Send a coordination signal to other agents. Always returns SUCCESS.; WaitForResponse: Action Node: Wait for responses from other agents. Always returns SUCCESS.; CoordinateTask: Sequence Node: Coordinate tasks with other agents by sending signals and waiting for responses.}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.  
USER COMMAND: generate behavior tree to "check communication status and coordinate tasks with other agents if communication is active; otherwise, attempt to re-establish communication". Take a step back and think deeply about the behavior.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>  
<root BTCPP_format="3" main_tree_to_execute="AgentCoordination">  
  <BehaviorTree ID="AgentCoordination">  
    <Fallback>  
      <Sequence>  
        <CheckCommunication/>  
        <CoordinateTask/>  
      </Sequence>  
      <ReEstablishCommunication/> <!-- This behavior is not in the provided dictionary and should be avoided -->  
    </Fallback>  
  </BehaviorTree>  
  <TreeNodesModel>  
    <Condition ID="CheckCommunication"/>  
    <Action ID="SendSignal" editable="true">  
      <input_port name="signal_type"/>  
    </Action>  
    <Action ID="WaitForResponse"/>  
    <Sequence ID="CoordinateTask" editable="true">  
      <SendSignal/>  
      <WaitForResponse/>  
    </Sequence>  
  </TreeNodesModel>  
</root>  

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  `check_battery`: Condition node: Verify if the robot's battery level is above 20%. Returns SUCCESS if above, FAILURE otherwise.;
  `navigate_to_charge`: Action Node: Navigate the robot to the charging station. Always returns SUCCESS.;
  `start_mission`: Action Node: Begin the primary mission tasks. Always returns SUCCESS.;
  `report_low_battery`: Action Node: Announce low battery status. Always returns SUCCESS.
}. 
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND: Generate a behavior tree to "Check battery level, if sufficient start mission, else navigate to charge and report low battery."

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryCheckTree">
  <BehaviorTree ID="BatteryCheckTree">
    <Sequence name="Main Sequence">
      <check_battery/>
      <Fallback name="Mission or Charge">
        <Sequence>
          <start_mission/>
        </Sequence>
        <Sequence>
          <navigate_to_charge/>
          <report_low_battery/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="check_battery"/>
    <Action ID="start_mission"/>
    <Action ID="navigate_to_charge"/>
    <Action ID="report_low_battery"/>
  </TreeNodesModel>
</root>


###
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  `is_obstacle_detected`: Condition node: Check if an obstacle is detected in the path. Returns SUCCESS if detected, FAILURE otherwise.;
  `avoid_obstacle`: Action Node: Perform obstacle avoidance maneuvers. Always returns SUCCESS.;
  `continue_forward`: Action Node: Move the robot forward. Always returns SUCCESS.;
  `signal_obstacle`: Action Node: Signal the presence of an obstacle to the control system. Always returns SUCCESS.
}. 
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND: Generate a behavior tree to "If an obstacle is detected, avoid it and signal the control system, otherwise continue moving forward."
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ObstacleAvoidanceTree">
  <BehaviorTree ID="ObstacleAvoidanceTree">
    <Fallback name="Obstacle Handling">
      <Sequence>
        <is_obstacle_detected/>
        <avoid_obstacle/>
        <signal_obstacle/>
      </Sequence>
      <continue_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_obstacle_detected"/>
    <Action ID="avoid_obstacle"/>
    <Action ID="signal_obstacle"/>
    <Action ID="continue_forward"/>
  </TreeNodesModel>
</root>


###
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  `is_area_clean`: Condition node: Determine if the designated area is already clean. Returns SUCCESS if clean, FAILURE otherwise.;
  `start_cleaning`: Action Node: Initiate the cleaning process. Always returns SUCCESS.;
  `seek_cleaning_tool`: Action Node: Locate and retrieve the cleaning tool. Always returns SUCCESS.;
  `notify_cleaning_complete`: Action Node: Notify that cleaning is complete. Always returns SUCCESS.
}. 
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND: Generate a behavior tree to "Check if the area is clean, if not seek the cleaning tool and start cleaning, then notify upon completion."

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CleaningProcessTree">
  <BehaviorTree ID="CleaningProcessTree">
    <Sequence name="Cleaning Sequence">
      <Fallback name="Check and Clean">
        <is_area_clean/>
        <Sequence>
          <seek_cleaning_tool/>
          <start_cleaning/>
        </Sequence>
      </Fallback>
      <notify_cleaning_complete/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_area_clean"/>
    <Action ID="seek_cleaning_tool"/>
    <Action ID="start_cleaning"/>
    <Action ID="notify_cleaning_complete"/>
  </TreeNodesModel>
</root>


###
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  `is_enemy_detected`: Condition node: Check for the presence of an enemy. Returns SUCCESS if detected, FAILURE otherwise.;
  `engage_enemy`: Action Node: Engage the detected enemy. Always returns SUCCESS.;
  `patrol_area`: Action Node: Patrol the designated area. Always returns SUCCESS.;
  `report_engagement`: Action Node: Report engagement status to the base. Always returns SUCCESS.
}. 
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND: Generate a behavior tree to "If an enemy is detected, engage and report, otherwise patrol the area."

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CombatPatrolTree">
  <BehaviorTree ID="CombatPatrolTree">
    <Fallback name="Combat or Patrol">
      <Sequence>
        <is_enemy_detected/>
        <engage_enemy/>
        <report_engagement/>
      </Sequence>
      <patrol_area/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_enemy_detected"/>
    <Action ID="engage_enemy"/>
    <Action ID="report_engagement"/>
    <Action ID="patrol_area"/>
  </TreeNodesModel>
</root>


###
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>

INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: 
{
  `is_target_visible`: Condition node: Check if the target is visible to the robot. Returns SUCCESS if visible, FAILURE otherwise.;
  `approach_target`: Action Node: Move the robot towards the target. Always returns SUCCESS.;
  `scan_environment`: Action Node: Scan the surrounding environment for additional information. Always returns SUCCESS.;
  `wait`: Action Node: Make the robot wait for a specified duration. Always returns SUCCESS.
}. 
To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).

USER COMMAND: Generate a behavior tree to "If the target is visible, approach it and scan the environment, otherwise wait."

OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TargetApproachTree">
  <BehaviorTree ID="TargetApproachTree">
    <Fallback name="Approach or Wait">
      <Sequence>
        <is_target_visible/>
        <approach_target/>
        <scan_environment/>
      </Sequence>
      <wait duration="5"/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_target_visible"/>
    <Action ID="approach_target"/>
    <Action ID="scan_environment"/>
    <Action ID="wait"/>
  </TreeNodesModel>
</root>


###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_obstacle_detected: Condition node: Check if there is an obstacle in the path. Returns SUCCESS if obstacle detected, FAILURE otherwise.; avoid_obstacle: Action Node: Maneuver to avoid the obstacle. Always returns SUCCESS.; proceed_forward: Action Node: Continue moving forward. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if an obstacle is detected then avoid the obstacle, otherwise proceed forward". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="Navigation">
  <BehaviorTree ID="Navigation">
    <Fallback name="Navigation Fallback">
      <Sequence name="Obstacle Avoidance Sequence">
        <is_obstacle_detected/>
        <avoid_obstacle/>
      </Sequence>
      <proceed_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_obstacle_detected"/>
    <Action ID="avoid_obstacle"/>
    <Action ID="proceed_forward"/>
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below the threshold. Returns SUCCESS if low, FAILURE otherwise.; seek_charging_station: Action Node: Navigate to the nearest charging station. Always returns SUCCESS.; continue_operation: Action Node: Continue normal operations. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if the battery is low then seek a charging station, otherwise continue operation". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Fallback name="Battery Fallback">
      <Sequence name="Low Battery Sequence">
        <is_battery_low/>
        <seek_charging_station/>
      </Sequence>
      <continue_operation/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_battery_low"/>
    <Action ID="seek_charging_station"/>
    <Action ID="continue_operation"/>
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_communication_lost: Condition node: Check if communication with the base is lost. Returns SUCCESS if lost, FAILURE otherwise.; attempt_reconnect: Action Node: Try to reconnect to the base. Always returns SUCCESS.; switch_to_autonomous_mode: Action Node: Switch to autonomous operation mode. Always returns SUCCESS.; continue_communicating: Action Node: Maintain regular communication. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if communication is lost then attempt to reconnect; if reconnection fails, switch to autonomous mode, otherwise continue communicating". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CommunicationManagement">
  <BehaviorTree ID="CommunicationManagement">
    <Fallback name="Communication Fallback">
      <Sequence name="Reconnection Sequence">
        <is_communication_lost/>
        <attempt_reconnect/>
        <Fallback name="Reconnection Fallback">
          <continue_communicating/>
          <switch_to_autonomous_mode/>
        </Fallback>
      </Sequence>
      <continue_communicating/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_communication_lost"/>
    <Action ID="attempt_reconnect"/>
    <Action ID="switch_to_autonomous_mode"/>
    <Action ID="continue_communicating"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_task_assigned: Condition node: Check if a new task has been assigned. Returns SUCCESS if assigned, FAILURE otherwise.; allocate_task: Action Node: Allocate the task to the appropriate robot. Always returns SUCCESS.; wait_for_assignment: Action Node: Wait for task assignment. Always returns SUCCESS.; report_status: Action Node: Report current status to the base. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if a task is assigned then allocate the task, otherwise wait for assignment and report status". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TaskAllocation">
  <BehaviorTree ID="TaskAllocation">
    <Fallback name="Task Allocation Fallback">
      <Sequence name="Task Assignment Sequence">
        <is_task_assigned/>
        <allocate_task/>
      </Sequence>
      <Sequence name="Wait and Report Sequence">
        <wait_for_assignment/>
        <report_status/>
      </Sequence>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_task_assigned"/>
    <Action ID="allocate_task"/>
    <Action ID="wait_for_assignment"/>
    <Action ID="report_status"/>
  </TreeNodesModel>
</root>



###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below the threshold. Returns SUCCESS if low, FAILURE otherwise.; seek_charging_station: Action Node: Navigate to the nearest charging station. Always returns SUCCESS.; continue_operation: Action Node: Continue normal operations. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if the battery is low then seek a charging station, otherwise continue operation". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Fallback name="Battery Fallback">
      <Sequence name="Low Battery Sequence">
        <is_battery_low/>
        <seek_charging_station/>
      </Sequence>
      <continue_operation/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_battery_low"/>
    <Action ID="seek_charging_station"/>
    <Action ID="continue_operation"/>
  </TreeNodesModel>
</root>


 
###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
CheckBatteryLevel: Condition node: Verify if the battery level is above a threshold. Returns SUCCESS if above, FAILURE otherwise.;  
NavigateTo: Action Node: Navigate to a specified location. Always returns SUCCESS.;  
StartCharging: Action Node: Begin battery charging procedure. Always returns SUCCESS.;  
ReportStatus: Action Node: Report current operational status. Always returns SUCCESS.;  
InitializeSensors: Action Node: Initialize all sensors. Always returns SUCCESS.;  
ShutdownSystem: Action Node: Safely shut down the system. Always returns SUCCESS.;  
ResetSystem: Action Node: Reset the system to default settings. Always returns SUCCESS.  
}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if battery level is sufficient, initialize sensors and report status; otherwise, navigate to charging station and start charging." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryCheck">
  <BehaviorTree ID="BatteryCheck">
    <Sequence name="Main Sequence">
      <CheckBatteryLevel/>
      <Sequence>
        <InitializeSensors/>
        <ReportStatus/>
      </Sequence>
      <Fallback>
        <Sequence>
          <NavigateTo location="ChargingStation"/>
          <StartCharging/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="CheckBatteryLevel"/>
    <Action ID="InitializeSensors"/>
    <Action ID="ReportStatus"/>
    <Action ID="NavigateTo" editable="true">
      <input_port name="location"/>
    </Action>
    <Action ID="StartCharging"/>
    <Action ID="ShutdownSystem"/>
    <Action ID="ResetSystem"/>
    <Control ID="Sequence"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
is_obstacle_detected: Condition node: Determine if an obstacle is present. Returns SUCCESS if detected, FAILURE otherwise.;  
AvoidObstacle: Action Node: Perform obstacle avoidance maneuver. Always returns SUCCESS.;  
MoveForward: Action Node: Move the agent forward. Always returns SUCCESS.;  
StopMovement: Action Node: Stop all movement. Always returns SUCCESS.;  
ScanEnvironment: Action Node: Scan the surroundings for information. Always returns SUCCESS.;  
LogEvent: Action Node: Log a specific event or action. Always returns SUCCESS.;  
AdjustPath: Action Node: Adjust the navigation path. Always returns SUCCESS.  
}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "continuously move forward, but if an obstacle is detected, avoid it and scan the environment." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ObstacleAvoidance">
  <BehaviorTree ID="ObstacleAvoidance">
    <Fallback name="Obstacle Handling">
      <Sequence>
        <is_obstacle_detected/>
        <Sequence>
          <AvoidObstacle/>
          <ScanEnvironment/>
        </Sequence>
      </Sequence>
      <MoveForward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="is_obstacle_detected"/>
    <Action ID="AvoidObstacle"/>
    <Action ID="MoveForward"/>
    <Action ID="ScanEnvironment"/>
    <Action ID="LogEvent"/>
    <Action ID="AdjustPath"/>
    <Control ID="Sequence"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
IsAreaClean: Condition node: Check if the current area is clean. Returns SUCCESS if clean, FAILURE otherwise.;  
CleanArea: Action Node: Perform cleaning of the current area. Always returns SUCCESS.;  
MoveToNextArea: Action Node: Move to the next area for cleaning. Always returns SUCCESS.;  
ReportCompletion: Action Node: Report that cleaning is complete. Always returns SUCCESS.;  
ActivateSprinklers: Action Node: Activate sprinkler system. Always returns SUCCESS.;  
DeactivateSprinklers: Action Node: Deactivate sprinkler system. Always returns SUCCESS.;  
InspectArea: Action Node: Perform area inspection. Always returns SUCCESS.  
}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "for each area, if it's not clean, clean it and move to the next; after all areas are clean, report completion." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CleaningRoutine">
  <BehaviorTree ID="CleaningRoutine">
    <Sequence>
      <Sequence name="Clean Areas">
        <IsAreaClean/>
        <Fallback>
          <Sequence>
            <CleanArea/>
            <MoveToNextArea/>
          </Sequence>
        </Fallback>
      </Sequence>
      <ReportCompletion/>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="IsAreaClean"/>
    <Action ID="CleanArea"/>
    <Action ID="MoveToNextArea"/>
    <Action ID="ReportCompletion"/>
    <Action ID="ActivateSprinklers"/>
    <Action ID="DeactivateSprinklers"/>
    <Action ID="InspectArea"/>
    <Control ID="Sequence"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
IsTemperatureHigh: Condition node: Check if the temperature exceeds a threshold. Returns SUCCESS if high, FAILURE otherwise.;  
ActivateCoolingSystem: Action Node: Turn on the cooling system. Always returns SUCCESS.;  
DeactivateCoolingSystem: Action Node: Turn off the cooling system. Always returns SUCCESS.;  
MonitorTemperature: Action Node: Continuously monitor temperature. Always returns SUCCESS.;  
SoundAlarm: Action Node: Sound an alarm if temperature is critical. Always returns SUCCESS.;  
LogTemperature: Action Node: Log the current temperature reading. Always returns SUCCESS.;  
ResetAlarm: Action Node: Reset the alarm system. Always returns SUCCESS.  
}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "monitor temperature; if it's high, activate cooling system and log temperature; if temperature remains high, sound alarm." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TemperatureMonitor">
  <BehaviorTree ID="TemperatureMonitor">
    <Sequence>
      <MonitorTemperature/>
      <Fallback>
        <Sequence>
          <IsTemperatureHigh/>
          <Sequence>
            <ActivateCoolingSystem/>
            <LogTemperature/>
            <IsTemperatureHigh/>
            <SoundAlarm/>
          </Sequence>
        </Sequence>
        <DeactivateCoolingSystem/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="IsTemperatureHigh"/>
    <Action ID="ActivateCoolingSystem"/>
    <Action ID="DeactivateCoolingSystem"/>
    <Action ID="MonitorTemperature"/>
    <Action ID="SoundAlarm"/>
    <Action ID="LogTemperature"/>
    <Action ID="ResetAlarm"/>
    <Control ID="Sequence"/>
    <Control ID="Fallback"/>
  </TreeNodesModel>
</root>

###
  
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>  
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary:  
{  
DetectFire: Condition node: Detect presence of fire. Returns SUCCESS if fire is detected, FAILURE otherwise.;  
EvacuateArea: Action Node: Initiate evacuation of the area. Always returns SUCCESS.;  
ActivateFireSuppression: Action Node: Activate fire suppression systems. Always returns SUCCESS.;  
NotifyAuthorities: Action Node: Notify emergency authorities. Always returns SUCCESS.;  
WaitForClearance: Action Node: Wait for clearance from authorities. Always returns SUCCESS.;  
InspectArea: Action Node: Perform area inspection. Always returns SUCCESS.;  
SecurePerimeter: Action Node: Secure the area perimeter. Always returns SUCCESS.  
}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).  
USER COMMAND: generate behavior tree to "if fire is detected, activate fire suppression and notify authorities; then evacuate area." Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.  
OUTPUT:  
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="FireResponse">
  <BehaviorTree ID="FireResponse">
    <Sequence name="Fire Handling">
      <DetectFire/>
      <Sequence>
        <ActivateFireSuppression/>
        <NotifyAuthorities/>
        <EvacuateArea/>
      </Sequence>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="DetectFire"/>
    <Action ID="ActivateFireSuppression"/>
    <Action ID="NotifyAuthorities"/>
    <Action ID="EvacuateArea"/>
    <Action ID="WaitForClearance"/>
    <Action ID="InspectArea"/>
    <Action ID="SecurePerimeter"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###
 
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {patrol_area: Action Node: Patrol the designated area. Always returns SUCCESS.; detect_obstacle: Condition node: Detect if there is an obstacle in the path. Returns SUCCESS if an obstacle is detected, FAILURE otherwise.; avoid_obstacle: Action Node: Maneuver to avoid the detected obstacle. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "patrol the area, and if an obstacle is detected then avoid it, otherwise continue patrolling". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="PatrolBehavior">
  <BehaviorTree ID="PatrolBehavior">
    <Fallback name="Main Fallback">
      <Sequence name="Obstacle Sequence">
        <detect_obstacle/>
        <avoid_obstacle/>
      </Sequence>
      <patrol_area/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="detect_obstacle"/>
    <Action ID="avoid_obstacle"/>
    <Action ID="patrol_area"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {check_battery: Condition node: Check the current battery level. Returns SUCCESS if battery is above threshold, FAILURE otherwise.; return_to_base: Action Node: Navigate back to the charging base. Always returns SUCCESS.; proceed_to_destination: Action Node: Continue to the delivery destination. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if the battery level is low then return to base, otherwise proceed to the delivery destination". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryCheck">
  <BehaviorTree ID="BatteryCheck">
    <Fallback name="Battery Fallback">
      <Sequence name="Sufficient Battery Sequence">
        <check_battery/>
        <proceed_to_destination/>
      </Sequence>
      <return_to_base/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="check_battery"/>
    <Action ID="proceed_to_destination"/>
    <Action ID="return_to_base"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_dirt: Condition node: Detect the presence of dirt in the environment. Returns SUCCESS if dirt is detected, FAILURE otherwise.; clean_area: Action Node: Perform a cleaning action in the detected area. Always returns SUCCESS.; recharge_cleaner: Action Node: Navigate to the charging station for recharging. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if dirt is detected then clean the area, otherwise recharge the cleaner". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CleaningBehavior">
  <BehaviorTree ID="CleaningBehavior">
    <Fallback name="Cleaning Fallback">
      <Sequence name="Dirt Cleaning Sequence">
        <detect_dirt/>
        <clean_area/>
      </Sequence>
      <recharge_cleaner/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="detect_dirt"/>
    <Action ID="clean_area"/>
    <Action ID="recharge_cleaner"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {victim_detected: Condition node: Detect the presence of a victim. Returns SUCCESS if a victim is found, FAILURE otherwise.; perform_rescue: Action Node: Execute rescue operations for the detected victim. Always returns SUCCESS.; continue_search: Action Node: Continue searching for victims. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if a victim is detected then perform rescue, otherwise continue searching". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="RescueMission">
  <BehaviorTree ID="RescueMission">
    <Fallback name="Rescue Fallback">
      <Sequence name="Victim Rescue Sequence">
        <victim_detected/>
        <perform_rescue/>
      </Sequence>
      <continue_search/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Condition ID="victim_detected"/>
    <Action ID="perform_rescue"/>
    <Action ID="continue_search"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {monitor_area: Action Node: Continuously monitor the designated security area. Always returns SUCCESS.; detect_intruder: Condition node: Detect the presence of an intruder. Returns SUCCESS if an intruder is detected, FAILURE otherwise.; raise_alarm: Action Node: Activate the security alarm system. Always returns SUCCESS.; report_normal: Action Node: Report that the area is secure. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "monitor the area, and if an intruder is detected then raise the alarm, otherwise report that the area is secure". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="SecurityMonitor">
  <BehaviorTree ID="SecurityMonitor">
    <Sequence name="Security Sequence">
      <monitor_area/>
      <Fallback name="Intrusion Fallback">
        <Sequence name="Intruder Sequence">
          <detect_intruder/>
          <raise_alarm/>
        </Sequence>
        <report_normal/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID="monitor_area"/>
    <Condition ID="detect_intruder"/>
    <Action ID="raise_alarm"/>
    <Action ID="report_normal"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {scan_environment: Action Node: Scan the surrounding environment for resources. Always returns SUCCESS.; resource_found: Condition node: Determine if necessary resources have been located. Returns SUCCESS if resources are found, FAILURE otherwise.; collect_resource: Action Node: Gather the identified resources. Always returns SUCCESS.; report_status: Action Node: Report the current status of resource collection. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "scan the environment, and if resources are found then collect them, otherwise report the status". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ResourceCollection">
  <BehaviorTree ID="ResourceCollection">
    <Sequence name="Collection Sequence">
      <scan_environment/>
      <Fallback name="Resource Fallback">
        <Sequence name="Resource Found Sequence">
          <resource_found/>
          <collect_resource/>
        </Sequence>
        <report_status/>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Action ID="scan_environment"/>
    <Condition ID="resource_found"/>
    <Action ID="collect_resource"/>
    <Action ID="report_status"/>
    <Control ID="Fallback"/>
    <Control ID="Sequence"/>
  </TreeNodesModel>
</root>


###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_temperature_high: Condition node: Check if the temperature is above a predefined threshold. Returns SUCCESS if high, FAILURE otherwise.; trigger_cooling: Action Node: Activate the cooling system. Always returns SUCCESS.; continue_operation: Action Node: Continue normal operations. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if the temperature is high then trigger the cooling system, otherwise continue operation". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="TemperatureControl">
  <BehaviorTree ID="TemperatureControl">
    <Fallback name="Temperature Fallback">
      <Sequence name="Cooling Sequence">
        <is_temperature_high/>
        <trigger_cooling/>
      </Sequence>
      <continue_operation/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Action ID="continue_operation"/>
    <Condition ID="is_temperature_high"/>
    <Action ID="trigger_cooling"/>
  </TreeNodesModel>
</root>


###
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {are_parts_available: Condition node: Check if the necessary parts are available. Returns SUCCESS if available, FAILURE otherwise.; assemble_part: Action Node: Assemble a part. Always returns SUCCESS.; signal_error: Action Node: Signal an error condition. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if parts are available then assemble the part, otherwise signal an error". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="AssemblyProcess">
  <BehaviorTree ID="AssemblyProcess">
    <Fallback name="Assembly Fallback">
      <Sequence name="Assembly Sequence">
        <are_parts_available/>
        <assemble_part/>
      </Sequence>
      <signal_error/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="are_parts_available"/>
    <Action ID="assemble_part"/>
    <Action ID="signal_error"/>
  </TreeNodesModel>
</root>


###
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_patrol_complete: Condition node: Check if patrol is complete. Returns SUCCESS if complete, FAILURE otherwise.; move_to_next_waypoint: Action Node: Move to the next waypoint. Always returns SUCCESS.; scan_for_intruders: Action Node: Scan the area for intruders. Always returns SUCCESS.; report_intruder: Action Node: Report the detected intruder. Always returns SUCCESS.; wait: Action Node: Wait for a specified duration. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.
USER COMMAND: generate behavior tree to "if patrol is complete then move to next waypoint and scan for intruders; if an intruder is detected, report it, otherwise wait". Take a step back and think deeply about the behavior.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="PatrolSequence">
  <BehaviorTree ID="PatrolSequence">
    <Sequence>
      <is_patrol_complete/>
      <Fallback>
        <Sequence>
          <move_to_next_waypoint/>
          <scan_for_intruders/>
          <Fallback>
            <report_intruder/>
            <wait/>
          </Fallback>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_patrol_complete"/>
    <Action ID="move_to_next_waypoint"/>
    <Action ID="report_intruder"/>
    <Action ID="scan_for_intruders"/>
    <Action ID="wait"/>
  </TreeNodesModel>
</root>


###
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is below the threshold. Returns SUCCESS if low, FAILURE otherwise.; return_to_base: Action Node: Navigate back to the base station. Always returns SUCCESS.; recharge_battery: Action Node: Recharge the battery. Always returns SUCCESS.; resume_tasks: Action Node: Resume normal tasks. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if the battery is low then return to base and recharge; otherwise resume normal tasks". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryManagement">
  <BehaviorTree ID="BatteryManagement">
    <Fallback name="Battery Fallback">
      <Sequence name="Recharge Sequence">
        <is_battery_low/>
        <return_to_base/>
        <recharge_battery/>
      </Sequence>
      <resume_tasks/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_battery_low"/>
    <Action ID="return_to_base"/>
    <Action ID="recharge_battery"/>
    <Action ID="resume_tasks"/>
  </TreeNodesModel>
</root>


###
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_obstacle_detected: Condition node: Check if there is an obstacle in the path. Returns SUCCESS if detected, FAILURE otherwise.; avoid_obstacle: Action Node: Maneuver to avoid the obstacle. Always returns SUCCESS.; continue_navigation: Action Node: Continue moving forward. Always returns SUCCESS.; alert_control: Action Node: Send an alert to the control center. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if an obstacle is detected then avoid it and send an alert; otherwise continue navigation". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="NavigationControl">
  <BehaviorTree ID="NavigationControl">
    <Fallback name="Obstacle Handler">
      <Sequence name="Obstacle Sequence">
        <is_obstacle_detected/>
        <avoid_obstacle/>
        <alert_control/>
      </Sequence>
      <continue_navigation/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_obstacle_detected"/>
    <Action ID="avoid_obstacle"/>
    <Action ID="alert_control"/>
    <Action ID="continue_navigation"/>
  </TreeNodesModel>
</root>


###
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_resource_needed: Condition node: Check if a specific resource is needed. Returns SUCCESS if needed, FAILURE otherwise.; gather_resource: Action Node: Collect the required resource. Always returns SUCCESS.; process_resource: Action Node: Process the gathered resource. Always returns SUCCESS.; report_completion: Action Node: Report that the resource has been processed. Always returns SUCCESS.; idle: Action Node: Remain idle. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if a resource is needed then gather and process it, followed by reporting completion; otherwise remain idle". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ResourceManagement">
  <BehaviorTree ID="ResourceManagement">
    <Fallback name="Resource Fallback">
      <Sequence name="Resource Processing Sequence">
        <is_resource_needed/>
        <gather_resource/>
        <process_resource/>
        <report_completion/>
      </Sequence>
      <idle/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_resource_needed"/>
    <Action ID="gather_resource"/>
    <Action ID="process_resource"/>
    <Action ID="report_completion"/>
    <Action ID="idle"/>
  </TreeNodesModel>
</root>


###
SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_clean: Condition node: Check if the designated area is clean. Returns SUCCESS if clean, FAILURE otherwise.; start_cleaning: Action Node: Begin the cleaning process. Always returns SUCCESS.; notify_completion: Action Node: Notify that cleaning is complete. Always returns SUCCESS.; schedule_cleaning: Action Node: Schedule the next cleaning cycle. Always returns SUCCESS.; perform_inspection: Action Node: Conduct an inspection of the area. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if the area is not clean then start cleaning and notify completion; otherwise perform inspection and schedule the next cleaning cycle". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CleaningRoutine">
  <BehaviorTree ID="CleaningRoutine">
    <Sequence name="Cleaning Sequence">
      <Fallback name="Clean or Inspect">
        <Sequence name="Cleaning Process">
          <is_area_clean/>
          <start_cleaning/>
          <notify_completion/>
        </Sequence>
        <Sequence name="Inspection and Scheduling">
          <perform_inspection/>
          <schedule_cleaning/>
        </Sequence>
      </Fallback>
    </Sequence>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Condition ID="is_area_clean"/>
    <Action ID="start_cleaning"/>
    <Action ID="notify_completion"/>
    <Action ID="perform_inspection"/>
    <Action ID="schedule_cleaning"/>
  </TreeNodesModel>
</root>


