###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_obstacle_detected: Condition node: Check if an obstacle is detected. Returns SUCCESS if detected, FAILURE otherwise.; perform_avoidance: Action Node: Execute avoidance maneuver. Always returns SUCCESS.; continue_forward: Action Node: Continue moving forward. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if an obstacle is detected then perform avoidance maneuver, otherwise continue moving forward". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ObstacleAvoidance">
  <BehaviorTree ID="ObstacleAvoidance">
    <Fallback name="Obstacle Fallback">
      <Sequence name="Avoidance Sequence">
        <is_obstacle_detected/>
        <perform_avoidance/>
      </Sequence>
      <continue_forward/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Action ID="continue_forward"/>
    <Condition ID="is_obstacle_detected"/>
    <Action ID="perform_avoidance"/>
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_signal_weak: Condition node: Check if the communication signal is weak. Returns SUCCESS if weak, FAILURE otherwise.; attempt_reconnect: Action Node: Attempt to re-establish communication. Always returns SUCCESS.; continue_mission: Action Node: Continue with the mission objectives. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if communication signal is weak then attempt to re-establish communication, otherwise continue with mission objectives". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="CommunicationCheck">
  <BehaviorTree ID="CommunicationCheck">
    <Fallback name="Signal Fallback">
      <Sequence name="Reconnect Sequence">
        <is_signal_weak/>
        <attempt_reconnect/>
      </Sequence>
      <continue_mission/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Action ID="continue_mission"/>
    <Condition ID="is_signal_weak"/>
    <Action ID="attempt_reconnect"/>
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_resource_detected: Condition node: Check if a resource is detected. Returns SUCCESS if detected, FAILURE otherwise.; collect_resource: Action Node: Collect the detected resource. Always returns SUCCESS.; patrol_area: Action Node: Continue patrolling the area. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if a resource is detected then collect it, otherwise patrol the area". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="ResourceCollection">
  <BehaviorTree ID="ResourceCollection">
    <Fallback name="Resource Fallback">
      <Sequence name="Collection Sequence">
        <is_resource_detected/>
        <collect_resource/>
      </Sequence>
      <patrol_area/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Action ID="patrol_area"/>
    <Condition ID="is_resource_detected"/>
    <Action ID="collect_resource"/>
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is low. Returns SUCCESS if low, FAILURE otherwise.; notify_charging_team: Action Node: Notify the charging team about low battery. Always returns SUCCESS.; continue_tasks: Action Node: Continue performing assigned tasks. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if battery is low then notify the charging team, otherwise continue performing assigned tasks". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="BatteryNotification">
  <BehaviorTree ID="BatteryNotification">
    <Fallback name="Battery Fallback">
      <Sequence name="Notification Sequence">
        <is_battery_low/>
        <notify_charging_team/>
      </Sequence>
      <continue_tasks/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Action ID="continue_tasks"/>
    <Condition ID="is_battery_low"/>
    <Action ID="notify_charging_team"/>
  </TreeNodesModel>
</root>

###

SYSTEM: <<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>
INSTRUCTIONS: It is CRITICAL to use only the following behaviors structured as a dictionary: {is_emergency_signal_received: Condition node: Check if an emergency signal has been received. Returns SUCCESS if received, FAILURE otherwise.; initiate_shutdown: Action Node: Initiate system shutdown procedures. Always returns SUCCESS.; maintain_operations: Action Node: Maintain normal operations. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).
USER COMMAND: generate behavior tree to "if an emergency signal is received then initiate shutdown, otherwise maintain normal operations". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.
OUTPUT:
<?xml version="1.0" encoding="UTF-8"?>
<root BTCPP_format="3" main_tree_to_execute="EmergencyShutdown">
  <BehaviorTree ID="EmergencyShutdown">
    <Fallback name="Emergency Fallback">
      <Sequence name="Shutdown Sequence">
        <is_emergency_signal_received/>
        <initiate_shutdown/>
      </Sequence>
      <maintain_operations/>
    </Fallback>
  </BehaviorTree>
  <TreeNodesModel>
    <Control ID="Fallback"/>
    <Action ID="maintain_operations"/>
    <Condition ID="is_emergency_signal_received"/>
    <Action ID="initiate_shutdown"/>
  </TreeNodesModel>
</root>
###

