[
  {
      "id": "seed_task_1",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {rotate_in_circle: Action Node: Rotate the robot in a circle. Always returns SUCCESS.; is_robot_in_range: Condition node: Check if the robot is within 6 inches of its starting location. Returns SUCCESS if within range, FAILURE otherwise.; wander: Action Node: Perform a wandering action. Always returns SUCCESS.; task_completed: Action Node: Indicate task completion. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"Rotate in a circle within 6 inches of current location\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"RotateCircle\"><BehaviorTree ID=\"RotateCircle\"><Sequence name=\"Main Sequence\"><Fallback name=\"Rotation Decision\"><Sequence><is_robot_in_range/><rotate_in_circle/><task_completed/></Sequence><wander/></Fallback></Sequence></BehaviorTree><TreeNodesModel><Condition ID=\"is_robot_in_range\"/><Action ID=\"rotate_in_circle\"/><Action ID=\"task_completed\"/><Action ID=\"wander\"/></TreeNodesModel></root>"
    },
    {
      "id": "seed_task_2",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {follow_leader: Action Node: Follow the leader robot. Always returns SUCCESS.; identify_leader: Action Node: Identify and save the leader robot's ID. Always returns SUCCESS.; return_to_leader: Action Node: Return to the leader robot. Always returns SUCCESS.; is_leader_reachable: Condition node: Check if the leader is within communication range. Returns SUCCESS if reachable, FAILURE otherwise.; in_formation: Condition node: Check if the swarm is in formation. Returns SUCCESS if in formation, FAILURE otherwise}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"Follow the leader robot in formation with the rest of the swarm.\" Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"FollowLeader\">  <BehaviorTree ID=\"FollowLeader\">    <Sequence name=\"Main Sequence\">      <Fallback name=\"Leader Decision\">        <Sequence>          <in_formation/>          <return_to_leader/>        </Sequence>        <Sequence>          <identify_leader/>          <is_leader_reachable/>          <follow_leader/>        </Sequence>      </Fallback>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"follow_leader\"/>    <Action ID=\"identify_leader\"/>    <Condition ID=\"in_formation\"/>    <Condition ID=\"is_leader_reachable\"/>    <Action ID=\"return_to_leader\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_3",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {MoveBase: Action Node: Move the agent to a specified waypoint. Always returns SUCCESS.; SetBlackboard: Action Node: Set a key-value pair on the agent's blackboard. Always returns SUCCESS.; SaySomething: Action Node: Speak a message. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"move to waypoint (3,4,5), then set blackboard with message 'arrived' and announce arrival.\" Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"MoveAndAnnounce\">  <BehaviorTree ID=\"MoveAndAnnounce\">    <Sequence name=\"Main Sequence\">      <MoveBase goal=\"3;4;5\"/>      <SetBlackboard value=\"arrived\"                     output_key=\"status\"/>      <SaySomething message=\"arrived\"/>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"MoveBase\"            editable=\"true\">      <input_port name=\"goal\"/>    </Action>    <Action ID=\"SaySomething\"            editable=\"true\">      <input_port name=\"message\"/>    </Action>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_4",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {is_obstacle_detected: Condition node: Check for obstacles. Returns SUCCESS if an obstacle is detected, FAILURE otherwise.; avoid_obstacle: Action Node: Execute obstacle avoidance maneuvers. Always returns SUCCESS.; continue_movement_agent: Action Node: Resume agent movement. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"if an obstacle is detected then avoid it, otherwise continue movement\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"ObstacleAvoidance\">  <BehaviorTree ID=\"ObstacleAvoidance\">    <Fallback name=\"Main Fallback\">      <Sequence name=\"Avoid Obstacle Sequence\">        <is_obstacle_detected/>        <avoid_obstacle/>      </Sequence>      <continue_movement_agent/>    </Fallback>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Action ID=\"avoid_obstacle\"/>    <Action ID=\"continue_movement_agent\"/>    <Condition ID=\"is_obstacle_detected\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_5",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {wander: Action Node: Perform a wandering action. Always returns SUCCESS.; SetBlackboard: Action Node: Set a key-value pair on the blackboard. Always returns SUCCESS.; SaySomething: Action Node: Speak a message. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"wander around, then set blackboard with 'no target found' and speak that message\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"WanderAnnounce\">  <BehaviorTree ID=\"WanderAnnounce\">    <Sequence name=\"Main Sequence\">      <wander/>      <SetBlackboard value=\"no target found\"                     output_key=\"result\"/>      <SaySomething message=\"no target found\"/>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"SaySomething\"            editable=\"true\">      <input_port name=\"message\"/>    </Action>    <Action ID=\"wander\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_6",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {agent_movement_freeze: Action: Freeze agent's movement. Always returns True.; avoid_obstacle: Action: Avoid detected obstacles. Always returns True.; change_color_to_green: Action: Change agent's color to green. Always returns True.; change_color_to_white: Action: Change agent's color to white. Always returns True.; continue_movement_agent: Action: Continue agent's movement. Always returns True.; form_line: Action: Form a vertical line at the center. Always returns True.; is_agent_in_nest: Condition: Check if the agent is in the nest. Returns True if in the nest, False otherwise.; is_line_formed: Condition: Check if a vertical line is formed. Returns True if formed with the center, False otherwise.; is_obstacle_detected: Condition: Check for obstacles nearby. Returns True if detected, False otherwise.; is_target_detected: Condition: Check if target is within 20 units. Returns True if within 20 units, False otherwise.; is_target_reached: Condition: Check if target is within 15 units. Returns True if within 15 units, False otherwise.; task_completed: Action: Signal task completion by freezing movement. Always returns True.; wander: Action: Move randomly within the environment. Always returns True}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to 'Form a vertical line' Output only the XML behavior tree without extra text.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"FormLine\">  <BehaviorTree ID=\"FormLine\">    <Sequence name=\"Main Sequence\">      <form_line/>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"form_line\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_7",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {agent_movement_freeze: Action: Freeze agent's movement. Always returns True.; avoid_obstacle: Action: Avoid detected obstacles. Always returns True.; change_color_to_green: Action: Change agent's color to green. Always returns True.; change_color_to_white: Action: Change agent's color to white. Always returns True.; continue_movement_agent: Action: Continue agent's movement. Always returns True.; form_line: Action: Form a vertical line at the center. Always returns True.; is_agent_in_nest: Condition: Check if the agent is in the nest. Returns True if in the nest, False otherwise.; is_line_formed: Condition: Check if a vertical line is formed. Returns True if formed with the center, False otherwise.; is_obstacle_detected: Condition: Check for obstacles nearby. Returns True if detected, False otherwise.; is_target_detected: Condition: Check if target is within 20 units. Returns True if within 20 units, False otherwise.; is_target_reached: Condition: Check if target is within 15 units. Returns True if within 15 units, False otherwise.; task_completed: Action: Signal task completion by freezing movement. Always returns True.; wander: Action: Move randomly within the environment. Always returns True}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"Find the target and change color to green, then return home and change color to white.\" Output only the XML behavior tree without extra text.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"FindAndReturn\"> <BehaviorTree ID=\"FindAndReturn\">  <Sequence name=\"Main Sequence\">   <Fallback name=\"Find Target\">    <Sequence>     <is_target_detected/>     <change_color_to_green/>    </Sequence>    <wander/>   </Fallback>   <Sequence name=\"Return Home\">    <is_agent_in_nest/>    <change_color_to_white/>   </Sequence>  </Sequence> </BehaviorTree> <TreeNodesModel>  <Control ID=\"Fallback\">   <Action ID=\"change_color_to_green\"/>   <Action ID=\"change_color_to_white\"/>  <Condition ID=\"is_agent_in_nest\"/>   <Condition ID=\"is_target_detected\"/>   <Action ID=\"wander\"/>  </TreeNodesModel> </root>"
    },
    {
      "id": "seed_task_8",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_traffic_light: Condition node: Detect the current traffic light color. Returns SUCCESS if green, FAILURE if red.; stop_vehicle: Action Node: Stop the vehicle. Always returns SUCCESS.; proceed_vehicle: Action Node: Continue driving. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"if the traffic light is red then stop the vehicle, otherwise if green then proceed\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"TrafficControl\">  <BehaviorTree ID=\"TrafficControl\">    <Fallback name=\"Traffic Fallback\">      <Sequence name=\"Green Light Sequence\">        <detect_traffic_light/>        <proceed_vehicle/>      </Sequence>      <stop_vehicle/>    </Fallback>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Condition ID=\"detect_traffic_light\"/>    <Action ID=\"proceed_vehicle\"/>    <Action ID=\"stop_vehicle\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_9",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {are_parts_available: Condition node: Check if the necessary parts are available. Returns SUCCESS if available, FAILURE otherwise.; assemble_part: Action Node: Assemble a part. Always returns SUCCESS.; signal_error: Action Node: Signal an error condition. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"if parts are available then assemble the part, otherwise signal an error\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"AssemblyProcess\">  <BehaviorTree ID=\"AssemblyProcess\">    <Fallback name=\"Assembly Fallback\">      <Sequence name=\"Assembly Sequence\">        <are_parts_available/>        <assemble_part/>      </Sequence>      <signal_error/>    </Fallback>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Condition ID=\"are_parts_available\"/>    <Action ID=\"assemble_part\"/>    <Action ID=\"signal_error\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_10",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {CheckBattery: Condition node: Check the battery level. Returns SUCCESS if battery is sufficient, FAILURE otherwise.; MoveBase: Action Node: Move the agent to a specified goal. Always returns SUCCESS.; SaySomething: Action Node: Speak a message. Always returns SUCCESS.; ReactiveSequence: Control Node: Executes its children in order and restarts if a child returns RUNNING.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"execute two move strategies: one reactive strategy that continuously checks battery and then moves, and a simple strategy that checks battery only once before moving\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"MoveReactive\">  <BehaviorTree ID=\"MoveReactive\">    <ReactiveSequence>      <CheckBattery/>      <Sequence>        <SaySomething message=\"mission started\"/>        <MoveBase goal=\"1;2;0.5\"/>        <SaySomething message=\"mission started\"/>      </Sequence>    </ReactiveSequence>  </BehaviorTree>  <BehaviorTree ID=\"MoveSimple\">    <Sequence>      <CheckBattery/>      <SaySomething message=\"mission started\"/>      <MoveBase goal=\"1;2;0.5\"/>      <SaySomething message=\"mission completed\"/>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Condition ID=\"CheckBattery\"/>    <Action ID=\"MoveBase\"            editable=\"true\">      <input_port name=\"goal\"/>    </Action>    <Action ID=\"SaySomething\"            editable=\"true\">      <input_port name=\"message\"/>    </Action>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_11",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {CalculateGoal: Action Node: Calculate the goal based on input parameters. Always returns SUCCESS.; PrintTarget: Action Node: Print the target information. Always returns SUCCESS.; SetBlackboard: Action Node: Set a key-value pair on the agent's blackboard. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"calculate a goal from a given position, print the target, set an alternative goal, and print the alternative goal\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"TreeWithPorts2\">  <BehaviorTree ID=\"TreeWithPorts2\">    <Sequence>      <CalculateGoal goal=\"{GoalPosition}\"/>      <PrintTarget target=\"{GoalPosition}\"/>      <SetBlackboard value=\"-1;3\"                     output_key=\"OtherGoal\"/>      <PrintTarget target=\"{OtherGoal}\"/>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"CalculateGoal\"            editable=\"true\">      <output_port name=\"goal\"/>    </Action>    <Action ID=\"PrintTarget\"            editable=\"true\">      <input_port name=\"target\"/>    </Action>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_12",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {SaySomething: Action Node: Speak a message. Always returns SUCCESS.; ThinkWhatToSay: Action Node: Process input and write a OUTPUT to the blackboard. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"say hello, then think what to say by writing to a blackboard entry, and then say the content of that blackboard entry\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"TreeWithPorts\">  <BehaviorTree ID=\"TreeWithPorts\">    <Sequence>      <SaySomething message=\"hello\"/>      <ThinkWhatToSay text=\"{the_answer}\"                      _description=\"Write into the blackboard entry &apos;the_answer&apos;\"/>      <SaySomething message=\"{the_answer}\"                    _description=\"Read from the blackboard entry &apos;the_answer&apos;\"/>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"SaySomething\"            editable=\"true\">      <input_port name=\"message\"/>    </Action>    <Action ID=\"ThinkWhatToSay\"            editable=\"true\">      <output_port name=\"text\"/>    </Action>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_13",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {is_patrol_complete: Condition node: Check if patrol is complete. Returns SUCCESS if complete, FAILURE otherwise.; move_to_next_waypoint: Action Node: Move to the next waypoint. Always returns SUCCESS.; scan_for_intruders: Action Node: Scan the area for intruders. Always returns SUCCESS.; report_intruder: Action Node: Report the detected intruder. Always returns SUCCESS.; wait: Action Node: Wait for a specified duration. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"if patrol is complete then move to next waypoint and scan for intruders; if an intruder is detected, report it, otherwise wait\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"PatrolSequence\">  <BehaviorTree ID=\"PatrolSequence\">    <Sequence>      <is_patrol_complete/>      <Fallback>        <Sequence>          <move_to_next_waypoint/>          <scan_for_intruders/>          <Fallback>            <report_intruder/>            <wait/>          </Fallback>        </Sequence>      </Fallback>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Condition ID=\"is_patrol_complete\"/>    <Action ID=\"move_to_next_waypoint\"/>    <Action ID=\"report_intruder\"/>    <Action ID=\"scan_for_intruders\"/>    <Action ID=\"wait\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_14",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_mapped: Condition node: Check if the area is mapped. Returns SUCCESS if mapped, FAILURE otherwise.; is_path_blocked: Condition node: Check if the path is blocked. Returns SUCCESS if blocked, FAILURE otherwise.; turn_left: Action Node: Turn the agent left. Always returns SUCCESS.; turn_right: Action Node: Turn the agent right. Always returns SUCCESS.; move_forward: Action Node: Move the agent forward. Always returns SUCCESS.; update_map: Action Node: Update the mapping data. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"if area is mapped, then if the path is blocked, turn left or right; otherwise, move forward and update the map\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"MapArea\">  <BehaviorTree ID=\"MapArea\">    <Sequence>      <is_area_mapped/>      <Fallback>        <Sequence>          <is_path_blocked/>          <Fallback>            <turn_left/>            <turn_right/>          </Fallback>        </Sequence>        <Sequence>          <move_forward/>          <update_map/>        </Sequence>      </Fallback>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Condition ID=\"is_area_mapped\"/>    <Condition ID=\"is_path_blocked\"/>    <Action ID=\"move_forward\"/>    <Action ID=\"turn_left\"/>    <Action ID=\"turn_right\"/>    <Action ID=\"update_map\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_15",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {is_search_complete: Condition node: Check if the search is complete. Returns SUCCESS if complete, FAILURE otherwise.; move_to_next_area: Action Node: Move the agent to the next search area. Always returns SUCCESS.; scan_for_survivors: Action Node: Scan the area for survivors. Always returns SUCCESS.; is_survivor_detected: Condition node: Check if a survivor is detected. Returns SUCCESS if detected, FAILURE otherwise.; call_for_rescue: Action Node: Call for rescue. Always returns SUCCESS.; mark_area_searched: Action Node: Mark the area as searched. Always returns SUCCESS.}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"if search is complete then move to next area and scan for survivors; if a survivor is detected, call for rescue, otherwise mark the area as searched\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"SearchAndRescue\">  <BehaviorTree ID=\"SearchAndRescue\">    <Sequence>      <is_search_complete/>      <Fallback>        <Sequence>          <move_to_next_area/>          <scan_for_survivors/>          <Fallback>            <Sequence>              <is_survivor_detected/>              <call_for_rescue/>            </Sequence>            <mark_area_searched/>          </Fallback>        </Sequence>      </Fallback>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Action ID=\"call_for_rescue\"/>    <Condition ID=\"is_search_complete\"/>    <Condition ID=\"is_survivor_detected\"/>    <Action ID=\"mark_area_searched\"/>    <Action ID=\"move_to_next_area\"/>    <Action ID=\"scan_for_survivors\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_16",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_corridor: Condition node: Check if a corridor is detected. Returns SUCCESS if detected, FAILURE otherwise.; align_corridor: Action Node: Align with the detected corridor. Always returns SUCCESS.; move_forward: Action Node: Move forward along the corridor. Always returns SUCCESS.; search_for_corridor: Action Node: Search for a corridor. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"if a corridor is detected then align with it and move forward, otherwise search for a corridor\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"CorridorNavigation\">  <BehaviorTree ID=\"CorridorNavigation\">    <Fallback name=\"Corridor Fallback\">      <Sequence name=\"Navigate Corridor\">        <detect_corridor/>        <align_corridor alignment=\"\"/>        <move_forward speed=\"\"/>      </Sequence>      <search_for_corridor/>    </Fallback>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Action ID=\"align_corridor\"            editable=\"true\">      <input_port name=\"alignment\"/>    </Action>    <Condition ID=\"detect_corridor\"/>    <Action ID=\"move_forward\"            editable=\"true\">      <input_port name=\"speed\"/>    </Action>    <Action ID=\"search_for_corridor\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_17",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {is_temperature_high: Condition node: Check if the temperature is above a predefined threshold. Returns SUCCESS if high, FAILURE otherwise.; trigger_cooling: Action Node: Activate the cooling system. Always returns SUCCESS.; continue_operation: Action Node: Continue normal operations. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"if the temperature is high then trigger the cooling system, otherwise continue operation\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"TemperatureControl\">  <BehaviorTree ID=\"TemperatureControl\">    <Fallback name=\"Temperature Fallback\">      <Sequence name=\"Cooling Sequence\">        <is_temperature_high/>        <trigger_cooling/>      </Sequence>      <continue_operation/>    </Fallback>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Action ID=\"continue_operation\"/>    <Condition ID=\"is_temperature_high\"/>    <Action ID=\"trigger_cooling\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_18",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "Use only the following behaviors. For this command, if any behavior not in the dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"find mohammed then turn 90 degree\" Output only the XML behavior tree without extra text.",
      "OUTPUT": "Sorry, I can't do the task with the provided behaviors."
    },
    {
      "id": "seed_task_19",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {move_forward: Action Node: Move the robot one step forward. Always returns SUCCESS.; turn_left: Action Node: Turn the robot 90 degrees to the left. Always returns SUCCESS.; update_map: Action Node: Update the robot's internal map based on current sensor data. Always returns SUCCESS.; is_path_clear: Condition node: Check if the path ahead is clear. Returns SUCCESS if clear, FAILURE otherwise.; is_obstacle_detected: Condition node: Check for obstacles nearby. Returns SUCCESS if detected, FAILURE otherwise.; is_path_blocked: Condition node: Check if the path is blocked. Returns SUCCESS if blocked, FAILURE otherwise.; wander: Action Node: Move randomly within the environment. Always returns SUCCESS.; avoid_obstacle: Action Node: Avoid detected obstacles. Always returns SUCCESS}. To construct a behavior tree in XML format for the following command. If any behavior outside the provided dictionary is used, output (Sorry, I can't do the task).",
      "USER COMMAND": "generate behavior tree to \"Explore an unknown environment and map it\" Output only the XML behavior tree without extra text.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"ExploreMap\">  <BehaviorTree ID=\"ExploreMap\">    <Fallback name=\"Exploration Fallback\">      <Sequence name=\"Clear Path Mapping\">        <is_path_clear/>        <move_forward/>        <update_map/>      </Sequence>      <Sequence name=\"Obstacle Handling\">        <is_obstacle_detected/>        <avoid_obstacle/>        <update_map/>      </Sequence>      <Sequence name=\"Blocked Path Turn\">        <is_path_blocked/>        <turn_left/>      </Sequence>      <wander/>    </Fallback>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Action ID=\"avoid_obstacle\"/>    <Condition ID=\"is_obstacle_detected\"/>    <Condition ID=\"is_path_blocked\"/>    <Condition ID=\"is_path_clear\"/>    <Action ID=\"move_forward\"/>    <Action ID=\"turn_left\"/>    <Action ID=\"update_map\"/>    <Action ID=\"wander\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_20",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {is_target_detected: Condition node: Check if the target is detected. Returns SUCCESS if detected, FAILURE otherwise.; SaySomething: Action Node: Speak a message. Always returns SUCCESS.; wander: Action Node: Perform a wandering action. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"if target is detected then say 'Target found' else wander and say 'Searching'\". Take a step back and think deeply about the behavior you need and then the XML structure.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"TargetAnnouncement\">  <BehaviorTree ID=\"TargetAnnouncement\">    <Fallback name=\"Main Fallback\">      <Sequence name=\"Target Found Sequence\">        <is_target_detected/>        <SaySomething message=\"Target found\"/>      </Sequence>      <Sequence name=\"Search Sequence\">        <wander/>        <SaySomething message=\"Searching\"/>      </Sequence>    </Fallback>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"SaySomething\"            editable=\"true\">      <input_port name=\"message\"/>    </Action>    <Control ID=\"Fallback\"/>    <Condition ID=\"is_target_detected\"/>    <Action ID=\"wander\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_21",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {MoveBase: Action Node: Move the agent to a specified waypoint. Always returns SUCCESS.; SetBlackboard: Action Node: Set a key-value pair on the agent's blackboard. Always returns SUCCESS.; SaySomething: Action Node: Speak a message. Always returns SUCCESS.; ForceFailure: Decorator Node: Forces its child to return FAILURE.; SubTree: Special Node: Execute a referenced BehaviorTree as a subtree}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"execute a move command with parameter remapping where the agent sets a move goal, then uses a subtree to move to the target, setting the blackboard with either 'goal_reached' or 'error', and then speaks out the result.\" Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"MoveWithRemapping\">  <BehaviorTree ID=\"MoveSetResult\">    <Fallback>      <Sequence>        <MoveBase goal=\"{target}\"/>        <SetBlackboard value=\"goal_reached\"                       output_key=\"result\"/>      </Sequence>      <ForceFailure>        <SetBlackboard value=\"error\"                       output_key=\"result\"/>      </ForceFailure>    </Fallback>  </BehaviorTree>  <BehaviorTree ID=\"MoveWithRemapping\">    <Sequence>      <SetBlackboard value=\"-1;2;0.5\"                     output_key=\"move_goal\"/>      <SubTree ID=\"MoveSetResult\"               result=\"{move_result}\"               target=\"{move_goal}\"/>      <SaySomething message=\"{move_result}\"/>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"MoveBase\"            editable=\"true\">      <input_port name=\"goal\"/>    </Action>    <Action ID=\"SaySomething\"            editable=\"true\">      <input_port name=\"message\"/>    </Action>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_22",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {OpenDoor: Action Node: Open the door. Always returns SUCCESS.; RetryUntilSuccessful: Decorator Node: Retry a child node until successful. Has attribute num_attempts.; PickLock: Action Node: Attempt to pick a lock. Always returns SUCCESS.; SmashDoor: Action Node: Smash the door. Always returns SUCCESS.; IsDoorClosed: Condition node: Check if the door is closed. Returns SUCCESS if closed, FAILURE otherwise.; Inverter: Decorator Node: Invert the result of the child node. Always returns the inverted result.; SubTree: Special Node: Execute a referenced BehaviorTree as a subtree.; PassThroughDoor: Action Node: Pass through the door. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"execute a door navigation command with subtree usage where the agent checks if the door is closed and, if so, executes a subtree to open, pick the lock, or smash the door, and then passes through the door.\" Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"MoveWithSubtree\">  <BehaviorTree ID=\"IfDoorClosed\">    <Fallback>      <OpenDoor/>      <RetryUntilSuccessful num_attempts=\"5\">        <PickLock/>      </RetryUntilSuccessful>      <SmashDoor/>    </Fallback>  </BehaviorTree>  <BehaviorTree ID=\"MoveWithSubtree\">    <Sequence>      <Fallback>        <Inverter>          <IsDoorClosed/>        </Inverter>        <SubTree ID=\"IfDoorClosed\"/>      </Fallback>      <PassThroughDoor/>    </Sequence>  </BehaviorTree>  <!-- Description of Node Models (used by Groot) -->  <TreeNodesModel>    <Condition ID=\"IsDoorClosed\"/>    <Action ID=\"OpenDoor\"/>    <Action ID=\"PassThroughDoor\"/>    <Action ID=\"PickLock\"/>    <Action ID=\"SmashDoor\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_23",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {is_target_detected: Condition node: Check if the target is detected. Returns SUCCESS if detected, FAILURE otherwise.; is_target_reached: Condition node: Check if the target has been reached. Returns SUCCESS if reached, FAILURE otherwise.; change_color: Action Node: Change the agent's color. Accepts parameter color. Always returns SUCCESS.; is_agent_in_nest: Condition node: Check if the agent is in the nest. Returns SUCCESS if in the nest, FAILURE otherwise.; wander: Action Node: Perform a wandering action. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"execute a find and return command where the agent searches for a target by checking if it is detected and reached, changes color to red if found, otherwise wanders; then if the agent is in the nest, changes color to green, otherwise wanders.\" Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"FindAndReturn\">  <BehaviorTree ID=\"FindAndReturn\">    <Sequence name=\"Main Sequence\">      <Fallback name=\"Find Goal\">        <Sequence>          <is_target_detected/>          <is_target_reached/>          <change_color color=\"red\"/>        </Sequence>        <wander/>      </Fallback>      <Fallback name=\"Return Home\">        <Sequence>          <is_agent_in_nest/>          <change_color color=\"green\"/>        </Sequence>        <wander/>      </Fallback>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"change_color\"            editable=\"true\">      <input_port name=\"color\"/>    </Action>    <Condition ID=\"is_agent_in_nest\"/>    <Condition ID=\"is_target_detected\"/>    <Condition ID=\"is_target_reached\"/>    <Action ID=\"wander\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_24",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {is_object_detected: Condition node: Check if an object is detected. Returns SUCCESS if detected, FAILURE otherwise.; PickUpObject: Action Node: Pick up the detected object. Always returns SUCCESS.; search_area: Action Node: Search the area for objects. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"if an object is detected then pick it up, otherwise search the area for objects\". Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"ObjectHandling\">  <BehaviorTree ID=\"ObjectHandling\">    <Fallback name=\"Main Fallback\">      <Sequence name=\"Pick Up Sequence\">        <is_object_detected/>        <PickUpObject/>      </Sequence>      <search_area/>    </Fallback>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"PickUpObject\"/>    <Control ID=\"Fallback\"/>    <Condition ID=\"is_object_detected\"/>    <Action ID=\"search_area\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_25",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {is_battery_low: Condition node: Check if the battery level is low. Returns SUCCESS if low, FAILURE otherwise.; go_to_charging_station: Action Node: Move the robot to the charging station. Always returns SUCCESS.; continue_work: Action Node: Continue with the assigned tasks. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"if battery is low then go to charging station, otherwise continue work\". Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"BatteryManagement\">  <BehaviorTree ID=\"BatteryManagement\">    <Fallback name=\"Battery Fallback\">      <Sequence name=\"Low Battery Sequence\">        <is_battery_low/>        <go_to_charging_station/>      </Sequence>      <continue_work/>    </Fallback>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Action ID=\"continue_work\"/>    <Action ID=\"go_to_charging_station\"/>    <Condition ID=\"is_battery_low\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_26",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {survey_area: Action Node: Survey the designated area. Always returns SUCCESS.; take_picture: Action Node: Capture an image of the area. Always returns SUCCESS.; return_home: Action Node: Return to the home base. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"survey an area, take a picture, and then return home\". Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"DroneSurvey\">  <BehaviorTree ID=\"DroneSurvey\">    <Sequence name=\"Mission Sequence\">      <survey_area/>      <take_picture/>      <return_home/>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"return_home\"/>    <Action ID=\"survey_area\"/>    <Action ID=\"take_picture\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_27",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_traffic_light: Condition node: Detect the current traffic light color. Returns SUCCESS if green, FAILURE if red.; stop_vehicle: Action Node: Stop the vehicle. Always returns SUCCESS.; proceed_vehicle: Action Node: Continue driving. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"if the traffic light is red then stop the vehicle, otherwise if green then proceed\". Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"TrafficControl\">  <BehaviorTree ID=\"TrafficControl\">    <Fallback name=\"Traffic Fallback\">      <Sequence name=\"Green Light Sequence\">        <detect_traffic_light/>        <proceed_vehicle/>      </Sequence>      <stop_vehicle/>    </Fallback>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Condition ID=\"detect_traffic_light\"/>    <Action ID=\"proceed_vehicle\"/>    <Action ID=\"stop_vehicle\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_28",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {are_parts_available: Condition node: Check if the necessary parts are available. Returns SUCCESS if available, FAILURE otherwise.; assemble_part: Action Node: Assemble a part. Always returns SUCCESS.; signal_error: Action Node: Signal an error condition. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"if parts are available then assemble the part, otherwise signal an error\". Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"AssemblyProcess\">  <BehaviorTree ID=\"AssemblyProcess\">    <Fallback name=\"Assembly Fallback\">      <Sequence name=\"Assembly Sequence\">        <are_parts_available/>        <assemble_part/>      </Sequence>      <signal_error/>    </Fallback>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Condition ID=\"are_parts_available\"/>    <Action ID=\"assemble_part\"/>    <Action ID=\"signal_error\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_29",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {CheckBattery: Condition node: Check the battery level. Returns SUCCESS if battery is sufficient, FAILURE otherwise.; MoveBase: Action Node: Move the agent to a specified goal. Always returns SUCCESS.; SaySomething: Action Node: Speak a message. Always returns SUCCESS.; ReactiveSequence: Control Node: Executes its children in order and restarts if a child returns RUNNING}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"execute two move strategies: one reactive strategy that continuously checks battery and then moves, and a simple strategy that checks battery only once before moving\". Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"MoveStrategies\">  <BehaviorTree ID=\"MoveSimple\">    <Sequence>      <CheckBattery/>      <SaySomething message=\"mission started\"/>      <MoveBase goal=\"1;2;0.5\"/>      <SaySomething message=\"mission completed\"/>    </Sequence>  </BehaviorTree>  <BehaviorTree ID=\"MoveStrategies\">    <ReactiveSequence>      <CheckBattery/>      <Sequence>        <SaySomething message=\"mission started\"/>        <MoveBase goal=\"1;2;0.5\"/>        <SaySomething message=\"mission started\"/>      </Sequence>    </ReactiveSequence>  </BehaviorTree>  <TreeNodesModel>    <Condition ID=\"CheckBattery\"/>    <Action ID=\"MoveBase\"            editable=\"true\">      <input_port name=\"goal\"/>    </Action>    <Action ID=\"SaySomething\"            editable=\"true\">      <input_port name=\"message\"/>    </Action>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_30",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {CalculateGoal: Action Node: Calculate the goal based on input parameters. Always returns SUCCESS.; PrintTarget: Action Node: Print the target information. Always returns SUCCESS.; SetBlackboard: Action Node: Set a key-value pair on the agent's blackboard. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"calculate a goal from a given position, print the target, set an alternative goal, and print the alternative goal\". Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"TreeWithPorts2\">  <BehaviorTree ID=\"TreeWithPorts2\">    <Sequence>      <CalculateGoal goal=\"{GoalPosition}\"/>      <PrintTarget target=\"{GoalPosition}\"/>      <SetBlackboard value=\"-1;3\"                     output_key=\"OtherGoal\"/>      <PrintTarget target=\"{OtherGoal}\"/>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"CalculateGoal\"            editable=\"true\">      <output_port name=\"goal\"/>    </Action>    <Action ID=\"PrintTarget\"            editable=\"true\">      <input_port name=\"target\"/>    </Action>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_31",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {SaySomething: Action Node: Speak a message. Always returns SUCCESS.; ThinkWhatToSay: Action Node: Process input and write a OUTPUT to the blackboard. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"say hello, then think what to say by writing to a blackboard entry, and then say the content of that blackboard entry\". Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"TreeWithPorts\">  <BehaviorTree ID=\"TreeWithPorts\">    <Sequence>      <SaySomething message=\"hello\"/>      <ThinkWhatToSay text=\"{the_answer}\"/>      <SaySomething message=\"{the_answer}\"/>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Action ID=\"SaySomething\"            editable=\"true\">      <input_port name=\"message\"/>    </Action>    <Action ID=\"ThinkWhatToSay\"            editable=\"true\">      <output_port name=\"text\"/>    </Action>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_32",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {is_patrol_complete: Condition node: Check if patrol is complete. Returns SUCCESS if complete, FAILURE otherwise.; move_to_next_waypoint: Action Node: Move to the next waypoint. Always returns SUCCESS.; scan_for_intruders: Action Node: Scan the area for intruders. Always returns SUCCESS.; report_intruder: Action Node: Report the detected intruder. Always returns SUCCESS.; wait: Action Node: Wait for a specified duration. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"if patrol is complete then move to next waypoint and scan for intruders; if an intruder is detected, report it, otherwise wait\". Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"PatrolSequence\"> <BehaviorTree ID=\"PatrolSequence\">  <Sequence>      <is_patrol_complete/>   <move_to_next_waypoint/>   <scan_for_intruders/>   <Fallback>    <report_intruder/>    <wait/>   </Fallback>  </Sequence> </BehaviorTree> <TreeNodesModel>  <Control ID=\"Fallback\"/>  <Condition ID=\"is_patrol_complete\"/>  <Action ID=\"move_to_next_waypoint\"/>  <Action ID=\"report_intruder\"/>  <Action ID=\"scan_for_intruders\"/>  <Action ID=\"wait\"/> </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_33",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {is_area_mapped: Condition node: Check if the area is mapped. Returns SUCCESS if mapped, FAILURE otherwise.; is_path_blocked: Condition node: Check if the path is blocked. Returns SUCCESS if blocked, FAILURE otherwise.; turn_left: Action Node: Turn the agent left. Always returns SUCCESS.; turn_right: Action Node: Turn the agent right. Always returns SUCCESS.; move_forward: Action Node: Move the agent forward. Always returns SUCCESS.; update_map: Action Node: Update the mapping data. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"if area is mapped, then if the path is blocked, turn left or right; otherwise, move forward and update the map\". Take a step back and think deeply about the behavior tree.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"MapArea\">  <BehaviorTree ID=\"MapArea\">    <Sequence>      <is_area_mapped/>      <Fallback>        <Sequence>          <is_path_blocked/>          <Fallback>            <turn_left/>            <turn_right/>          </Fallback>        </Sequence>        <Sequence>          <move_forward/>          <update_map/>        </Sequence>      </Fallback>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Condition ID=\"is_area_mapped\"/>    <Condition ID=\"is_path_blocked\"/>    <Action ID=\"move_forward\"/>    <Action ID=\"turn_left\"/>    <Action ID=\"turn_right\"/>    <Action ID=\"update_map\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_34",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {is_search_complete: Condition node: Check if the search is complete. Returns SUCCESS if complete, FAILURE otherwise.; move_to_next_area: Action Node: Move the agent to the next search area. Always returns SUCCESS.; scan_for_survivors: Action Node: Scan the area for survivors. Always returns SUCCESS.; is_survivor_detected: Condition node: Check if a survivor is detected. Returns SUCCESS if detected, FAILURE otherwise.; call_for_rescue: Action Node: Call for rescue. Always returns SUCCESS.; mark_area_searched: Action Node: Mark the area as searched. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"if search is complete then move to next area and scan for survivors; if a survivor is detected, call for rescue, otherwise mark the area as searched\". Take a step back and think deeply about the behavior.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"SearchAndRescue\">  <BehaviorTree ID=\"SearchAndRescue\">    <Sequence>      <is_search_complete/>      <Fallback>        <Sequence>          <move_to_next_area/>          <scan_for_survivors/>          <Fallback>            <Sequence>              <is_survivor_detected/>              <call_for_rescue/>            </Sequence>            <mark_area_searched/>          </Fallback>        </Sequence>      </Fallback>    </Sequence>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Action ID=\"call_for_rescue\"/>    <Condition ID=\"is_search_complete\"/>    <Condition ID=\"is_survivor_detected\"/>    <Action ID=\"mark_area_searched\"/>    <Action ID=\"move_to_next_area\"/>    <Action ID=\"scan_for_survivors\"/>  </TreeNodesModel></root>"
    },
    {
      "id": "seed_task_35",
      "SYSTEM": "<<SYS>>You are a helpful, respectful, and honest AI assistant. Your task is to generate well-structured XML code for behavior trees based on the provided instructions.<</SYS>>",
      "INSTRUCTIONS": "It is CRITICAL to use only the following behaviors structured as a dictionary: {detect_corridor: Condition node: Check if a corridor is detected. Returns SUCCESS if detected, FAILURE otherwise.; align_corridor: Action Node: Align with the detected corridor. Always returns SUCCESS.; move_forward: Action Node: Move forward along the corridor. Always returns SUCCESS.; search_for_corridor: Action Node: Search for a corridor. Always returns SUCCESS}. to construct behavior tree in XML format to the following command, including in the behavior tree a behavior that is not in the provided dictionary can result in damage, therefore you are not allowed to do so, AVOID AT ALL COSTS.",
      "USER COMMAND": "generate behavior tree to \"if a corridor is detected then align with it and move forward, otherwise search for a corridor\". Take a step back and think deeply about the behavior you need for this command. Then think of the XML structure and the behavior you used.",
      "OUTPUT": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root BTCPP_format=\"3\"      main_tree_to_execute=\"CorridorNavigation\">  <BehaviorTree ID=\"CorridorNavigation\">    <Fallback name=\"Corridor Fallback\">      <Sequence name=\"Navigate Corridor\">        <detect_corridor/>        <align_corridor alignment=\"\"/>        <move_forward speed=\"\"/>      </Sequence>      <search_for_corridor/>    </Fallback>  </BehaviorTree>  <TreeNodesModel>    <Control ID=\"Fallback\"/>    <Action ID=\"align_corridor\"            editable=\"true\">      <input_port name=\"alignment\"/>    </Action>    <Condition ID=\"detect_corridor\"/>    <Action ID=\"move_forward\"            editable=\"true\">      <input_port name=\"speed\"/>    </Action>    <Action ID=\"search_for_corridor\"/>  </TreeNodesModel></root>"
    }
  ]  